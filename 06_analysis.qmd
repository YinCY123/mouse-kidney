---
title: "06_analysis"
author: "yincy"
date: 2023/05/06
format: html
editor: source
---

# different resolution levels of cell types

```{r}
library(magrittr)
library(scran)
library(purrr)
library(scater)
library(SingleCellExperiment)

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")

# level 1 clusters
colData(sces)$level1_cluster <- map_vec(colData(sces)$cell_type, .f = function(x){
    switch(x, 
           "Endothelial" = "Endothelium", 
           "Glomerular Endothelial" = "Endothelium", 
           "paravertebral Endothelial" = "Endothelium", 
           "Parietal Epithelial" = "Parietal Epithelial",
           "B Cells" = "Immune", 
           "Cd4 T Cells" = "Immune", 
           "Cd8 T Cells" = "Immune", 
           "NK Cells" = "Immune", 
           "Monocytes" = "Immune", 
           "Dendritic Cells" = "Immune", 
           "Macrophages" = "Immune", 
           "Sympathetic Neurons" = "Neurons", 
           "Sensory Neurons" = "Neurons", 
           "Satellite Glia A" = "Glia", 
           "Satellite Glia B" = "Glia", 
           "Schwann Cells" = "Glia", 
           "Fibroblast" = "Interstitial", 
           "VSMC" = "Interstitial", 
           "Pericytes" = "Interstitial", 
           "Podocytes" = "Interstitial", 
           "Mesangial Cells A" = "Interstitial", 
           "Mesangial Cells B" = "Interstitial", 
           "PTS1" = "Proximal Tubule", 
           "PTS2" = "Proximal Tubule", 
           "PTS3" = "Proximal Tubule", 
           "LOH_DTL1" = "LOH", 
           "LOH_DTL2" = "LOH", 
           "LOH_DTL3" = "LOH", 
           "LOH_ATL" = "LOH", 
           "LOH_MTAL" = "LOH", 
           "LOH_CTAL" = "LOH", 
           "DCT" = "Distal Tubule", 
           "CNT" = "Distal Tubule", 
           "CCD_IC" = "Collecting Duct", 
           "OMCD_IC" = "Collecting Duct", 
           "IMCD_IC" = "Collecting Duct", 
           "CCD_PC" = "Collecting Duct", 
           "OMCD_PC" = "Collecting Duct", 
           "IMCD_PC" = "Collecting Duct")
})
sces$level1_cluster <- factor(sces$level1_cluster, 
                              levels = c("Endothelium", "Parietal Epithelial", "Proximal Tubule", 
                                         "LOH", "Distal Tubule", "Collecting Duct", "Interstitial", 
                                         "Immune", "Neurons", "Glia"))

# level 2 clusters
colData(sces)$level2_cluster <- sapply(colData(sces)$cell_type, FUN = function(x){
    switch(x, 
           "Endothelial" = "Endothelium", 
           "Glomerular Endothelial" = "Endothelium", 
           "paravertebral Endothelial" = "Endothelium", 
           "Parietal Epithelial" = "Parietal Epithelial",
           "B Cells" = "B Cells", 
           "Cd4 T Cells" = "T Cells", 
           "Cd8 T Cells" = "T Cells", 
           "NK Cells" = "NK Cells", 
           "Monocytes" = "Monocytes", 
           "Dendritic Cells" = "Dendritic Cells", 
           "Macrophages" = "Macrophages", 
           "Sympathetic Neurons" = "Sympathetic Neurons", 
           "Sensory Neurons" = "Sensory Neurons", 
           "Satellite Glia A" = "Satellite Glia", 
           "Satellite Glia B" = "Satellite Glia", 
           "Schwann Cells" = "Schwann Cells", 
           "Fibroblast" = "Fibroblast", 
           "VSMC" = "VSMC", 
           "Pericytes" = "Pericytes", 
           "Podocytes" = "Podocytes", 
           "Mesangial Cells A" = "Mesangial Cells", 
           "Mesangial Cells B" = "Mesangial Cells", 
           "PTS1" = "Proximal Tubule", 
           "PTS2" = "Proximal Tubule", 
           "PTS3" = "Proximal Tubule", 
           "LOH_DTL1" = "dLOH", 
           "LOH_DTL2" = "dLOH", 
           "LOH_DTL3" = "dLOH", 
           "LOH_ATL" = "aLOH", 
           "LOH_MTAL" = "aLOH", 
           "LOH_CTAL" = "aLOH", 
           "DCT" = "Distal Tubule", 
           "CNT" = "Distal Tubule", 
           "CCD_IC" = "CD_IC", 
           "OMCD_IC" = "CD_IC", 
           "IMCD_IC" = "CD_IC", 
           "CCD_PC" = "CD_PC", 
           "OMCD_PC" = "CD_PC", 
           "IMCD_PC" = "CD_PC")
})
sces$level2_cluster <- factor(sces$level2_cluster, 
                              levels = c("Endothelium", "Parietal Epithelial", "Proximal Tubule", 
                                         "dLOH", "aLOH", "Distal Tubule", "CD_IC", "CD_PC",
                                         "Fibroblast", "VSMC", "Pericytes", "Mesangial Cells", "Podocytes", 
                                         "Monocytes", "Dendritic Cells", "Macrophages", "NK Cells", 
                                         "T Cells", "B Cells", 
                                         "Sensory Neurons", "Sympathetic Neurons", 
                                         "Satellite Glia", "Schwann Cells"))


# level 3 cluster
sces$level3_cluster <- factor(sces$cell_type, 
                              levels = c("Endothelial", "Glomerular Endothelial", 
                                         "paravertebral Endothelial", "Parietal Epithelial", "PTS1", 
                                         "PTS2", "PTS3", "LOH_DTL1", "LOH_DTL2", "LOH_DTL3", "LOH_ATL", 
                                         "LOH_MTAL", "LOH_CTAL", "DCT", "CNT", "CCD_IC", "OMCD_IC", 
                                         "IMCD_IC", "CCD_PC", "OMCD_PC", "IMCD_PC", 
                                         "Fibroblast", "VSMC", "Pericytes", "Mesangial Cells A", 
                                         "Mesangial Cells B", "Podocytes", "Monocytes", "Dendritic Cells", 
                                         "Macrophages", "NK Cells", "Cd4 T Cells", "Cd8 T Cells", "B Cells", 
                                         "Sensory Neurons", "Sympathetic Neurons", 
                                         "Satellite Glia A", "Satellite Glia B", "Schwann Cells"))

sces$location <- factor(sces$location, levels = c("Cortex", "outer medulla", "inner medulla", "paravertebral"))
saveRDS(sces, "../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
```

## cell type relationships

```{r}
levels_relationship <- data.frame(
    level0_cell_types = "kidney",
    level1_cell_types = c(rep("Endothelium", 3), "Parietal Epithelial ", rep("Proximal Tubule", 3),
                          rep("LOH", 6), rep("Distal Tubule", 2), rep("Collecting Duct", 6), 
                          rep("Interstitial", 6), rep("Immune", 7), rep("Neurons", 2), rep("Glia", 3)),
    
    level2_cell_types = c(rep("Endothelium ", 3), "Parietal  Epithelial ", rep("Proximal Tubule ", 3), 
                          rep("dLOH", 3), rep("aLOH", 3), rep("Distal Tubule ", 2), rep("CD_IC", 3), 
                          rep("CD_PC", 3), "Fibroblast", "VSMC", "Pericytes", rep("Mesangial Cells", 2),
                          "Podocytes", "Monocytes", "Dendritic Cells", "Macrophages", 
                          "NK Cells", rep("T Cells", 2), "B Cells", "Sensory Neurons", 
                          "Sympathetic Neurons", rep("Satellite Glia", 2), "Schwann Cells"),
    
    level3_cell_types = c("Endothelial", "Glomerular Endothelial", 
                          "paravertebral Endothelial", "Parietal  Epithelial  ", "PTS1", 
                          "PTS2", "PTS3", "LOH_DTL1", "LOH_DTL2", "LOH_DTL3", "LOH_ATL", 
                          "LOH_MTAL", "LOH_CTAL", "DCT", "CNT", "CCD_IC", "OMCD_IC", 
                          "IMCD_IC", "CCD_PC", "OMCD_PC", "IMCD_PC", 
                          "Fibroblast ", "VSMC ", "Pericytes ", "Mesangial Cells A", 
                          "Mesangial Cells B", "Podocytes ", "Monocytes ", "Dendritic Cells ", 
                          "Macrophages ", "NK Cells ", "Cd4 T Cells", "Cd8 T Cells", "B Cells ", 
                          "Sensory Neurons ", "Sympathetic Neurons ", 
                          "Satellite Glia A", "Satellite Glia B", "Schwann Cells ")
)
levels_relationship
levels_relationship <- levels_relationship %>% dplyr::relocate(level0_cell_types)
```

```{r}
# visualize cell type relationships
library(tidygraph)
library(ggraph)
library(igraph)

l1 <- levels_relationship[, 1:2] %>% magrittr::set_colnames(value = c("from", "to"))
l2 <- levels_relationship[, 2:3] %>% magrittr::set_colnames(value = c("from", "to"))
l3 <- levels_relationship[, 3:4] %>% magrittr::set_colnames(value = c("from", "to"))
df <- rbind(l1, l2, l3)
df <- df %>% dplyr::distinct(from, to, .keep_all = TRUE)

g <- graph_from_data_frame(d = df, directed = TRUE)
tg <- as_tbl_graph(g)
tg <- tg %>% 
    mutate(level = ifelse(.N()$name %in% levels_relationship$level1_cell_types, "1", 
                          ifelse(.N()$name %in% levels_relationship$level2_cell_types, "2", 
                                 ifelse(.N()$name == "kidney", "0", "3"))), 
           root = node_is_root()) 
ly <- create_layout(tg, layout = "dendrogram")

p_cluster_relationships <- ly %>% 
    ggraph(layout = "dendrogram") + 
    geom_node_point(aes(filter = level == 0), size = 5) +
    geom_node_point(aes(filter = level != 0, color = level), size = 3) +
    geom_edge_diagonal() +
    geom_node_text(aes(filter = level == 0, label = name), size = 5, nudge_x = 0, nudge_y = -0.4) +
    geom_node_text(aes(filter = level %in% c(1, 2), label = name), size = 3, nudge_x = 0.5) +
    geom_node_text(aes(x = x, y = y - 0.1, label = name, filter = level == 3), size = 2.5, hjust = 0) +
    coord_flip() +
    scale_y_reverse(expand = c(0.3, 0.3)) +
    scale_x_reverse() +
    scale_color_discrete(name = "cell type levels") +
    theme(legend.position = "top", 
          panel.background = element_blank(), 
          legend.title = element_text(size = 15))


ggsave("../data/kidney/kidney-map/results/markers/p_cluster_relationships.tiff", 
       width = 6.5, height = 10)
saveRDS(p_cluster_relationships, 
        "../data/kidney/kidney-map/results/markers/p_cluster_relationships.rds")
```

# marker gene detection

```{r}
hvgs <- readRDS("../data/kidney/kidney-map/integrated_data/hvgs.rds")
set.seed(104)
fmarker1 <- findMarkers(sces, 
                        groups = sces$level1_cluster, 
                        test.type = "wilcox", 
                        pval.type = "all", 
                        min.prop = 0.25, 
                        direction = "up", 
                        subset.row = hvgs, 
                        lfc = 1)
saveRDS(fmarker1, "../data/kidney/kidney-map/results/markers/level1_markers.rds")

set.seed(105)
fmarker2 <- findMarkers(sces, 
                        groups = sces$level2_cluster, 
                        test.type = "wilcox", 
                        pval.type = "all", 
                        min.prop = 0.25, 
                        direction = "up",
                        subset.row = hvgs, 
                        lfc = 1)
saveRDS(fmarker2, "../data/kidney/kidney-map/results/markers/level2_markers.rds")

set.seed(106)
fmarker3 <- findMarkers(sces, 
                        groups = sces$level3_cluster, 
                        test.type = "wilcox", 
                        pval.type = "all", 
                        min.prop = 0.1, 
                        direction = "up", 
                        # subset.row = hvgs, 
                        lfc = 0, 
                        restrict = levels)
saveRDS(fmarker3, "../data/kidney/kidney-map/results/markers/level3_markers.rds")
saveRDS(fmarker3, "../data/kidney/kidney-map/results/markers/level3_markers_restricted.rds")
```

```{r}
source("functions/idconv.R")
fmarker3 <- readRDS("../data/kidney/kidney-map/results/markers/level3_markers.rds")
fmarker3 %>% names
fmarker3[[2]] %>% rownames() %>% head(50) %>% idconv(from_type = "GENEID", to_type = "SYMBOL", db = "mouse")

idconv("ENSMUSG00000059336", from_type = "GENEID", to_type = "SYMBOL", db = "mouse")
```

```{r}
for(name in names(fmarker1)){
    plotExpression(sces, 
                   features = fmarker1[[name]] %>% rownames() %>% .[1:50],
                   # features = idconv("H2-Q6", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
                   x = "level1_cluster", 
                   ncol = 2) +
        theme(axis.text.x = element_text(angle = -60, hjust = 0, vjust = 0.5))
    
    ggsave(paste("level1_clusters/", name, "_cluster.pdf", sep = ""), height = 100, width = 10, limitsize = F)
}

for(name in names(fmarker2)){
    plotExpression(sces, 
                   features = fmarker2[[name]] %>% rownames() %>% .[1:50],
                   # features = idconv("H2-Q6", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
                   x = "level2_cluster", 
                   ncol = 2) +
        theme(axis.text.x = element_text(angle = -60, hjust = 0, vjust = 0.5))
    
    ggsave(paste("level2_clusters/", name, "_cluster.pdf", sep = ""), height = 100, width = 10, limitsize = F)
}

for(name in names(fmarker3)){
    plotExpression(sces, 
                   features = fmarker3[[name]] %>% rownames() %>% .[1:50],
                   # features = idconv("H2-Q6", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
                   x = "level3_cluster", 
                   ncol = 2) +
        theme(axis.text.x = element_text(angle = -60, hjust = 0, vjust = 0.5))
    
    ggsave(paste("level3_clusters_restricted/", name, "_cluster.pdf", sep = ""), height = 100, width = 10, limitsize = F)
}
```

## plot marker genes

```{r}
library(patchwork)
library(scater)
library(viridis)
source("functions/idconv.R")
sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
plotTSNE(sces,
         # colour_by = "cell_type",
         colour_by = idconv("C1qa", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
         text_by = "cell_type", 
         text_size = 2,
         point_size = 0.2) +
    theme(legend.position = "right") +
    scale_color_gradient(name = "Lrp2", low = "grey80", high = "red") 


plotTSNE(sces,
         colour_by = "location",
         # colour_by = idconv("Aqp1", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
         text_by = "cell_type", 
         text_size = 2,
         point_size = 0.2) +
    theme(legend.position = "right") +
    # scale_color_gradient(name = "Aqp1", low = "grey80", high = "red") +
    plot_layout(ncol = 2)


plotTSNE(sces,
         colour_by = "level2_cluster",
         # colour_by = idconv("C1qa", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
         text_by = "level2_cluster", 
         text_size = 2,
         point_size = 0.2) +
    theme(legend.position = "none", 
          axis.line = element_blank(), 
          axis.ticks = element_blank(), 
          axis.text = element_blank(), 
          axis.title = element_blank())
ggsave("../data/kidney/kidney-map/integrated_data/cluster_for_subcluster_annotation.tiff")
```

### level 1 markers

```{r}
library(scater)
library(tidyr)
library(dplyr)
library(ggplot2)
source("functions/idconv.R")

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
marker_themes <- theme(panel.grid.minor = element_blank(), 
                       panel.background = element_blank(),
                       panel.grid.major = element_line(linetype = 2, linewidth = 0.01, colour = "grey90"),
                       axis.ticks = element_line(linewidth = 0.2),
                       axis.text.x = element_text(angle = -40, hjust = 0, vjust = 0.5, 
                                                  size = 18, face = "bold"), 
                       strip.text.y.right = element_text(size = 15, face = "bold"), 
                       plot.margin = unit(c(0, 15, 0, 0), "mm")) 

level1_markers <- list(
    "Endothelium" = c("Pecam1", "Ly6c1", "Kdr", "Cdh5", "Flt1", "Emcn", "Sox18",
                      "Egfl7", "Gimap6", "Fabp4", "Esam", "Rsad2", "Adgrl4", 
                      'Cd300lg', "Ctla2a", "Icam2", "Fam167b", "Mmrn2", "Tek", 
                      "Ramp3", "Tie1"),
    "Parietal Epithelial" = c("Stc2","C3"),
    "Proximal Tubule" = c("Slc34a1", "Lrp2", "Slc27a2", "Acsm2", "Miox", 
                          "Ass1", "Akr1c21", "Keg1", "Spink3", 
                          "Fbp1", "Ttc36", "Guca2b", "Fut9", 
                          "Ugt2b38", "Slc4a4", "Dnase1", "Khk", 
                          "Pecr", "Pah", "Slc22a30", "Slc5a2", 
                          "Acy3", "Sord", "Cyp2j5", "Pck1", "Pdzk1"),
    "LOH" = c("Slc12a1", "Sptssb", "Slc5a3", "Bst1", "Bok"), 
    "Distal Tubule" = c("Slc12a3", "Calb1", "Pgam2", "Pvalb", "Kng2",
                        "Tmem52b", "Clcnkb", "Kcnj1", "Emx1", "Klk1", 
                        "Mt2", "Wnk4"),
    "Collecting Duct" = c("Aqp2", "Aqp3", "Aqp4", "Avpr2", "Hsd11b2", 
                          "Spink8", "Ptger1", "Muc1", "Muc20", "Fxyd4"),
    "Interstitial" = c("Sepp1", "Selenop", "Cdkn1c", "Gpx4-ps2", 
                       "Synpo", "Clic3", "Mafb", "H2-Q6", "Dpp4", 
                       "Tcf21", "Rhpn1", "Gm13588", "H2bc4", "Cnn1", 
                       "Septin11"),
    "Neurons" = c("Nefl", "Snap25", "Stmn2", "Uchl1", "Tppp3", "Prph", 
                  "Nefm", "Nefh", "Tubb3", "Stmn3", "Pcsk1n", "Gng3", 
                  "Map1b", "Ndrg4", "Nefm", "Snap25", "Rtn1", "Acot7", 
                  "Snrpn", "Gng3", "Ywhag", "Zwint", "Meg3", "Pirt"),
    "Glia" = c("Plp1", "Mbp", "Gpm6b", "Mpz", "Cnp", "Art3", "Cmtm5", 
               "Atp1a2", "Fabp7", "Plekhb1", "Sfrp5", "Ttyh1", "Sema3b", 
               "Lpar1", "Vwa1", "Kcna1", "Hmgcs2", "Mmd2", "Gpr37l1"),
    "Immune" = c("Ptprc", "Lcp1", "Laptm5", "Coro1a", "Ctss", "Cd52", 
                 "Cd53", "Cd48", "H2-Aa", "H2-Eb1", "H2-DMa", "Tyrobp", 
                 "Fcer1g", "Lyz2", "Rac2")
)

level1_df <- makePerCellDF(sces, features = idconv(sapply(level1_markers, "[[", 1)), use.dimred = F) %>% 
    pivot_longer(cols = starts_with("ENS"), names_to = "ensembl", values_to = "logcounts")
level1_df$ensembl <- factor(level1_df$ensembl, levels = idconv(sapply(level1_markers, "[[", 1)))
lb <- as_labeller(setNames(sapply(level1_markers, "[[", 1), idconv(sapply(level1_markers, "[[", 1))))

p_level1 <- level1_df %>% 
    ggplot(aes(level1_cluster, logcounts)) +
    geom_violin(aes(fill = level1_cluster), color = NA, scale = "width", show.legend = F) +
    facet_wrap(vars(ensembl), 
               ncol = 1, 
               strip.position = "right", 
               labeller = lb, 
               scales = "free_y") +
    scale_x_discrete(name = NULL) +
    scale_y_continuous(name = NULL) +
    marker_themes

saveRDS(p_level1, "../data/kidney/kidney-map/results/markers/p_level1_markers.rds")
```

### level2 markers

```{r}
level2_markers <- list(
    "Endothelium" = c("Pecam1", "Ly6c1", "Kdr", "Cdh5", "Flt1", "Emcn", "Sox18",
                      "Egfl7", "Gimap6", "Fabp4", "Esam", "Rsad2", "Adgrl4", 
                      'Cd300lg', "Ctla2a", "Icam2", "Fam167b", "Mmrn2", "Tek", 
                      "Ramp3", "Tie1"),
    "Parietal Epithelial" = c("Stc2","C3", "Cp"),
    "Proximal Tubule" = c("Slc34a1", "Lrp2", "Slc27a2", "Acsm2", "Miox", 
                          "Ass1", "Akr1c21", "Keg1", "Spink3", 
                          "Fbp1", "Ttc36", "Guca2b", "Fut9", 
                          "Ugt2b38", "Slc4a4", "Dnase1", "Khk", 
                          "Pecr", "Pah", "Slc22a30", "Slc5a2", 
                          "Acy3", "Sord", "Cyp2j5", "Pck1", "Pdzk1"),
    "dLOH" = c("Bst1", "Pitx2", "Phgdh"),
    "aLOH" = c("Slc12a1", "Sptssb", "Ptger3"),
    "Distal Tubule" = c("Slc12a3", "Calb1",  "Kl", "Sgms2", "Pvalb", "S100g", 
                        "Tmem52b", "Pgam2", "Emx1", "Cwh43", "Abca13"),
    "CD_IC" = c("Atp6v1g3", "Atp6v0a4", "Atp6v1c2", "Atp6v1b1", "Atp6v0d2", "Rhbg", "Car12", "Hepacam2", 
                "Foxi1", "Tmem61", "Dmxl1", "Fam13a", "Rnf152", "Itpr2", "Oxgr1", "Aqp6",
                "Slc4a1", "Slc26a4", "Hmx2", "Guca2a", "Serpinb9"),
    "CD_PC" = c("Aqp2", "Avpr2", "Aqp4", "Ptger1", "Muc20", "Muc1",
                "Hsd11b2", "Aqp3", "Elf5"),
    "Monocytes" = c("Sirpb1c",  "Plac8", "Ace","Clec4a3", "Ear2", "Lst1", "Msrb1", "Ccl6", "Cd300a", 
                    "Ifitm6", "Clec4a1", "Hp"),
    "Dendritic Cells" = c("Cd209a", "Clec10a", "Slamf7"), 
    "Macrophages" = c("C1qa", "C1qb", "C1qc", "Cd14", "Lilra5", "Hpgd", "Adgre1", "P2ry6",
                      "Slamf9", "Cxcl16", "Cd72", "Ms4a7", "C5ar1", "C3ar1"), 
    "NK Cells" = c("Gzma", "Gzmb", "Ncr1", "Klrk1", "Nkg7", "Klrb1c", "Klre1", "Klrc2", "Cd7", 
                   "Il2rb", 'Ctsw', "Klra9", "Txk", "Klrc1", "Klra8", "Cma1", "Klra4"), 
    "T Cells" = c("Cd3d", "Cd3g", "Cd3e", "Ms4a6b", "Lat", "Cd28", "Cd8b1", "Cxcr6", "Cd8a", "Cd5"),
    "B Cells" = c("Cd79a", "Cd79b", "Ly6d", "Ms4a1", 'Fcmr', "Bank1", "Siglecg", 
                  'Mzb1', "Fcrla", "Fcer2a", "Cd19", "Tnfrsf13c", "Vpreb3", "Cd22", "Hvcn1"), 
    "Sensory Neurons" = c("Calca", "Fstl1", "Tac1", "Ano3", "Fgf13", "Ppp1r1c", "Calcb", "Rbfox3", "Grik1"),
    "Sympathetic Neurons" = c("Dbh", "Npy", "Th", "Scn3a", "Maoa", "Slc18a2", 
                              "Slc7a14", "mt-Tp", "Ntrk1", "Phf24", 
                              "Ache", "Plxna4", "Tcaf1", "Syn2", "Arfgef3",
                              "Slc6a2", "Syt1", "Dgkh"),
    "Satellite Glia" = c("Fabp7", "Ednrb", "Ttyh1", "Gpr37l1", "Mmd2", "Matn2", 
                         "Fbln2", "Entpd2", "Prss35", "Ntrk2", "Bcan"), 
    "Schwann Cells" = c("Ncmap", "Prx", "Secisbp2l", "Pllp", "Fam178b", "Ugt8a", "Ogn", 
                        "Fa2h", "Mlip", "Mag", "Slc36a2", "Mfap5", "Drp2"), 
    "Pericytes" = c("Rergl", "Or51e1", "Higd1b", "Notch3", "Akr1b7", "Rgs5", "Ephx3", "Tbx3os1", 
                    "Cspg4", "Pdgfrb", "Map3k7cl", "Ngf", "Lmod1"),
    "VSMC" = c("Cnn1", "Nkx3-1", "Ptgis", "Pln", "Tcap", "Sh3bgr"),
    "Fibroblast" = c("Krt19", "Krt15", "Cbr2", "Upk1b", "Dcn", "Trim29",  "Krt5", "Egfl6",  "Gsdmc2"),
    "Mesangial Cells" = c("Nt5e", "Itga8",  "Septin4", "Scarf2", "Sfrp2",  "Ccn2", "Gdf10"),
    "Podocyte" = c("Dpp4", "Clic3", "Mafb", "Pals1", "Gas1", "Tmem150c", 
                    "H2-Q6", "Sema3g", "Hs3st6", "Nphs2", "Cldn5", "Tcf21",
                    "Ptpro", "Clic5", "Nphs1",  "Thsd7a", 
                   "Rhpn1", "Gm7658",  "Ripor1",  "Shisa3"))

level2_df <- makePerCellDF(sces, features = idconv(sapply(level2_markers, "[[", 1)), use.dimred = F) %>% 
    pivot_longer(cols = starts_with("ENS"), names_to = "ensembl", values_to = "logcounts")
level2_df$ensembl <- factor(level2_df$ensembl, levels = idconv(sapply(level2_markers, "[[", 1)))

lb <- as_labeller(setNames(sapply(level2_markers, "[[", 1), idconv(sapply(level2_markers, "[[", 1))))
p_level2 <- level2_df %>% 
    ggplot(aes(level2_cluster, logcounts)) +
    geom_violin(aes(fill = level2_cluster), color = NA, scale = "width", show.legend = F) +
    facet_wrap(vars(ensembl), 
               ncol = 1, 
               strip.position = "right", 
               labeller = lb,
               scales = "free_y") +
    scale_x_discrete(name = NULL) +
    scale_y_continuous(name = NULL) +
    marker_themes

saveRDS(p_level2, "../data/kidney/kidney-map/results/markers/p_level2_markers.rds")
```

### level 3 markers

```{r}
level3_markers <- list(
    "Endothelial" = c("Pecam1"), 
    "Glomerular Endothelial" = c("Pi16", "Gm49391", "Gm45837", "Gm49393"),
    "paravertebral Endothelial" = c("Slco1a4", "Abcb1a"),
    "Parietal Epithelial" = c("Stc2", "C3"), 
    "PTS1" = c("Slc5a2", "Slc5a12", "Spp2", "Gsta2"),
    "PTS2" = c("Slc22a6"),
    "PTS3" = c("Slc13a3"),
    "LOH_DTL1" = c("Slc14a2"), 
    "LOH_DTL2" = c("Bst1"),
    "LOH_DTL3" = c("Slc39a8", "Angpt2", "Fmo2"),
    "LOH_ATL" = c("Sptssb"), 
    "LOH_MTAL" = c("Slc12a1", "Nccrp1", "Gpx6"),
    "LOH_CTAL" = c("Egf", "Slc12a1", "Umod", "Pth1r", "Gpx6"),
    "DCT" = c("Pvalb"), 
    "CNT" = c("Ltc4s", "Calb1", "S100g", "Pgam2"), 
    "CCD_IC" = c("Slc26a4", "Insrr", "Hmx2"),
    "OMCD_IC" = c("Kit"), 
    "IMCD_IC" = c("Aqp6", "Slc4a1", "Kit"),
    "CCD_PC" = c("Kcne1"), 
    "OMCD_PC" = c("Btc"), 
    "IMCD_PC"  =c("Aldh1a3"),
    "Fibroblast" = c("Krt19"), 
    "VSMC" = c("Cnn1"), 
    "Pericytes" = c("Cspg4"), 
    "Podocyte" = c("Dpp4", "Clic3", "H2-Q6", "Tcf21"), 
    "Mesangial Cells A" = c("Ctgf"), 
    "Mesangial Cells B" = c("Hs3st3b1"), 
    "Sensory Neurons" = c("Calca"), 
    "Sympathetic Neurons" = c("Dbh"), 
    "Satellite Glia A" = c("Mmd2", "Fabp7", "Ttyh1", "Lpar1", "Fbln2", "Sfrp5"), 
    "Satellite Glia B" = c("Scn7a", "Entpd2", 'Col3a1', "C4b"), 
    "Schwann Cells" = c("Ncmap"), 
    "Monocytes" = c("Sirpb1c"), 
    "Dendritic Cells" = c("Cd209a"), 
    "Macrophages" = c("C1qa"), 
    "NK Cells" = c("Gzma"), 
    "Cd4 T Cells" = c("Cd4"), 
    "Cd8 T Cells" = c("Cd8a"), 
    "B Cells" = c("Cd79a")
)

level3_df <- makePerCellDF(sces, features = idconv(sapply(level3_markers, "[[", 1)), use.dimred = F) %>% 
    pivot_longer(cols = starts_with("ENS"), names_to = "ensembl", values_to = "logcounts")
level3_df$ensembl <- factor(level3_df$ensembl, levels = idconv(sapply(level3_markers, "[[", 1)))
lb <- as_labeller(setNames(sapply(level3_markers, "[[", 1), idconv(sapply(level3_markers, "[[", 1))))

p_level3 <- level3_df %>% 
    ggplot(aes(level3_cluster, logcounts)) +
    geom_violin(aes(fill = level3_cluster), scale = "width", color = NA, show.legend = F) +
    facet_wrap(vars(ensembl), 
               ncol = 1, 
               strip.position = "right", 
               labeller = lb) +
    scale_x_discrete(name = NULL) +
    scale_y_continuous(name = NULL) +
    theme(plot.margin = unit(c(0, 5, 0, 0), "mm")) +
    marker_themes

saveRDS(p_level3, "../data/kidney/kidney-map/results/markers/p_level3_markers.rds")
```

```{r}
library(patchwork)

p_level1_markers <- readRDS("../data/kidney/kidney-map/results/markers/p_level1_markers.rds")
p_level2_markers <- readRDS("../data/kidney/kidney-map/results/markers/p_level2_markers.rds")
p_level3_markers <- readRDS("../data/kidney/kidney-map/results/markers/p_level3_markers.rds")

p_level1_markers + p_level2_markers + plot_layout(widths = c(1, 2.3))
ggsave("../data/kidney/kidney-map/results/markers/markers12.tiff", 
       width = 45 * 0.9, height = 30 * 0.9)

# (p_level1_markers + p_level2_markers + plot_layout(widths = c(1, 2.3))) / (p_level3_markers) +
#     plot_layout(heights = c(1, 2.5))
p_level3_markers
ggsave("../data/kidney/kidney-map/results/markers/markers3.tiff", 
       width = 45 * 0.9, height = 45 * 0.9)
```


### podocytes markers

```{r}
library(scater)
library(ggplot2)
library(patchwork)
library(tidyr)
sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")

podocytes_df <- makePerCellDF(sces, features = idconv(c("Nphs1", "Nphs2", "Dpp4", "Clic3")), use.dimred = F) %>% 
    pivot_longer(cols = starts_with("ENSMUSG"), names_to = "ensembl", values_to = "logcounts")
podocytes_df$ensembl <- factor(podocytes_df$ensembl, levels = idconv(c("Nphs1", "Nphs2", "Dpp4", "Clic3")))

lb <- setNames(names(idconv(c("Nphs1", "Nphs2", "Dpp4", "Clic3"))), idconv(c("Nphs1", "Nphs2", "Dpp4", "Clic3"))) %>% 
    as_labeller()

podocytes_df %>% 
    ggplot(aes(level2_cluster, logcounts)) +
    geom_violin(aes(fill = level2_cluster), scale = "width") +
    facet_wrap(vars(ensembl), 
               ncol = 1, 
               labeller = lb, 
               strip.position = "right") +
    scale_x_discrete(name = NULL) +
    scale_y_discrete(name = "expression level") +
    theme(legend.position = "none", 
          axis.text.x = element_text(angle = -60, hjust = 0), 
          axis.title.y = element_text(size = 20),
          strip.text.y.right = element_text(size = 13), 
          strip.background = element_rect(fill = "grey70"))
ggsave("../data/kidney/kidney-map/results/markers/podocytes_markers.tiff", 
       width = 10, height = 6)
```

### mesangial cell markers

```{r}
mesangial_df <- makePerCellDF(sces, features = idconv(c("Itga8", "Nt5e", "Septin4", "Scarf2")), use.dimred = F) %>% 
    pivot_longer(cols = starts_with("ENS"), names_to = "ensembl", values_to = "logcounts")
mesangial_df$ensembl <- factor(mesangial_df$ensembl, levels = idconv(c("Itga8", "Nt5e", "Septin4", "Scarf2")))
lb <- as_labeller(setNames(names(idconv(c("Itga8", "Nt5e", "Septin4", "Scarf2"))), idconv(c("Itga8", "Nt5e", "Septin4", "Scarf2"))))

mesangial_df %>% 
    ggplot(aes(level2_cluster, logcounts)) +
    geom_violin(aes(fill = level2_cluster), scale = "width") +
    facet_wrap(vars(ensembl), 
               ncol = 1, 
               labeller = lb, 
               strip.position = "right") +
    scale_x_discrete(name = NULL) +
    scale_y_continuous(name = "expression level") +
    theme(legend.position = "none", 
          axis.text.x = element_text(angle = -60, hjust = 0), 
          axis.title.y = element_text(size = 20),
          strip.text.y.right = element_text(size = 13), 
          strip.background = element_rect(fill = "grey70"))
ggsave("../data/kidney/kidney-map/results/markers/mesangial_marker.tiff", 
       width = 10, height = 6)
```

### parietal epithelial

```{r}
parietal <- makePerCellDF(sces, features = idconv(c("Pax2", "Pax8", "Prom1", "Stc2", "C3")), use.dimred = F) %>% 
    pivot_longer(cols = starts_with("ENS"), names_to = "ensembl", values_to = "logcounts")
parietal$ensembl <- factor(parietal$ensembl, levels = idconv(c("Pax2", "Pax8", "Prom1", "Stc2", "C3")))
lb <- as_labeller(setNames(names(idconv(c("Pax2", "Pax8", "Prom1", "Stc2", "C3"))), idconv(c("Pax2", "Pax8", "Prom1", "Stc2", "C3"))))

parietal %>% 
    ggplot(aes(level2_cluster, logcounts)) +
    geom_violin(aes(fill = level2_cluster), scale = "width") +
    facet_wrap(vars(ensembl), 
               labeller = lb, 
               ncol = 1, 
               strip.position = "right") +
    scale_x_discrete(name = NULL) +
    scale_y_continuous(name = "expression level") +
    theme(legend.position = "none", 
          axis.text.x = element_text(angle = -60, hjust = 0),
          axis.title.y = element_text(size = 20),
          strip.background = element_rect(fill = "grey70"), 
          strip.text.y.right = element_text(size = 12))

ggsave("../data/kidney/kidney-map/results/markers/parietal_epithelial_markers.tiff", 
       width = 10, height = 6)
```

### glomerular endothelial markers

```{r}
glomer_endo <- makePerCellDF(sces, features = idconv(c("Pi16", "Gm49391", "Gm45837", "Gm49393")),use.dimred = F) %>% 
    tidyr::pivot_longer(cols = starts_with("ENSMUSG"), names_to = "ensembl", values_to = "logcounts") 
glomer_endo$ensembl <- factor(glomer_endo$ensembl, levels = idconv(c("Pi16", "Gm49391", "Gm45837", "Gm49393")))
lb <- as_labeller(setNames(names(idconv(c("Pi16", "Gm49391", "Gm45837", "Gm49393"))), idconv(c("Pi16", "Gm49391", "Gm45837", "Gm49393"))))

glomer_endo %>% 
    ggplot(aes(level3_cluster, logcounts)) +
    geom_violin(aes(fill = level3_cluster), scale = "width") +
    facet_wrap(vars(ensembl), 
               ncol = 1, 
               strip.position = "right", 
               labeller = lb) +
    scale_x_discrete(name = NULL) +
    scale_y_continuous(name = "expression level") +
    theme(legend.position = "none", 
          axis.text.x = element_text(angle = -60, hjust = 0, size = 12),
          axis.title.y = element_text(size = 20),
          strip.text.y.right = element_text(size = 13), 
          strip.background = element_rect(fill = "grey70"))

ggsave("../data/kidney/kidney-map/results/markers/glomer_endo_markers.tiff", 
       width = 15)
```

# highly metabolic active region

```{r}
library(scater)
library(ggplot2)
library(patchwork)

plotReducedDim(sces, 
               dimred = "TSNE", 
               color_by = "location", 
               text_by = "cell_type", 
               text_size = 2, 
               point_size = 0.2) +
    theme(legend.position = "right") +
    scale_color_discrete(name = "region", type = "viridis") +
    guides(color = guide_legend(override.aes = list(size = 2))) +

plotReducedDim(sces, 
               dimred = "TSNE", 
               color_by = "mito_percent", 
               text_by = "cell_type", 
               text_size = 2, 
               point_size = 0.2) +
    theme(legend.position = "right") +
    viridis::scale_color_viridis(name = "mito \npercentage", option = "D", 
                                 breaks = c(25, 50, 75), 
                                 labels = paste(c(25, 50, 75), "%", sep = ""))

ggsave("../data/kidney/kidney-map/integrated_data/fastMNN_mito_percentage.tiff", 
       width = 14)
```

# cell-cell communication

## prepare for cellphonedb

```{r}
library(Matrix)
library(dplyr)
library(data.table)
library(orthogene)
library(EnsDb.Hsapiens.v86)


sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
lc <- logcounts(sces)
lc <- convert_orthologs(gene_df = lc, 
                        gene_input = "rownames", 
                        gene_output = "rownames", 
                        input_species = "mouse", 
                        output_species = "human", 
                        method = "gprofiler")

cs <- counts(sces)
cs <- convert_orthologs(gene_df = cs, 
                        gene_input = "rownames", 
                        gene_output = "rownames", 
                        input_species = "mouse", 
                        output_species = "human", 
                        method = "gprofiler")

identical(rownames(lc), rownames(cs))
# convert to human sces
sces_human <- SingleCellExperiment(assays = list(counts = cs, logcounts = lc), 
                                   rowData = data.frame(symbol = rownames(cs), 
                                                        row.names = rownames(cs)), 
                                   colData = colData(sces))
sces_human %>% rowData()
saveRDS(sces_human, "../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")

lc <- lc %>% as.matrix %>% as.data.frame() %>% tibble::rownames_to_column("Gene")

fwrite(lc, 
       "../data/kidney/kidney-map/cellphonedb_input/counts.csv", 
       row.names = F, quote = F, sep = ",")

meta_file <- colData(sces) %>% 
    as.data.frame() %>% 
    dplyr::rename("Cell" = "cell_ids") %>% 
    dplyr::select(Cell, level3_cluster) %>% 
    magrittr::set_colnames(value = c("cell", "cell_type"))

write.table(meta_file, 
            file = "../data/kidney/kidney-map/cellphonedb_input/meta_file.csv", 
            sep = ",", 
            row.names = F, 
            quote = F)

# microenvironment file
colData(sces) %>% 
    as.data.frame() %>% 
    dplyr::rename("Cell" = "cell_ids") %>% 
    dplyr::select(Cell, location) %>% 
    write.table("../data/kidney/kidney-map/cellphonedb_input/micronenvironment.csv", 
                row.names = F, 
                quote = F, 
                sep = ",")

# DEGs
fmarker3 <- readRDS("../data/kidney/kidney-map/results/markers/level3_markers.rds")
fmarker3 %>% names
fmarker3[[1]]
DEG_list <- vector(mode = "list", length = length(fmarker3))
names(DEG_list) <- names(fmarker3)
for(name in names(DEG_list)){
    DEG_list[[name]] <- fmarker3[[name]] %>% 
        as.data.frame() %>% 
        tibble::rownames_to_column("ensembl") %>%
        dplyr::filter(p.value < 0.05) %>% 
        dplyr::select("ensembl") %>% 
        magrittr::inset2("cell_type", value = name) %>% 
        dplyr::relocate(cell_type)
}

library(purrr)
map_df(DEG_list, .f = dim) %>% rowSums()

deg <- map_dfr(DEG_list, .f = bind_rows)
deg <- convert_orthologs(gene_df = deg, 
                         gene_input = "ensembl", 
                         gene_output = "columns", 
                         input_species = "mouse", 
                         output_species = "human", 
                         method = "gprofiler")

deg <- deg %>% dplyr::select(cell_type, symbol  = ortholog_gene)
write.table(deg, "../data/kidney/kidney-map/cellphonedb_input/DEG.csv", 
            row.names = F, 
            quote = F, 
            sep = ",")
```

## download cellphonedb database

```{python}
#| eval: false
from cellphonedb.utils import db_utils
from cellphonedb.utils import db_releases_utils
from IPython.display import HTML, display

display(HTML(db_releases_utils.get_remote_database_versions_html()['db_releases_html_table']))

db_utils.download_database("/home/yincy/git/data/cellphonedb/v4.1.0/", cpdb_version = "v4.1.0")
```

```{python}
# analysis
# only output mean expression of the interaction pairs between two populations, which expressed at least a fraction of the cell.
from cellphonedb.src.core.methods import cpdb_analysis_method
?cpdb_analysis_method

mean, deconvoluted = cpdb_analysis_method.call(
    cpdb_file_path = "../data/cellphonedb/v4.1.0/cellphonedb.zip",
    meta_file_path = "../data/kidney/kidney-map/cellphonedb_input/meta_file.csv",
    counts_file_path = "../data/kidney/kidney-map/cellphonedb_input/counts.csv",
    threshold = 0.1,
    counts_data = "hgnc_symbol",
    output_path = "/home/yincy/git/data/kidney/kidney-map/results/cpdb_outs/analysis/"
)
```

```{python}
# statistical_analysis
from cellphonedb.src.core.methods import cpdb_statistical_analysis_method
?cpdb_statistical_analysis_method

deconvoluted, means, pvalue, significant_means = cpdb_statistical_analysis_method.call(
    cpdb_file_path = "/home/yincy/git/data/cellphonedb/v4.1.0/cellphonedb.zip",
    meta_file_path = "../data/kidney/kidney-map/cellphonedb_input/meta_file.csv",
    counts_file_path = "../data/kidney/kidney-map/cellphonedb_input/counts.csv",
    counts_data = "hgnc_symbol",
    output_path = "../data/kidney/kidney-map/results/cpdb_outs/statistical_analysis",
    threshold = 0.1,
    threads = 4
)
```

```{python}
# deg analysis
from cellphonedb.src.core.methods import cpdb_degs_analysis_method
?cpdb_degs_analysis_method

deconvoluted, means, relevant_interactions, significant_means = cpdb_degs_analysis_method.call(
    cpdb_file_path = "../data/cellphonedb/v4.1.0/cellphonedb.zip", 
    meta_file_path = "../data/kidney/kidney-map/cellphonedb_input/meta_file.csv",
    counts_file_path = "../data/kidney/kidney-map/cellphonedb_input/counts.csv",
    degs_file_path = "../data/kidney/kidney-map/cellphonedb_input/DEG.csv",
    counts_data = "hgnc_symbol",
    threshold = 0.1,
    output_path = "../data/kidney/kidney-map/results/cpdb_outs/degs_analysis/"
)
```

## visualize cell-cell communication results

```{r}
library(ggplot2)
library(tidyr)
library(dplyr)
library(stringr)

means <- read.table("../data/kidney/kidney-map/results/cpdb_outs/analysis/simple_analysis_means_result_06_19_2023_09:31:45.txt", 
                    sep = "\t", 
                    header = TRUE, 
                    check.names = F)
sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")

# remove unlikely interactions
# 1.Such as paravertebral endothelial cells its impossible to interact with renal tubule or colecting ducts.
# 2. self-interaction also removed  

cell_types <- sces$level3_cluster %>% levels

# self-interaction
rm1 <- paste(cell_types, cell_types, sep = "|")

# paravertabral endothelial with non-neurons interaction
rm2 <- c(paste("paravertebral Endothelial", cell_types[-c(35:39)], sep = "|"), 
         paste(cell_types[-c(35:39)], "paravertebral Endothelial", sep = "|"))

# satellite and schwann cells with non-neurons interaction, though minimal neurons might be  myelined, which may warped by some schwann cells, which makes it might has some interactions with renal cells, but this is too minimal, so this type of interaction also removed.  
rm3 <- c(paste(grep("Satellite Glia A", cell_types, value = TRUE), cell_types[-c(4, 35:36)], sep = "|"), 
         paste(cell_types[-c(4, 35:36)], grep("Satellite Glia A", cell_types, value = TRUE), sep = "|"), 
         paste(grep("Satellite Glia B", cell_types, value = TRUE), cell_types[-c(4, 35:36)], sep = "|"), 
         paste(cell_types[-c(4, 35:36)], grep("Satellite Glia B", cell_types, value = TRUE), sep = "|"), 
         paste(grep("Schwann Cells", cell_types, value = TRUE), cell_types[-c(4, 35:36)], sep = "|"), 
         paste(cell_types[-c(4, 35:36)], grep("Schwann Cells", cell_types, value = TRUE), sep = "|"))

# glomerular endothelial unlikely have interactions with renal tubule or collecting duct
rm4 <- c(paste("Glomerular Endothelial", grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), sep = "|"), 
         paste(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Glomerular Endothelial", sep = "|"))

# similarly podocytes and Mesangial Cells unlikely has interactions with renal tubule or collecting duct and endothelial
rm5 <- c(paste("Mesangial Cells A", c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), sep = "|"), 
         paste(c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), "Mesangial Cells A", sep = "|"),
         paste("Mesangial Cells B", c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), sep = "|"), 
         paste(c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), "Mesangial Cells B", sep = "|"), 
         paste("Podocytes", c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), sep = "|"), 
         paste(c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), "Podocytes", sep = "|"))
# Parietal Epithelial unlikely has interactions with OMCD, IMCD, ATL, MTAL, DTL1, DTL2, DTL3, as Parietal Epithelial located mainly in the cortex
rm6 <- c(paste("Parietal Epithelial", grep("^(OMCD|IMCD|_LOH_ATL|LOH_MTAL|LOH_DTL1|LOH_DTL2|LOHDTL3)", cell_types, value = TRUE), sep = "|"), 
         paste(grep("^(OMCD|IMCD|_LOH_ATL|LOH_MTAL|LOH_DTL1|LOH_DTL2|LOHDTL3)", cell_types, value = TRUE), "Parietal Epithelial", sep = "|"))

interaction_pairs_to_remove <- c(rm1, rm2, rm3, rm4, rm5, rm6) %>% unique()
interaction_pairs_to_remove %>% str
interaction_pairs_to_remove[!(interaction_pairs_to_remove %in% colnames(means))]

means <- means %>% dplyr::select(!all_of(interaction_pairs_to_remove))
means %>% dplyr::select(contains("Epithelial"))
means_long <- means %>% 
    pivot_longer(cols = grep("\\|", colnames(means), value = TRUE), 
                                     names_to = "cell_pairs", 
                                     values_to = "mean_expression") %>% 
    dplyr::filter(mean_expression > 0) %>% 
    separate(cell_pairs, into = c("cell_a", "cell_b"), sep = "\\|") %>% 
    arrange(cell_a)
means_long
saveRDS(means_long, "../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")
```

### The whole inteaction at level 3 cluster

```{r}
#| label: whole interaction at level3
library(stringr)
library(tidyr)
library(dplyr)


means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})

interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@", remove = F) %>% 
    mutate(normalized_strength = round(strength / n, 4)) %>% 
    as.data.frame()
rownames(interactions) <- interactions$cell_pair_ids


m_n <- matrix(0, nrow = 39, ncol = 39, 
            dimnames = list(cell_types, cell_types))

m_strength <- matrix(0, nrow = 39, ncol = 39, 
                     dimnames = list(cell_types, cell_types))

m_normalized_strength <- matrix(0, nrow = 39, ncol = 39, 
                                dimnames = list(cell_types, cell_types))

for(i in 1:39){
    for(j in 1:39){
        dn = m_n[i,j,drop = F] %>% dimnames() %>% unlist() %>% sort %>% str_c(collapse = "@")
        for(n in rownames(interactions)){
            if(dn == n){
                m_n[i, j] = interactions[n, "n"]
            }
        }
    }
}

for(i in 1:39){
    for(j in 1:39){
        dn = m_strength[i,j,drop = F] %>% dimnames() %>% unlist() %>% sort %>% str_c(collapse = "@")
        for(n in rownames(interactions)){
            if(dn == n){
                m_strength[i, j] = interactions[n, "strength"]
            }
        }
    }
}

for(i in 1:39){
    for(j in 1:39){
        dn = m_normalized_strength[i,j,drop = F] %>% dimnames() %>% unlist() %>% sort %>% str_c(collapse = "@")
        for(n in rownames(interactions)){
            if(dn == n){
                m_normalized_strength[i, j] = interactions[n, "normalized_strength"]
            }
        }
    }
}
```

```{r}
library(pheatmap)
pdf("../data/kidney/kidney-map/results/cell_cell_communication/level3_interaction_strength.pdf")
pheatmap(m_n, 
         color = viridis::inferno(100), 
         fontsize_col = 5, 
         fontsize_row = 5, 
         angle_col = 315, 
         clustering_method = "ward.D2", 
         main = "number of interactions")

pheatmap(m_strength, 
         color = viridis::inferno(100), 
         fontsize_col = 5, 
         fontsize_row = 5, 
         angle_col = 315, 
         clustering_method = "ward.D2", 
         main = "sum of mean expression")

pheatmap(m_normalized_strength, 
         color = viridis::inferno(100), 
         fontsize_col = 5, 
         fontsize_row = 5, 
         angle_col = 315, 
         clustering_method = "ward.D2", 
         main = "normalized mean expression")
dev.off()
```

### interaction strength

#### level 1 interactions of Neurons

the interaction strength is defined by:

1.  the number of total interactions between the two populations\
2.  the sum of the mean expression between those two populations\
3.  the sum of the mean expressions of the two clusters then normalized by the total number of interactions between the two clusters

```{r}
#| message: false
#| label: level 1 interactions
library(stringr)
library(dplyr)
library(tidyr)

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")
level1 <- setNames(sces$level1_cluster, sces$level3_cluster)
means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))
means_long <- means_long %>%
    mutate(cell_a = level1[cell_a],
           cell_b = level1[cell_b])

means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})


interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@") %>% 
    mutate(normalized_strength = round(strength / n, 4))

# remove self-interactions
interactions <- interactions %>% dplyr::filter(!(cell_a == cell_b)) %>% dplyr::arrange(-n)
neurons_interactions_level1 <- interactions %>% dplyr::filter(grepl("Neurons", cell_a) | grepl("Neurons", cell_b))
write.csv(neurons_interactions_level1,
          "../data/kidney/kidney-map/results/cell_cell_communication/level1_interactions.csv", 
          row.names = F, 
          quote = F)

# manually change Neurons to the second column
means_long %>% dplyr::filter(receptor_a == "False", receptor_b == "False")
```

```{r}
#| message: false
#| warning: false
library(circlize)
library(RColorBrewer)
neurons_interactions_level1 <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/level1_interactions.csv")

pdf("../data/kidney/kidney-map/results/cell_cell_communication/level1_interactions.pdf", 
    height = 3, width = 8)
par(mfrow = c(1, 3))
circos.par(start.degree = -17,
           gap.after = c(rep(10, 7), 30, 30, 10), 
           canvas.ylim = c(-1, 1), canvas.xlim = c(-1, 1))
order <- c("Endothelium", "Parietal Epithelial", "Proximal Tubule", 
           "LOH", "Distal Tubule", "Collecting Duct", "Interstitial", 
           "Immune", "Neurons", "Glia")
grid.col <- brewer.pal(9, "Set1")
grid.col <- append(grid.col, "grey40", after = 8)
names(grid.col) <- order

for(i in 3:5){
    chordDiagramFromDataFrame(df = neurons_interactions_level1[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, 
                              link.zindex = rank(neurons_interactions_level1[[i]]), 
                              annotationTrack = c("grid"), 
                              annotationTrackHeight = 0.05, 
                              link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter, 
                    y = CELL_META$ylim[2] + mm_y(1), 
                    labels = get.cell.meta.data("sector.index"), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 0.42, 
                    adj = 0.5)
    })
}
circos.clear()
dev.off()
```

#### level 1 interactions: sensory and sympathetic neurons

```{r}
ns <- c(rep("Endothelium", 3), "Parietal Epithelial", rep("Proximal Tubule", 3), 
        rep("LOH", 6), rep("Distal Tubule", 2), rep("Collecting Duct", 6), 
        rep("Interstitial", 6), rep("Immune", 7), "Sensory Neurons", "Sympathetic Neurons", 
        rep("Glia", 3))
level1.1 <- setNames(ns, levels(sces$level3_cluster))
means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

means_long <- means_long %>%
    mutate(cell_a = level1.1[cell_a], 
           cell_b = level1.1[cell_b])

means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})


interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@") %>% 
    mutate(normalized_strength = round(strength / n, 6))

# remove self-interactions
interactions <- interactions %>% dplyr::filter(!(cell_a == cell_b)) %>% dplyr::arrange(-n)
neurons_interactions_level1.1 <- interactions %>% dplyr::filter(grepl("Neurons", cell_a) | grepl("Neurons", cell_b))
write.csv(neurons_interactions_level1.1,
          "../data/kidney/kidney-map/results/cell_cell_communication/level1.1_interactions.csv", 
          row.names = F, 
          quote = F)
```

```{r}
#| message: false
#| warning: false
library(circlize)
library(RColorBrewer)
neurons_interactions_level1.1 <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/level1.1_interactions.csv")

tiff("../data/kidney/kidney-map/results/cell_cell_communication/level1.1_interactions.tiff",
    height = 800 * 2, width = 2000 * 2)
par(mfrow = c(1, 3))
circos.par(start.degree = -20,
           gap.after = c(rep(10, 7), 30, 10, 30, 10), 
           canvas.ylim = c(-1, 1), canvas.xlim = c(-1, 1))
order <- c("Endothelium", "Parietal Epithelial", "Proximal Tubule", 
           "LOH", "Distal Tubule", "Collecting Duct", "Interstitial", 
           "Immune", "Sensory Neurons", "Sympathetic Neurons", "Glia")
grid.col <- colorRampPalette(colors = brewer.pal(9, "Set1"))(length(levels(sces$level1_cluster)) - 1)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 8)
names(grid.col) <- order

for(i in 3:5){
    chordDiagramFromDataFrame(df = neurons_interactions_level1.1[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0, 
                              link.sort = TRUE, link.decreasing = TRUE, 
                              link.zindex = rank(neurons_interactions_level1.1[[i]]), 
                              annotationTrack = c("grid"), 
                              annotationTrackHeight = 0.05, 
                              link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter, 
                    y = CELL_META$ylim[2] + mm_y(10), 
                    labels = get.cell.meta.data("sector.index"), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 2.8, 
                    adj = 0.5)
    })
}

circos.clear()
dev.off()
```

#### level 2 interactions

```{r}
#| label: level 2 interactions
# level2 interactions strength
level2 <- setNames(sces$level2_cluster, sces$level3_cluster)

means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

means_long <- means_long %>% 
    mutate(cell_a = level2[cell_a], 
           cell_b = level2[cell_b])

means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})


interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@") %>% 
    mutate(normalized_strength = round(strength / n, 6))


# remove self-interactions
interactions <- interactions %>% dplyr::filter(!(cell_a == cell_b)) %>% dplyr::arrange(-n)
neurons_interactions_level2 <- interactions %>% dplyr::filter(grepl("Neurons", cell_a) | grepl("Neurons", cell_b))
write.csv(neurons_interactions_level2,
          "../data/kidney/kidney-map/results/cell_cell_communication/level2_interactions.csv", 
          row.names = F, 
          quote = F)
# manually place neurons to the second column
```

```{r}
#| message: false
#| warning: false
library(circlize)
library(RColorBrewer)
neurons_interactions_level2 <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/level2_interactions.csv")

tiff("../data/kidney/kidney-map/results/cell_cell_communication/level2_interactions.tiff", 
    height = 800 * 2, width = 2000 * 2)
par(mfrow = c(1, 3))
circos.par(start.degree = -13,
           gap.after = c(rep(3, 18), 10, 3, 10, 3, 3),
           canvas.ylim = c(-1.2, 1.2), canvas.xlim = c(-1.2, 1.2))
order <- sces$level2_cluster %>% levels()
names(order) <- order
grid.col <- colorRampPalette(colors = brewer.pal(9, "Set1"))(length(levels(sces$level2_cluster)) - 2)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 19)
names(grid.col) <- order

for(i in 3:5){
   chordDiagramFromDataFrame(df = neurons_interactions_level2[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, 
                              link.zindex = rank(neurons_interactions_level2[[i]]), 
                              annotationTrack = c("grid"), 
                              annotationTrackHeight = 0.05, 
                             link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter * 1.4, 
                    y = CELL_META$ylim[2] + mm_y(15), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                   get.cell.meta.data("sector.index"), ""), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 6, 
                    adj = 0.8)
        
        circos.text(x = CELL_META$xcenter, 
                    y = CELL_META$ylim[2] + mm_y(2), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                    "", get.cell.meta.data("sector.index")), 
                    facing = "clockwise", 
                    niceFacing = TRUE, 
                    cex = 3, 
                    adj = 0)
    })
}

circos.clear()
dev.off()
```

#### level 3 interactions

```{r}
#| label: level 3 interactions
means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})

interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@") %>% 
    mutate(normalized_strength = round(strength / n, 4))

# remove self-interactions
interactions <- interactions %>% dplyr::filter(!(cell_a == cell_b)) %>% dplyr::arrange(-n)
neurons_interactions_level3 <- interactions %>% dplyr::filter(grepl("Neurons", cell_a) | grepl("Neurons", cell_b))
write.csv(neurons_interactions_level3,
          "../data/kidney/kidney-map/results/cell_cell_communication/level3_interactions.csv", 
          row.names = F, 
          quote = F)
# manually place neurons to the second column
```

```{r}
#| message: false
#| warning: false
library(circlize)
library(RColorBrewer)
neurons_interactions_level3 <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/level3_interactions.csv")
tiff("../data/kidney/kidney-map/results/cell_cell_communication/level3_interactions.tiff", 
    height = 800 * 2, width = 2000 * 2)
par(mfrow = c(1, 3))
lim <- 1.5
circos.par(start.degree = -0.5,
           gap.after = c(rep(3, 33), 10, 3, 10, 3, 3, 3),
           canvas.ylim = c(-lim, lim), canvas.xlim = c(-lim, lim), 
           cell.padding = rep(0, 4))
order <- sces$level3_cluster %>% levels()
names(order) <- order
grid.col <- colorRampPalette(colors = brewer.pal(9, "Set1"))(length(levels(sces$level3_cluster)) - 2)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 34)
names(grid.col) <- order

for(i in 3:5){
   chordDiagramFromDataFrame(df = neurons_interactions_level3[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, grid.border = NULL, 
                              link.zindex = rank(neurons_interactions_level3[[i]]), 
                              annotationTrack = c("grid"), annotationTrackHeight = 0.05, 
                              direction.type = "diffHeight", link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter * 1.5, 
                    y = CELL_META$ylim[2] + mm_y(12), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                   get.cell.meta.data("sector.index"), ""), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 4, 
                    adj = 0.9)
        
        circos.text(x = CELL_META$xcenter * 1.5, 
                    y = CELL_META$ylim[2] + mm_y(0.2), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                    "", get.cell.meta.data("sector.index")), 
                    facing = "clockwise", 
                    niceFacing = TRUE, 
                    cex = 3, 
                    adj = 0)
    })
}

circos.clear()
dev.off()
```

# directional interaction

```{r}
library(dplyr)
library(tidyr)
library(stringr)

means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")

# remove all secreted interactions
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

# neurons expressed receptors
receptors_expressed_by_neurons_ids <- ((means_long$receptor_a == "True" & means_long$cell_a %in% c("Sympathetic Neurons", "Sensory Neurons")) | (means_long$receptor_b == "True" & means_long$cell_b %in% c("Sympathetic Neurons", "Sensory Neurons")))

receptors_expressed_by_neurons <- means_long[receptors_expressed_by_neurons_ids, ]

# for chordDiagram neurons expressed receptors
# place receptors into the first column and ligands to the second column
receptors_expressed_by_neurons <- receptors_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(cell_a_receptor = ifelse(receptor_a == "True", cell_a, cell_b), 
           cell_b_ligand = ifelse(receptor_b == "False", cell_b, cell_a),
           
           partner_a_receptor = ifelse(receptor_a == "True", partner_a, partner_b), 
           partner_b_ligand = ifelse(receptor_b == "False", partner_b, partner_a), 
           
           gene_a_receptor = ifelse(receptor_a == "True", gene_a, gene_b),
           gene_b_ligand = ifelse(receptor_b == "False", gene_b, gene_a)) %>% 
    ungroup() %>% 
    dplyr::select(matches("_receptor|_ligand"), mean_expression) %>% 
    dplyr::relocate(cell_b_ligand, .before = 2) 

receptors_expressed_by_neurons <- receptors_expressed_by_neurons %>% dplyr::filter(cell_a_receptor != cell_b_ligand)

receptors_expressed_by_neurons <- receptors_expressed_by_neurons %>% 
    group_by(cell_a_receptor, cell_b_ligand) %>% 
    mutate(n = n(), 
              strength = sum(mean_expression), 
              normalized_strength = round(strength / n, 6)) %>% 
    dplyr::relocate(n, strength, normalized_strength, .before = 3) %>% 
    distinct(cell_a_receptor, cell_b_ligand, .keep_all = T)

write.csv(receptors_expressed_by_neurons, 
          "../data/kidney/kidney-map/results/cell_cell_communication/receptors_expressed_by_neurons.csv", 
          row.names = F, quote = F)
```

```{r}
library(dplyr)
library(tidyr)
library(stringr)

means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")

# remove all secreted interactions
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

# receptors expressed by non-neurons and ligands expressed by neurons
ligands_expressed_by_neurons_ids <- ((means_long$receptor_a == "False" & means_long$cell_a %in% c("Sympathetic Neurons", "Sensory Neurons")) | (means_long$receptor_b == "False" & means_long$cell_b %in% c("Sympathetic Neurons", "Sensory Neurons")) & (means_long$receptor_a == "True" | means_long$partner_b == "True"))

ligands_expressed_by_neurons <- means_long[ligands_expressed_by_neurons_ids, ]

ligands_expressed_by_neurons <- ligands_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(cell_a_receptor = ifelse(receptor_a == "True", cell_a, cell_b), 
           partner_a_receptor = ifelse(receptor_a == "True", partner_a, partner_b), 
           gene_a_receptor = ifelse(receptor_a == "True", gene_a, gene_b),
           cell_b_ligand = ifelse(receptor_b == "False", cell_b, cell_a), 
           partner_b_ligand = ifelse(receptor_b == "False", partner_b, partner_a), 
           gene_b_ligand = ifelse(receptor_b == "False", gene_b, gene_a)) %>% 
    ungroup() %>% 
    dplyr::select(matches("_receptor|_ligand"), mean_expression) %>% 
    dplyr::relocate(cell_b_ligand, .before = 2) 


# remove self-interactions
ligands_expressed_by_neurons <- ligands_expressed_by_neurons %>% dplyr::filter(cell_a_receptor != cell_b_ligand)

ligands_expressed_by_neurons <- ligands_expressed_by_neurons %>% 
    group_by(cell_a_receptor, cell_b_ligand) %>% 
    mutate(n = n(), 
              strength = sum(mean_expression), 
              normalized_strength = round(strength / n, 6)) %>% 
    dplyr::relocate(n, strength, normalized_strength, .before = 3) %>% 
    distinct(cell_a_receptor, cell_b_ligand, .keep_all = T)

write.csv(ligands_expressed_by_neurons, 
          "../data/kidney/kidney-map/results/cell_cell_communication/ligands_expressed_by_neurons.csv", 
          row.names = F, 
          quote = F)
```

```{r}
library(circlize)
library(RColorBrewer)

receptors_expressed_by_neurons <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/receptors_expressed_by_neurons.csv")
tiff("../data/kidney/kidney-map/results/cell_cell_communication/receptors_expressed_by_neurons.tiff", 
    height = 800 * 2, width = 2000 * 2)
par(mfrow = c(1, 3))
lim <- 1.5
circos.par(start.degree = 1.5,
           gap.after = c(rep(3, 33), 10, 3, 10, 3, 3, 3),
           canvas.ylim = c(-lim, lim), canvas.xlim = c(-lim, lim),  
           cell.padding = rep(0, 4))
order <- sces$level3_cluster %>% levels()
names(order) <- order
grid.col <- colorRampPalette(colors = brewer.pal(9,"Set1"))(length(levels(sces$level3_cluster)) - 2)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 34)
names(grid.col) <- order

for(i in 3:5){
   chordDiagramFromDataFrame(df = receptors_expressed_by_neurons[, c(2, 1, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, grid.border = NULL, 
                              link.zindex = rank(receptors_expressed_by_neurons[[i]]), 
                              annotationTrack = c("grid"), annotationTrackHeight = 0.05, 
                             directional = 1, link.arr.type = "big.arrow", direction.type = "arrows", 
                             link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter * 1.5, 
                    y = CELL_META$ylim[2] + mm_y(13), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                   get.cell.meta.data("sector.index"), ""), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 4, 
                    adj = 0.9)
        
        circos.text(x = CELL_META$xcenter * 1.5, 
                    y = CELL_META$ylim[2] + mm_y(0.2), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                    "", get.cell.meta.data("sector.index")), 
                    facing = "clockwise", 
                    niceFacing = TRUE, 
                    cex = 3.5, 
                    adj = 0)
    })
}

circos.clear()
dev.off()
```

```{r}
library(circlize)
library(RColorBrewer)

receptors_expressed_by_non_neurons <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/ligands_expressed_by_neurons.csv")
tiff("../data/kidney/kidney-map/results/cell_cell_communication/ligands_expressed_by_neurons.tiff", 
    height = 800 * 2, width = 2000 * 2)
par(mfrow = c(1, 3))
lim <- 1.5
circos.par(start.degree = 1.5,
           gap.after = c(rep(3, 33), 10, 3, 10, 3, 3, 3),
           canvas.ylim = c(-lim, lim), canvas.xlim = c(-lim, lim),  
           cell.padding = rep(0, 4))
order <- sces$level3_cluster %>% levels()
names(order) <- order
grid.col <- colorRampPalette(colors = brewer.pal(9, "Set1"))(length(levels(sces$level3_cluster)) - 2)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 34)
names(grid.col) <- order

for(i in 3:5){
   chordDiagramFromDataFrame(df = receptors_expressed_by_non_neurons[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, grid.border = NULL, 
                              link.zindex = rank(receptors_expressed_by_non_neurons[[i]]), 
                              annotationTrack = c("grid"), annotationTrackHeight = 0.05, 
                             link.arr.type = "big.arrow", directional = -1, 
                             direction.type = c("arrows"))
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter * 1.6, 
                    y = CELL_META$ylim[2] + mm_y(13), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                   get.cell.meta.data("sector.index"), ""), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 4, 
                    adj = 0.9)
        
        circos.text(x = CELL_META$xcenter * 1.5, 
                    y = CELL_META$ylim[2] + mm_y(0.2), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                    "", get.cell.meta.data("sector.index")), 
                    facing = "clockwise", 
                    niceFacing = TRUE, 
                    cex = 3.5, 
                    adj = 0)
    })
}

circos.clear()
dev.off()
```

# neurons expressed top 10 liagnds, receptors and there's interaction with other cells
## neurons top ligand's receptors expression across cell types

```{r}
library(scuttle)
library(tidyr)
library(dplyr)
library(stringr)

means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")

# remove all secreted interactions
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

# receptors expressed by non-neurons and ligands expressed by neurons
ligands_expressed_by_neurons_ids <- ((means_long$receptor_a == "False" & means_long$cell_a %in% c("Sympathetic Neurons", "Sensory Neurons")) | (means_long$receptor_b == "False" & means_long$cell_b %in% c("Sympathetic Neurons", "Sensory Neurons")) & (means_long$receptor_a == "True" | means_long$partner_b == "True"))


ligands_expressed_by_neurons <- means_long[ligands_expressed_by_neurons_ids, ]

# place receptors into the first column ligands to the second column
ligands_expressed_by_neurons <- ligands_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(cell_a_receptor = ifelse(receptor_a == "True", cell_a, cell_b), 
           partner_a_receptor = ifelse(receptor_a == "True", partner_a, partner_b), 
           gene_a_receptor = ifelse(receptor_a == "True", gene_a, gene_b),
           cell_b_ligand = ifelse(receptor_b == "False", cell_b, cell_a), 
           partner_b_ligand = ifelse(receptor_b == "False", partner_b, partner_a), 
           gene_b_ligand = ifelse(receptor_b == "False", gene_b, gene_a)) %>% 
    ungroup() %>% 
    dplyr::select(matches("_receptor|_ligand"), mean_expression) %>% 
    dplyr::relocate(cell_b_ligand, .before = 2) 

complex_input <- read.csv("../data/cellphonedb/v4.1.0/complex_input.csv") %>% tibble::column_to_rownames("complex_name")


# convert ligand uniprot id to symbol id
neurons_ligands <- ligands_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(gene_b_ligand = ifelse(grepl("^complex:", partner_b_ligand), 
                                  complex_input[gsub("^complex:", "", partner_b_ligand), 1:5, drop = F] %>% 
                                      apply(1, str_c, collapse = ",") %>% 
                                      str_replace(",{1,}$", ""), 
                                  gene_b_ligand))

source("functions/idconv.R")
neurons_ligands <- neurons_ligands %>% rowwise() %>% 
    mutate(gene_b_ligand = ifelse(grepl("^simple:", partner_b_ligand), 
                                  gene_b_ligand, 
                                  str_split(gene_b_ligand, ",") %>% 
                                      sapply(function(x){idconv(x, from_type = "UNIPROTID", to_type = "SYMBOL", db = "human")}) %>% 
                                      str_c(collapse = ",")))

neurons_ligands %>% dplyr::filter(is.na(gene_b_ligand))
# manually convert CEL uniprot id to symbol id, this conversion was failed
neurons_ligands$gene_b_ligand <- ifelse(is.na(neurons_ligands$gene_b_ligand), "CEL", neurons_ligands$gene_b_ligand)


# convert receptors uniprot id to symbol id
neurons_ligands <- neurons_ligands %>% 
    rowwise() %>% 
    mutate(gene_a_receptor = ifelse(grepl("^complex:", partner_a_receptor), 
                                    complex_input[gsub("^complex:", "", partner_a_receptor), 1:5, drop = F] %>% 
                                        apply(1, str_c, collapse = ",") %>% 
                                        str_replace(",{1,}$", ""),  
                                    gene_a_receptor))

neurons_ligands <- neurons_ligands %>% 
    rowwise() %>% 
    mutate(gene_a_receptor = ifelse(grepl("^simple:", partner_a_receptor), 
                                    gene_a_receptor, 
                                    str_split(gene_a_receptor, ",") %>% 
                                        sapply(function(x){idconv(x, from_type = "UNIPROTID", to_type = "SYMBOL", db = "human")} %>% 
                                                   str_c(collapse = ","))))

neurons_ligands %>% dplyr::filter(is.na(gene_a_receptor))
neurons_ligands %>% dplyr::filter(grepl("^complex:", partner_a_receptor))
# manually convert  to symbol id, this failed convert from uniprot id to symbol id
neurons_ligands$gene_a_receptor <- ifelse(is.na(neurons_ligands$gene_a_receptor), "RYK,FZD8", neurons_ligands$gene_a_receptor)
saveRDS(neurons_ligands, "../data/kidney/kidney-map/results/cell_cell_communication/neurons_ligands.rds")
```


```{r}
library(scuttle)
library(tidyr)
library(dplyr)
library(stringr)

# get ligands and receptors expression
# the expression value is calculated by avarge the gene's expression across the cell
# for complex, this is the combined mean of multiple gene's mean expression
neurons_ligands <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/neurons_ligands.rds")
sces_human <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")


# remove not expressed pairs
ligands <- neurons_ligands$gene_b_ligand %>% str_split(",") %>% unique
ligands %>% str
receptors <- neurons_ligands$gene_a_receptor %>% str_split(",") %>% unique()
receptors %>% str

ligands_ids <- sapply(ligands, function(x){
    all(x %in% rownames(sces_human))
})
ligands_ids %>% table
ligands <- ligands[ligands_ids]
ligands <- ligands %>% sapply(str_c, collapse = ",")

receptors_ids <- sapply(receptors, function(x){
    all(x %in% rownames(sces_human))
})
receptors_ids %>% table
receptors <- receptors[receptors_ids]
receptors <- receptors %>% sapply(str_c, collapse = ",")
neurons_ligands <- neurons_ligands %>% dplyr::filter(gene_a_receptor %in% receptors, gene_b_ligand %in% ligands)

# extract ligands expression
neurons_ligands <- neurons_ligands %>% 
    rowwise() %>% 
    mutate(gene_b_ligand_expression = makePerCellDF(sces_human[, sces_human$level3_cluster == cell_b_ligand], 
                                                    features = str_split(gene_b_ligand, ",") %>% unlist, 
                                                    use.dimred = F) %>% 
               pivot_longer(cols = -c(1:11), names_to = "symbol", values_to = "logcounts") %>% 
               dplyr::pull(logcounts) %>% 
               mean %>% 
               round(4)) %>% 
    relocate(gene_b_ligand_expression, .after = gene_b_ligand)


# extract receptors expression
neurons_ligands <- neurons_ligands %>% 
    rowwise() %>% 
    mutate(gene_a_receptor_expression = makePerCellDF(sces_human[, sces_human$level3_cluster == cell_a_receptor], 
                                                      features = str_split(gene_a_receptor, ",") %>% unlist, 
                                                      use.dimred = F) %>% 
               pivot_longer(cols = -c(1:11), names_to = "symbol", values_to = "logcounts") %>% 
               dplyr::pull(logcounts) %>% 
               mean %>% 
               round(4)) %>% 
    dplyr::relocate(gene_a_receptor_expression, .after = gene_a_receptor)

neurons_ligands <- neurons_ligands %>% rename(interaction_pair_expression = mean_expression)
saveRDS(neurons_ligands, "../data/kidney/kidney-map/results/cell_cell_communication/neurons_ligands.rds")
```

### visualize neurons top ligand's receptors expression

```{r}
library(dplyr)
library(ggplot2)
sces_human <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")
levels <- sces_human$level3_cluster %>% levels

neurons_ligands <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/neurons_ligands.rds")
neurons_ligands_list <- split(neurons_ligands, f = neurons_ligands$cell_b_ligand)

neurons_top_ligands_list <- neurons_ligands_list %>% lapply(function(x){
    top_ids <- x %>% 
        arrange(-gene_b_ligand_expression) %>% 
        pull(gene_b_ligand) %>% 
        unique %>% 
        head(10)
    
    x %>% dplyr::filter(gene_b_ligand %in% top_ids)
})

neurons_top_ligands_list <- neurons_top_ligands_list %>% 
    lapply(function(x){
        x %>% rowwise %>% 
            mutate(partner_a_receptor = ifelse(grepl("^simple:", partner_a_receptor), 
                                            gene_a_receptor, 
                                            ifelse(grepl("^complex:", partner_a_receptor), 
                                                   gsub("^complex:", "", partner_a_receptor), 
                                                   partner_a_receptor)), 
                   
                   partner_b_ligand = ifelse(grepl("^simple:", partner_b_ligand), 
                                             gene_b_ligand, 
                                             ifelse(grepl("^complex:", partner_b_ligand), 
                                                    gsub("^complex:", "", partner_b_ligand), 
                                                    partner_b_ligand)))
    })

neurons_top_ligands_list <- neurons_top_ligands_list %>% lapply(function(x){
    x %>% mutate(gene_a_receptor = factor(gene_a_receptor, levels = unique(gene_a_receptor)), 
                 gene_b_ligand = factor(gene_b_ligand, levels = unique(gene_b_ligand)), 
                 partner_a_receptor = factor(partner_a_receptor), 
                 partner_b_ligand = factor(partner_b_ligand))
})

neurons_top_ligands_list[[1]] %>% dplyr::select(partner_a_receptor, partner_b_ligand) %>% distinct()
# sensory neurons
labels <- data.frame(label = c("SORL1" = "APP ",
                               "TNFRSF21" = "APP ", 
                               "TREM2_receptor" = "APP,APOE ", 
                               "CD74" = "APP ", 
                               "PLXNA4" = "APP,APLP2 ", 
                               "CALCR" = "CALCA,CALCB ",
                               "RAMP1_complex" = "CALCA,CALCB ", 
                               "ADGRE5" = "THY1 ", 
                               "SCARA5" = "FTH1 ", 
                               "GRPR" = "NMB",
                               "NMBR" = "NMB",
                               "GPR37L1" = "PSAP ", 
                               "GPR37" = "PSAP ", 
                               "TACR1" = "TAC1 ", 
                               "TACR2" = "TAC1 ", 
                               "PIGR" = "APLP2 "))

neurons_top_ligands_list[[1]] %>% 
    ggplot(aes(factor(cell_a_receptor, levels), reorder(partner_a_receptor, cell_a_receptor))) +
    geom_point(aes(size = log1p(gene_a_receptor_expression))) +
    geom_text(data = labels, aes(x = 0, y = 1:16, label = label), hjust = 1, size = 4, color = "grey20") +
    geom_text(aes(x = 0.5, y = 17, label = "Sensory neuron's\ntop 10 ligands"), hjust = 1, size = 4) +
    geom_text(aes(x = 39, y = 17, label = "receptors"), hjust = 0, size = 5) +
    coord_cartesian(clip = "off") +
    scale_x_discrete(name = NULL, expand = c(0,0), position = "top") +
    scale_y_discrete(name = NULL, position = "right",expand = c(0, 0)) +
    scale_size_area(name = "receptors expression level", breaks = c(0.1, 0.5, 1), labels = c(0.1, 0.5, 1.0), max_size = 13) +
    theme(axis.text.x = element_text(size = 12, angle = -50, hjust = 1, vjust = 0.5, color = "grey20"), 
          axis.text.y = element_text(size = 12),
          axis.ticks = element_blank(), 
          plot.margin = unit(c(6, 5, 1, 35), units = "mm"),  
          panel.background = element_rect(fill = "white"),
          panel.grid.major = element_line(linetype = 2, linewidth = 0.3, color = "grey70"),
          legend.position = "bottom", 
          legend.title = element_text(size = 15),
          legend.text = element_text(size = 14)) 

ggsave("../data/kidney/kidney-map/results/cell_cell_communication/Sensory_neuron_top_ligands_receptors_expression.tiff", 
       width = 15, height = 7)


# sympathetic neurons
labels = c("SORL1" = "APP", 
           "TNFRSF21" = "APP", 
           "TREM2_receptor"  ="APP", 
           "CD74" = "APP", 
           "PLXNA4" = "APP", 
          "ADRA1A" = "Noradrenaline_byDBH\nNoradrenaline_byDBH_and_SLC18A2\nNoradrenaline_byDBH_and_SLC6A2", 
          "ADRA1B" = "Noradrenaline_byDBH\nNoradrenaline_byDBH_and_SLC18A2\nNoradrenaline_byDBH_and_SLC6A2", 
          "ADRA1D" = "Noradrenaline_byDBH\nNoradrenaline_byDBH_and_SLC18A2\nNoradrenaline_byDBH_and_SLC6A2", 
          "ADRA2A" = "Noradrenaline_byDBH\nNoradrenaline_byDBH_and_SLC18A2\nNoradrenaline_byDBH_and_SLC6A2", 
          "ADRA2B" = "Noradrenaline_byDBH\nNoradrenaline_byDBH_and_SLC18A2\nNoradrenaline_byDBH_and_SLC6A2", 
          "ADRA2C" = "Noradrenaline_byDBH\nNoradrenaline_byDBH_and_SLC18A2\nNoradrenaline_byDBH_and_SLC6A2", 
          "ADRB1" = "Noradrenaline_byDBH\nNoradrenaline_byDBH_and_SLC18A2\nNoradrenaline_byDBH_and_SLC6A2", 
          "ADRB2" = "Noradrenaline_byDBH\nNoradrenaline_byDBH_and_SLC18A2\nNoradrenaline_byDBH_and_SLC6A2", 
          "ADRB3" = "Noradrenaline_byDBH\nNoradrenaline_byDBH_and_SLC18A2\nNoradrenaline_byDBH_and_SLC6A2", 
          "SCARA5" = "FTH1", 
          "GALR1" = "GAL", 
          "GALR2" = "GAL", 
          "GALR3" = "GAL", 
          "HTR1A" = "SerotoninDopamin_byDDC", 
          "HTR1B" = "SerotoninDopamin_byDDC", 
          "HTR1F" = "SerotoninDopamin_byDDC", 
          "HTR2A" = "SerotoninDopamin_byDDC", 
          "HTR2B" = "SerotoninDopamin_byDDC", 
          "HTR3A" = "SerotoninDopamin_byDDC", 
          "HTR3B" = "SerotoninDopamin_byDDC", 
          "HTR4" = "SerotoninDopamin_byDDC", 
          "HTR5A" = "SerotoninDopamin_byDDC", 
          "HTR6" = "SerotoninDopamin_byDDC", 
          "HTR7" = "SerotoninDopamin_byDDC", 
          "DRD1" = "Dopamine_byDDC_and_SLC18A1\nDopamine_byDDC_and_SLC18A2", 
          "DRD4" = "SerotoninDopamin_byDDC\nDopamine_byDDC_and_SLC18A1\nDopamine_byDDC_and_SLC18A2",
          "NPY1R" = "NPY", 
          "NPY2R" = "NPY", 
          "NPY5R" = "NPY") %>% as.data.frame() %>% magrittr::set_colnames(value = "label")


neurons_top_ligands_list[[2]] %>% 
    ggplot(aes(factor(cell_a_receptor, levels), partner_a_receptor)) +
    geom_point(aes(size = log1p(gene_a_receptor_expression))) +
    geom_text(data = labels, aes(x = 0.5, y = 1:34, label = label), hjust = 1, size = 2, color = "grey20") +
    geom_text(aes(x = 0.8, y = dim(labels)[1] + 1.5, label = "Sympathetic neuron's\ntop 10 ligands"), hjust = 1, size = 8) +
    geom_text(aes(x = 39, y = dim(labels)[1] + 1.5, label = "receptors"), hjust = 0, size = 8) +
    coord_cartesian(clip = "off") +
    scale_x_discrete(name = NULL, expand = c(0, 0), position = "top") +
    scale_y_discrete(name = NULL, position = "right", expand = c(0,0)) +
    scale_size_area(name = "receptors expression level", breaks = c(0.1, 0.5, 1), max_size = 23) +
    theme(axis.text.x = element_text(size = 25, angle = -50, hjust = 1, vjust = 0.5, color = "grey20"), 
          axis.text.y = element_text(size = 17),
          axis.ticks = element_blank(), 
          plot.margin = unit(c(6, 5, 1, 85), units = "mm"),  
          panel.background = element_rect(fill = "white"),
          panel.grid.major = element_line(linetype = 2, linewidth = 0.3, color = "grey70"),
          legend.position = "bottom", 
          legend.title = element_text(size = 23), 
          legend.text = element_text(size = 25))

ggsave("../data/kidney/kidney-map/results/cell_cell_communication/Sympathetic_neuron_top_ligands_receptors_expression.tiff", 
       width = 25, height = 15)
```

## neurons expressed receptors

```{r}
library(dplyr)
library(tidyr)
library(stringr)

means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")

# remove all secreted interactions
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

receptors_expressed_by_neurons_ids <- ((means_long$receptor_a == "True" & means_long$cell_a %in% c("Sympathetic Neurons", "Sensory Neurons")) | (means_long$receptor_b == "True" & means_long$cell_b %in% c("Sympathetic Neurons", "Sensory Neurons")))

receptors_expressed_by_neurons <- means_long[receptors_expressed_by_neurons_ids, ]
# place receptors into the first column and ligands to the second column
receptors_expressed_by_neurons <- receptors_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(cell_a_receptor = ifelse(receptor_a == "True", cell_a, cell_b), 
           cell_b_ligand = ifelse(receptor_b == "False", cell_b, cell_a),
           
           partner_a_receptor = ifelse(receptor_a == "True", partner_a, partner_b), 
           partner_b_ligand = ifelse(receptor_b == "False", partner_b, partner_a), 
           
           gene_a_receptor = ifelse(receptor_a == "True", gene_a, gene_b),
           gene_b_ligand = ifelse(receptor_b == "False", gene_b, gene_a)) %>% 
    ungroup() %>% 
    dplyr::select(matches("_receptor|_ligand"), mean_expression) %>% 
    dplyr::relocate(cell_b_ligand, .before = 2) 

# remove self-interactions
receptors_expressed_by_neurons <- receptors_expressed_by_neurons %>% dplyr::filter(cell_a_receptor != cell_b_ligand)

complex_input <- read.csv("../data/cellphonedb/v4.1.0/complex_input.csv") %>% tibble::column_to_rownames("complex_name")

# convert receptors id to symbol id
neurons_receptors <- receptors_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(gene_a_receptor = ifelse(grepl("^complex:", partner_a_receptor), 
                                    complex_input[gsub("^complex:", "", partner_a_receptor), 1:5, drop = F] %>% 
                                        apply(1, str_c, collapse = ",") %>% 
                                        str_replace(",{1,}$", "") , 
                                    gene_a_receptor))

source("functions/idconv.R")
neurons_receptors <- neurons_receptors %>% 
    rowwise() %>% 
    mutate(gene_a_receptor = ifelse(grepl("^complex:", partner_a_receptor), 
                                    str_split(gene_a_receptor, ",") %>% 
                                        sapply(function(x){idconv(x, from_type = "UNIPROTID", to_type = "SYMBOL", db = "human")} %>% 
                                                   str_c(collapse = ",")), 
                                    gene_a_receptor))
neurons_receptors %>% dplyr::filter(is.na(gene_a_receptor))
# manually change NA to "RYK,FZD8", this conversion failed from uniprot id to symbol id
neurons_receptors$gene_a_receptor <- ifelse(is.na(neurons_receptors$gene_a_receptor), "RYK,FZD8", neurons_receptors$gene_a_receptor)



# convert ligands id to symbol id
neurons_receptors <- neurons_receptors %>% 
    rowwise() %>% 
    mutate(gene_b_ligand = ifelse(grepl("^complex:", partner_b_ligand), 
                                  complex_input[gsub("^complex:", "", partner_b_ligand), 1:5, drop = F] %>% 
                                      apply(1, str_c, collapse = ",") %>% 
                                      str_replace(",{1,}$", ""), 
                                  gene_b_ligand))

neurons_receptors <- neurons_receptors %>% 
    rowwise() %>% 
    mutate(gene_b_ligand = ifelse(grepl("^complex:", partner_b_ligand), 
                                    str_split(gene_b_ligand, ",") %>% 
                                        sapply(function(x){idconv(x, from_type = "UNIPROTID", to_type = "SYMBOL", db = "human")} %>% 
                                                   str_c(collapse = ",")), 
                                    gene_b_ligand))

neurons_receptors %>% dplyr::filter(is.na(gene_b_ligand))
# manually change NA to CEL, this conversion failed for CEL uniprot id to symbol id
neurons_receptors$gene_b_ligand <- ifelse(is.na(neurons_receptors$gene_b_ligand), "CEL", neurons_receptors$gene_b_ligand)
saveRDS(neurons_receptors, "../data/kidney/kidney-map/results/cell_cell_communication/neurons_receptors.rds")
```

```{r}
library(scuttle)
library(dplyr)
library(tidyr)
library(stringr)

neurons_receptors <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/neurons_receptors.rds")
sces_human <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")

# remove unexpressed pairs
receptors <- neurons_receptors$gene_a_receptor %>% str_split(",") %>% unique
ligands <- neurons_receptors$gene_b_ligand %>% str_split(",") %>% unique

receptors_ids <- sapply(receptors, function(x){
    all(x %in% rownames(sces_human))
})
receptors_ids %>% table
receptors <- receptors[receptors_ids] %>% sapply(str_c, collapse = ",")

ligands_ids <- sapply(ligands, function(x){
    all(x %in% rownames(sces_human))
})
ligands_ids %>% table
ligands <- ligands[ligands_ids] %>% sapply(str_c, collapse = ",")

neurons_receptors <- neurons_receptors %>% dplyr::filter(gene_a_receptor %in% receptors & gene_b_ligand %in% ligands)

# extract receptors expression
neurons_receptors <- neurons_receptors %>% 
    rowwise() %>% 
    mutate(gene_a_receptor_expression = makePerCellDF(sces_human[, sces_human$level3_cluster == cell_a_receptor], 
                                                      features = str_split(gene_a_receptor, ",") %>% unlist) %>% 
               pivot_longer(cols = -c(1:11), names_to = "symbol", values_to = "logcounts") %>% 
               dplyr::pull(logcounts) %>% 
               mean %>% 
               round(4)) %>% 
    dplyr::relocate(gene_a_receptor_expression, .after = gene_a_receptor)


# extract ligands expression
neurons_receptors <- neurons_receptors %>% 
    rowwise() %>% 
    mutate(gene_b_ligand_expression = makePerCellDF(sces_human[, sces_human$level3_cluster == cell_b_ligand], 
                                                      features = str_split(gene_b_ligand, ",") %>% unlist) %>% 
               pivot_longer(cols = -c(1:11), names_to = "symbol", values_to = "logcounts") %>% 
               dplyr::pull(logcounts) %>% 
               mean %>% 
               round(4)) %>% 
    dplyr::relocate(gene_b_ligand_expression, .after = gene_b_ligand)
neurons_receptors <- neurons_receptors %>% dplyr::rename(interaction_pair_expression = mean_expression)
saveRDS(neurons_receptors, "../data/kidney/kidney-map/results/cell_cell_communication/neurons_receptors.rds")
```

### visualize neurons top receptors ligand's expression

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)

sces_human <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")
levels <- sces_human$level3_cluster %>% levels
neurons_receptors <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/neurons_receptors.rds")

neurons_receptors_list <- split(neurons_receptors, f = neurons_receptors$cell_a_receptor)

neurons_receptors_top_list <- neurons_receptors_list %>% lapply(function(x){
    ids <- x %>% 
        dplyr::arrange(-gene_a_receptor_expression) %>% 
        dplyr::pull(gene_a_receptor) %>% unique %>% head(10)
    x %>% dplyr::filter(gene_a_receptor %in% ids) %>% dplyr::arrange(-gene_a_receptor_expression)
})

neurons_receptors_top_list <- neurons_receptors_top_list %>% lapply(function(x){
    x %>% rowwise() %>% 
        mutate(partner_b_ligand = ifelse(grepl("^simple:", partner_b_ligand), 
                                         gene_b_ligand, 
                                         gsub("^complex:", "", partner_b_ligand)), 
               partner_a_receptor = ifelse(grepl("^simple:", partner_a_receptor), 
                                           gene_a_receptor, 
                                           gsub("^complex:", "", partner_a_receptor)))
    
})

# convert character to factor
neurons_receptors_top_list <- neurons_receptors_top_list %>% lapply(function(x){
    x %>% rowwise() %>% 
        mutate(partner_a_receptor = factor(partner_a_receptor, unique(partner_a_receptor)), 
               partner_b_ligand = factor(partner_b_ligand, unique(partner_b_ligand)), 
               gene_a_receptor = factor(gene_a_receptor, unique(gene_a_receptor)), 
               gene_b_ligand = factor(gene_b_ligand, unique(gene_b_ligand)))
})

labels <- data.frame(label = c("NGF" = "NTRK1", "NTF3" = "NTRK1", "REN" = "ATP6AP2", 
                               "NTF4" = "NGFR", 
                               "BDNF" = "NGFR", "OSM" = "LIFR", "LIF" = "LIFR", 
                               "TYROBP" = "CD44", "SIGLEC15" = "CD44", "SELE" = "CD44", 
                               "SLIT2" = "ROBO2", "GABA_byGAD1_and_SLC6A12" = "GABBR1", 
                               "GABA_byGAD1_and_SLC6A13" = "GABBR1", "GABA_byGAD1_and_SLC6A6" = "GABBR1", 
                               "GABA_byGAD1_and_SLC6A8" = "GABBR1", "GABA_byGAD2_and_SLC6A1" = "GABBR1", 
                               "GABA_byGAD2_and_SLC6A12" = "GABBR1", "GABA_byGAD2_and_SLC6A13" = "GABBR1", 
                               "GABA_byGAD2_and_SLC6A6" = "GABBR1", "GABA_byGAD2_and_SLC6A8" = "GABBR1", 
                               "GABA_byGAD1_and_SLC6A1" = "GABBR1", "GABA_byGAD1_and_SLC6A11" = "GABBR1", 
                               "GABA_byGAD2_and_SLC6A11" = "GABBR1", "LRFN4" = "PTPRF", 
                               "LRFN5" = "PTPRF", "LRRC4B" = "PTPRF", "LRRC4C" = "PTPRF", 
                               "L1CAM" = "EZR", "Glutamate_byGLS_and_SLC1A1" = "GRIK1", 
                               "Glutamate_byGLS_and_SLC1A2" = "GRIK1", "Glutamate_byGLS_and_SLC1A3" = "GRIK1", 
                               "Glutamate_byGLS_and_SLC17A8" = "GRIK1", "Glutamate_byGLS2_and_SLC17A8" = "GRIK1", 
                               "Glutamate_byGLS2_and_SLC1A1" = "GRIK1", "Glutamate_byGLS2_and_SLC1A2" = "GRIK1", 
                               "Glutamate_byGLS2_and_SLC1A3" = "GRIK1", "Glutamate_byGLS_and_SLC17A7" = "GRIK1", 
                               "Glutamate_byGLS2_and_SLC17A7" = "GRIK1", "Glutamate_byGLS_and_SLC1A7" = "GRIK1", 
                               "Glutamate_byGLS_and_SLC17A6" = "GRIK1", "Glutamate_byGLS_and_SLC1A6" = "GRIK1",
                               "Glutamate_byGLS2_and_SLC17A6" = "GRIK1", "Glutamate_byGLS2_and_SLC1A6" = "GRIK1"))


neurons_receptors_top_list[[1]] %>% 
    ggplot(aes(factor(cell_b_ligand, levels), partner_b_ligand)) +
    geom_point(aes(size = log1p(gene_b_ligand_expression))) +
    geom_text(data = labels, aes(x = 38.5, y = 1:43, label = label), hjust = 0, size = 2.5, color = "grey20") +
    scale_x_discrete(name = NULL, position = "top", expand = c(0.01,0)) +
    scale_y_discrete(name = NULL, expand = c(0,0)) +
    geom_text(x = -1.5, y = 45, label = "ligand") +
    geom_text(x = 42, y = 45, label = "Sensory neuron's\ntop 10 receptors") +
    coord_cartesian(clip = "off") +
    scale_size_area(name = "ligands expression level", max_size = 8, breaks = c(0.1, 0.5, 1.0), labels = c(0.1, 0.5, 1.0)) +
    theme(axis.text.x = element_text(angle = -60, hjust = 1, size = 10, color = "grey20"), 
          axis.text.y = element_text(size = 7, color = "grey20"),
          panel.background = element_rect(fill = "white"), 
          axis.ticks = element_blank(), 
          panel.grid.major = element_line(linetype = 2, linewidth = 0.1, color = "grey70"), 
          legend.position = "bottom", 
          plot.margin = unit(c(0, 35, 0, 2), "mm"))

ggsave("../data/kidney/kidney-map/results/cell_cell_communication/Sensory_neuron_top_receptors_ligands_expression.tiff", 
       width = 10)


labels <- data.frame(label = c("ARGN" = "NCAM1", "REN" = "ATP6AP2", "EFNA1" = "EPHA5", 
                               "EFNA4" = "EPHA5", "EFNA5" = "EPHA5", "EFNA2" = "EPHA5", 
                               "EFNA3" = "EPHA5", "NGF" = "NGFR,NTRK1", "NTF3"  ="NGFR,NTRK1",
                               "APP" = "PLXNA4", "APLP2" = "PLXNA4", "NTF4" = "NGFR", "BDNF" = "NGFR", 
                               "RLN3" = "RXFP1", "SCT" = "SCTR", "VIP" = "SCTR", 
                               "GABA_byGAD1_and_SLC6A12" = "GABBR1", 
                               "GABA_byGAD1_and_SLC6A13" = "GABBR1", 
                               "GABA_byGAD1_and_SLC6A6" = "GABBR1",
                               "GABA_byGAD1_and_SLC6A8" = "GABBR1",
                               "GABA_byGAD2_and_SLC6A1" = "GABBR1",
                               "GABA_byGAD2_and_SLC6A12" = "GABBR1",
                               "GABA_byGAD2_and_SLC6A13" = "GABBR1",
                               "GABA_byGAD2_and_SLC6A6" = "GABBR1",
                               "GABA_byGAD2_and_SLC6A8" = "GABBR1",
                               "GABA_byGAD1_and_SLC6A1" = "GABBR1",
                               "GABA_byGAD1_and_SLC6A11" = "GABBR1",
                               "SEMA3A" = "PlexinA4_complex1")) 

neurons_receptors_top_list[[2]] %>% 
    ggplot(aes(factor(cell_b_ligand, levels), partner_b_ligand)) +
    geom_point(aes(size = log1p(gene_b_ligand_expression))) +
    geom_text(data = labels, aes(x = 38.5, y = 1:28, label = label), hjust = 0, size = 3, color = "grey20") +
    scale_x_discrete(name = NULL, position = "top", expand = c(0.01, 0.01)) +
    scale_y_discrete(name = NULL, expand = c(0, 0)) +
    geom_text(x = -1.2, y = 30, label = "ligand", size = 3.5) +
    geom_text(x = 38.5, y = 30, label = "Sympathetic Neuron's\ntop 10 receptors", hjust = 0, size = 3.5) +
    coord_cartesian(clip = "off") +
    scale_size_area(name = "ligands expression level", max_size = 6, breaks = c(0.1, 0.5, 1.0)) +
    theme(axis.text.x = element_text(angle = -60, hjust = 1, size = 10, color = "grey20"), 
          axis.text.y = element_text(size = 7, color = "grey20"),
          panel.background = element_rect(fill = "white"), 
          axis.ticks = element_blank(), 
          panel.grid.major = element_line(linetype = 2, linewidth = 0.1, color = "grey70"), 
          legend.position = "bottom", 
          plot.margin = unit(c(0, 40, 0, 2), "mm"))

ggsave("../data/kidney/kidney-map/results/cell_cell_communication/Sympathetic_neuron_top_receptors_ligands_expression.tiff",
       width = 10, height = 6)
```


## neuron regulate Dendritic cells

how neurons regulate dendritic cell's antigen processing and presentation

```{r}
library(org.Mm.eg.db)
library(biomaRt)
library(dplyr)

entrez <- keys(org.Mm.eg.db)

mmart <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl", mirror = "www")
# searchAttributes(mmart, "GO")
go_df <- getBM(attributes = c("mgi_symbol", "entrezgene_id", "go_id", "name_1006"), 
               filters = "entrezgene_id", 
               values = entrez, 
               mart = mmart)

go_df %>% dplyr::filter(grepl("dendritic cell", name_1006)) %>% dplyr::pull(name_1006) %>% unique

antigen_processing_and_presentation <- go_df %>% 
    dplyr::filter(name_1006 %in% c("antigen processing and presentation", 
                                   "antigen processing and presentation of polysaccharide antigen via MHC class II", 
                                   "antigen processing and presentation following phagocytosis", 
                                   "antigen processing and presentation of peptide antigen via MHC class II", 
                                   "dendritic cell antigen processing and presentation", 
                                   "antigen processing and presentation of endogenous peptide antigen via MHC class II", 
                                   "antigen processing and presentation of peptide antigen", 
                                   "antigen processing and presentation of endogenous antigen",
                                   "peptide antigen assembly with MHC class II protein complex",
                                   "antigen processing and presentation of exogenous protein antigen via MHC class Ib, TAP-dependent")) %>% 
    dplyr::pull(mgi_symbol) %>% 
    unique 


saveRDS(antigen_processing_and_presentation, 
        "data/antigene_processing_and_presentation.rds")
```

```{r}
library(nichenetr)
library(tidygraph)
library(ggraph)
library(tidyverse)
source("functions/idconv.R")

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
sensory <- sces[, sces$level3_cluster == "Sensory Neurons"]
dendritics <- sces[, sces$level3_cluster == "Dendritic Cells"]

lr_network <- readRDS("../data/nichenet/mouse/lr_network_mouse_21122021.rds")
ligand_target_matrix <- readRDS("../data/nichenet/mouse/ligand_target_matrix_nsga2r_final_mouse.rds")
gene_oi <- readRDS("data/antigene_processing_and_presentation.rds")
```

```{r}
expressed_gene_sensory <- rownames(sensory)[counts(sensory) %>% apply(1, function(x){(sum(x > 0)/ncol(sensory)) > 0.05})] 
expressed_gene_sensory <- idconv(expressed_gene_sensory, from_type = "GENEID", to_type = "SYMBOL", db = "mouse") %>% unname()

expressed_gene_dendritic <- rownames(dendritics)[counts(dendritics) %>% apply(1, function(x){(sum(x > 0)/ncol(dendritics)) > 0.05})]
expressed_gene_dendritic <- idconv(expressed_gene_dendritic, from_type = "GENEID", to_type = "SYMBOL", db = "mouse") %>% unname()

expressed_ligands <- intersect(lr_network$from, expressed_gene_sensory)
expressed_ligands %>% str

expressed_receptors <- intersect(lr_network$to, expressed_gene_dendritic)
expressed_receptors %>% str

lr_network_expressed <- lr_network %>% dplyr::filter(from %in% expressed_ligands & to %in% expressed_receptors)

background_expressed_gene_dendritic <- expressed_gene_dendritic %>% .[. %in% rownames(ligand_target_matrix)]
potential_ligands <- lr_network_expressed$from %>% unique
```

```{r}
ligands_activity <- predict_ligand_activities(geneset = gene_oi, 
                                              background_expressed_genes = background_expressed_gene_dendritic, 
                                              ligand_target_matrix = ligand_target_matrix, 
                                              potential_ligands = potential_ligands)

p_ligand_activity <- ligands_activity %>% 
    dplyr::arrange(-aupr_corrected) %>% 
    dplyr::top_n(10, wt = aupr_corrected) %>% 
    ggplot(aes(x = 1, reorder(test_ligand, aupr_corrected))) +
    geom_tile(aes(fill = aupr_corrected)) +
    scale_x_discrete(name = NULL, expand = c(0, 0)) +
    scale_y_discrete(name = NULL, expand = c(0,0)) +
    scale_fill_gradient2(name = "ligand activity", 
                         low = "whitesmoke", 
                         high = "black",
                         breaks = c(0.01, 0.037), 
                         labels = c("low", "high")) +
    theme(axis.ticks.y = element_blank(), 
          plot.title = element_text(hjust = 0.5, size = 10, face = "bold"), 
          legend.position = "right", 
          axis.text.y = element_text(size = 15)) 


top_ligands <- ligands_activity %>% 
    arrange(-aupr_corrected) %>% 
    pull(test_ligand) %>% 
    head(10)
```

```{r}
ligands_targets_links <- lapply(X = top_ligands, 
                                FUN = get_weighted_ligand_target_links,
                                geneset = gene_oi, 
                                ligand_target_matrix = ligand_target_matrix, 
                                n = 250) %>% 
    dplyr::bind_rows()
```

```{r}
mat <- ligands_targets_links %>% 
    tidyr::pivot_wider(names_from = target, values_from = "weight", values_fill = 0) %>% 
    tidyr::pivot_longer(cols = -ligand, names_to = "target", values_to = "weight")


p_ligand_target_links <- mat %>% 
    ggplot(aes(target, reorder(ligand, weight))) +
    geom_raster(aes(fill = weight)) +
    scale_x_discrete(name = "Dendritic Cells expressed \nantigene presentation genes", expand = c(0,0)) +
    scale_y_discrete(name = "ligands expressed by \nsensory neuron", expand = c(0,0)) +
    scale_fill_gradient(name = "ligand-target \nregulation potential", low = "grey90", high = "black", 
                        breaks = c(0.003, 0.06), labels = c("low", "high")) + 
    theme(axis.title = element_text(size = 15), 
          axis.ticks = element_blank(), 
          plot.margin = unit(c(0, 0, 0, 5), "mm"))
```

```{r}
ligand_tf_matrix <- readRDS("../data/nichenet/mouse/ligand_tf_matrix_nsga2r_final_mouse.rds")
weighted_network <- readRDS("../data/nichenet/mouse/weighted_networks_nsga2r_final_mouse.rds")
ligands_signal_path <- get_ligand_signaling_path_with_receptor(ligand_tf_matrix = ligand_tf_matrix, 
                                                               ligands_all = "Calca", 
                                                               targets_all = c("H2-D1", "H2-K1"), 
                                                               receptors_all = c("Ramp1"), 
                                                               top_n_regulators = 4, 
                                                               weighted_networks = weighted_network)

df1 <- ligands_signal_path$sig %>% arrange(-weight)
df2 <- ligands_signal_path$gr %>% 
    dplyr::filter(from %in% (ligands_signal_path$gr %>% arrange(-weight) %>% pull(from) %>% unique() %>% head(2))) %>% 
    arrange(-weight)

calca_receptors <- lr_network %>% dplyr::filter(from == "Calca") %>% dplyr::pull(to) %>% unique
ligand_signal_df <- rbind(df1, df2) %>% distinct(from, to, .keep_all = T) 

# filtering out calca non-binding receptors
ligand_signal_df <- ligand_signal_df %>% 
    rowwise() %>% 
    mutate(del = ifelse(from == "Calca" & !(to %in% calca_receptors), "yes", "no")) %>% 
    dplyr::filter(del == "no") %>% 
    dplyr::select(-del)
```

```{r}
library(scuttle)

tg <- as_tbl_graph(ligand_signal_df, directed = TRUE)
nodes <- tg %>% as_tibble() %>% pull(name) %>% unique()
reciver_expression <- dendritics %>% makePerCellDF(features = idconv(nodes[!(nodes == "Calca")]), use.dimred = F) %>% 
    dplyr::select(starts_with("ENS")) %>% apply(2, mean)

names(reciver_expression) <- idconv(names(reciver_expression), from_type = "GENEID", to_type = "SYMBOL", db = "mouse")

nodes_expression <- c("Calca" = 1.832615) %>% append(values = reciver_expression) %>% round(digits = 4)
set.seed(113)
p_ligand_signal_path <- tg %>% 
    mutate(expression = nodes_expression[name],
           color = ifelse(name == "Calca", "red", 
                          ifelse(name %in% c("H2-D1", "H2-K1"), "blue", 
                                 ifelse(name %in% c("Stat1", "Fos"), "gold", "steelblue")))) %>% 
    ggraph(layout = "nicely") +
    geom_node_point(aes(color = color, size = expression)) +
    geom_node_text(aes(label = name), color = "black", size = 3) +
    geom_edge_link(aes(edge_width = weight),
                   start_cap = circle(6, "mm"), 
                   end_cap = circle(6, "mm"), 
                   arrow = arrow(length = unit(0.3, "cm"))) +
    scale_size_area(max_size = 15) +
    scale_edge_width(range = c(0.3, 3)) +
    scale_color_identity() +
    theme_graph() +
    theme(legend.position = "none", 
          plot.margin = unit(c(0, 0, 0, 0),"mm"))
p_ligand_signal_path
```

```{r}
library(patchwork)

((p_ligand_activity + p_ligand_target_links + plot_layout(widths = c(1, 4))) / p_ligand_signal_path ) +
    plot_layout(heights = c(1, 1.2))

ggsave("../data/kidney/kidney-map/results/sensory_dendritic_regulation.tiff", 
       width = 10, height = 10)
```


### glomerular endothelial interaction with Podocytes

```{r}
library(dplyr)
library(tidyr)
library(stringr)
library(scuttle)
source("functions/idconv.R")

means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")

glomer_podocytes_interactions <- means_long %>% dplyr::filter((cell_a == "Podocytes" & cell_b == "Glomerular Endothelial")|(cell_a == "Glomerular Endothelial" & cell_b == "Podocytes"))

# filter out non ligand-receptor interactions
glomer_podocytes_interactions <- glomer_podocytes_interactions %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

glomer_endo_ligands <- glomer_podocytes_interactions %>% 
    dplyr::rowwise() %>% 
    dplyr::filter((receptor_a == "False" & cell_a == "Podocytes") | (receptor_b == "False" & cell_b == "Podocytes")) %>% 
    dplyr::pull(partner_a) %>% unique
complex_input <- read.csv("../data/cellphonedb/v4.1.0/complex_input.csv") %>% tibble::column_to_rownames("complex_name")

glomer_endo_ligands <- sapply(glomer_endo_ligands, 
                              function(x){
                                  ifelse(grepl("^simple:", x), 
                                         gsub("^simple:", "", x),
                                         complex_input[gsub("^complex:", "", x), 1:5, drop = T] %>% unlist() %>% str_c(collapse = ",") %>% str_replace(",{1,}$", ""))
                              }) %>% unname()

glomer_ligands <- glomer_endo_ligands %>% 
    str_c(collapse = ",") %>% 
    str_split(",") %>% 
    unlist() %>% 
    idconv(from_type = "UNIPROTID", to_type = "SYMBOL", db = "human") %>% 
    unname %>% na.omit() %>% as.character()

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")
glomer_ligands <- glomer_ligands[glomer_ligands %in% rownames(sces)]

sces_agg <- aggregateAcrossCells(sces, 
                                 ids = sces$cell_type == "Podocytes", 
                                 statistics = "mean", 
                                 use.assay.type = "logcounts", 
                                 subset.row = glomer_ligands)

stats <- sces_agg %>% logcounts() %>% .[, 2, drop = T] %>% sort(decreasing = T)

library(fgsea)
library(biomaRt)
library(org.Mm.eg.db)
mmart <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl", mirror = "www")
searchAttributes(mmart, "entrez")
gene_df <- getBM(attributes = c("mgi_symbol", "mgi_description"), 
                 filters = "entrezgene_id", 
                 values = keys(org.Mm.eg.db), 
                 mart = mmart)
gene_df %>% dplyr::filter(grepl("growth factor", mgi_description))

glomer_ligands_gsea <- fgsea(pathways = gs,
                             stats = stats, 
                             eps = 0, 
                             minSize = 1, 
                             maxSize = 1000)
glomer_ligands_gsea %>% as.data.frame() %>% dplyr::arrange(pval)
```

# catecholamine receptors expression along renal tubule and collecting ducts

```{r}
library(scuttle)
library(dplyr)
library(SingleCellExperiment)
library(scater)
library(AnnotationHub)
library(tidyr)

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
ah <- AnnotationHub()
query(ah, c("EnsDb", "Mus musculus"))
ensdb <- ah[["AH109655"]]


adrs <- data.frame(ensembl = rownames(sces), 
                   symbol = mapIds(ensdb, rownames(sces), keytype = "GENEID", column = "SYMBOL"))
adrs <- adrs %>% dplyr::filter(grepl("^Adr(a|b)[0-9]{1,}", symbol)) %>% dplyr::arrange(symbol)
rownames(adrs) <- adrs$symbol

adrs_expression_df <- aggregateAcrossCells(sces, 
                     ids = sces$level3_cluster, 
                     statistics = "mean", 
                     subset.row = adrs$ensembl,
                     use.assay.type = "logcounts") %>% 
    makePerCellDF(features = adrs$ensembl, 
                  use.dimred = F, 
                  assay.type = "logcounts") %>% 
    dplyr::select(-c(1:13)) 

colnames(adrs_expression_df) <- mapIds(ensdb, keys = colnames(adrs_expression_df), keytype = "GENEID", column = "SYMBOL")
adrs_expression_df <- adrs_expression_df %>% tibble::rownames_to_column("cell_type") %>% dplyr::filter(grepl("^(PTS|LOH|DCT|CNT|CCD|OMCD|IMCD)", cell_type)) %>% 
    tibble::column_to_rownames("cell_type")

breaks <- seq(range(adrs_expression_df)[1], range(adrs_expression_df)[2], by = 0.001)
library(pheatmap)
tiff("../data/kidney/kidney-map/results/catecholamine/catecholamine_recepors_expressions.tiff", width = 1000 * 2, height = 500 * 2)
pheatmap(t(adrs_expression_df), 
         cluster_rows = F, 
         cluster_cols = F, 
         breaks = breaks,
         color = colorRampPalette(c("white", "black"))(length(breaks)), 
         border_color = "grey90", 
         angle_col = 315, 
         fontsize_col = 30, 
         fontsize_row = 30, 
         legend_breaks = c(0, 0.2), 
         legend_labels = c("low", "high"), 
         fontsize = 30)
dev.off()
```

# endothelium

```{r}
library(SingleCellExperiment)
library(scuttle)
library(magrittr)
library(cluster)
library(AnnotationHub)
ah <- AnnotationHub()
query(ah, c("EnsDb", "Mus Musculus"))
ensdb <- ah[["AH109655"]]

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
endo <- sces[, sces$level3_cluster == "Endothelial"]
para_endo <- sces[, sces$level3_cluster == "paravertebral Endothelial"]
glomer_endo <- sces[, sces$level3_cluster == "Glomerular Endothelial"]

set.seed(101)
endo_clusters <- clara(reducedDim(endo, "corrected"), 
                       k = 3, metric = "euclidean", 
                       stand = F, 
                       cluster.only = TRUE, 
                       samples = 50, 
                       sampsize = 150)
endo_clusters %>% table
endo$agg_cluster <- endo_clusters[colnames(endo)]

set.seed(102)
para_endo_clusters <- clara(x = reducedDim(para_endo, "corrected"), 
                            k = 3, 
                            metric = "euclidean", 
                            stand = F, 
                            cluster.only = T, 
                            samples = 50, 
                            sampsize = 150)
para_endo_clusters %>% table
para_endo$agg_cluster <- para_endo_clusters[colnames(para_endo)]


set.seed(103)
glomer_endo_cluster <- clara(x = reducedDim(glomer_endo, "corrected"), 
                             k = 3, 
                             metric = "euclidean", 
                             stand = F, 
                             cluster.only = T, 
                             samples = 50, 
                             sampsize = 150)
glomer_endo_cluster %>% table
glomer_endo$agg_cluster <- glomer_endo_cluster[colnames(glomer_endo)]

endo_agg <- aggregateAcrossCells(endo, 
                                 ids = endo$agg_cluster, 
                                 statistics = "sum")
para_end_agg <- aggregateAcrossCells(para_endo, 
                                     ids = para_endo$agg_cluster, 
                                     statistics = "sum")
glomer_endo_agg <- aggregateAcrossCells(glomer_endo, 
                                        ids = glomer_endo$agg_cluster, 
                                        statistics = "sum")
identical(rownames(endo_agg), rownames(glomer_endo_agg))
identical(rownames(glomer_endo_agg), rownames(para_end_agg))

counts <- cbind(counts(endo_agg), counts(para_end_agg), counts(glomer_endo_agg)) %>% 
    magrittr::set_colnames(value = c(paste(rep("Endothelial", 3), 1:3, sep = "_"), 
                                     paste(rep("paravertebral Endothelial", 3), 1:3, sep = "_"), 
                                     paste(rep("Glomerular Endothelial", 3), 1:3, sep = "_"))) 
samples <- data.frame(sample = rep(c("Endothelial", "paravertebral Endothelial", "Glomerular Endothelial"), each = 3))
group <- factor(rep(c("Endothelial", "paravertebral Endothelial", "Glomerular Endothelial"), each = 3), 
                levels = c("Endothelial", "paravertebral Endothelial", "Glomerular Endothelial"))
genes <- data.frame(ensembl = rownames(counts), 
                    symbol = mapIds(ensdb, keys = rownames(counts), 
                                    keytype = "GENEID", column = "SYMBOL"))

library(edgeR)
y <- DGEList(counts = counts, 
             samples = samples, 
             group = group, 
             genes = genes)

keep <- filterByExpr(y, group = y$samples$group)
keep %>% table
y <- y[keep, , keep.lib.sizes = F]
y <- calcNormFactors(y, method = "TMM")
y$samples$norm.factors

plotMDS(y)

design <- model.matrix(~ 0 + y$samples$group)
colnames(design) <- c("Endothelial", "paravertebral_Endothelial", "Glomerular_Endothelial")

contrast_matrix <- makeContrasts(
    para_endo_VS_Endo = paravertebral_Endothelial - Endothelial, 
    glomer_endo_VS_Endo = Glomerular_Endothelial - Endothelial, 
    glomer_endo_VS_para_endo = Glomerular_Endothelial- paravertebral_Endothelial,
    levels = colnames(design)
)

v <- voom(y, design = design, plot = TRUE)
vfit <- lmFit(v, design = design)
vfit <- contrasts.fit(vfit, contrasts = contrast_matrix)
efit <- eBayes(vfit)
plotSA(efit)

efit %>% decideTests() %>% summary
efit$coefficients

para_endo_2_endo <- topTable(efit, coef = "para_endo_VS_Endo", number = Inf)
write.csv(para_endo_2_endo, 
          "../data/kidney/kidney-map/results/endothelium/para_endo_to_endo_DEGs.csv", 
          row.names = F, quote = F)

glomer_endo_2_endo <- topTable(efit, coef = "glomer_endo_VS_Endo", number = Inf)
write.csv(glomer_endo_2_endo, 
          "../data/kidney/kidney-map/results/endothelium/glomer_endo_to_endo_DEGs.csv", 
          quote = F, row.names = F)

glomer_endo_2_para_endo <- topTable(efit, coef = "glomer_endo_VS_para_endo", number = Inf)
write.csv(glomer_endo_2_para_endo, 
          "../data/kidney/kidney-map/results/endothelium/glomer_endo_to_para_endo_DEGs.csv", 
          quote = F, row.names = F)

top_genes <- c(glomer_endo_2_endo %>% rownames %>% head(50), 
               para_endo_2_endo %>% rownames %>% head(50)) %>% unique
top_genes %>% str
endothelium <- sces[, sces$cell_type %in% c("Endothelial", "Glomerular Endothelial", "paravertebral Endothelial")]

agg_log <- aggregateAcrossCells(endothelium, 
                                ids = endothelium$level3_cluster, 
                                statistics = "mean", 
                                use.assay.type = "logcounts") %>% logcounts

agg_log <- agg_log[top_genes, ]
colnames(agg_log) <- c("Endothelial", "glomerular Endothelial", "paravertebral Endothelial")

rownames(agg_log) <- mapIds(ensdb, 
                            keys = rownames(agg_log), 
                            keytype = "GENEID", 
                            column = "SYMBOL")
pdf("../data/kidney/kidney-map/results/endothelium/endothelium_top_genes.pdf",
    width = 10, height = 4)

library(pheatmap)
pheatmap(t(agg_log), 
         breaks = seq(range(agg_log)[1], range(agg_log)[2], by = 0.01), 
         color = colorRampPalette(c("white", "yellow", "red"))(length(seq(range(agg_log)[1], range(agg_log)[2], by = 0.01))), 
         border_color = "grey90", 
         cluster_rows = T, 
         fontsize_row = 7, 
         fontsize_col = 3.5, 
         angle_col = 315)
dev.off()
```

```{r}
library(fgsea)
library(biomaRt)
library(magrittr)
para_endo_2_endo <- read.csv("../data/kidney/kidney-map/results/endothelium/para_endto_to_endo_GDEs.csv")
stats_para_endo_to_endo <- setNames(sign(para_endo_2_endo$logFC) * -(log10(para_endo_2_endo$P.Value)), para_endo_2_endo$ensembl)

glomer_endo_2_endo <- read.csv("../data/kidney/kidney-map/results/endothelium/glomer_endo_to_endo_DEGs.csv")
stats_glomer_endo_to_endo <- setNames(sign(glomer_endo_2_endo$logFC)* -(log10(glomer_endo_2_endo$P.Value)), glomer_endo_2_endo$ensembl)

mmart <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl", mirror = "www")
searchAttributes(mmart, "GO")
gene_df <- getBM(attributes = c("go_id", "ensembl_gene_id", "name_1006", "namespace_1003", "go_linkage_type"), 
                 filters = "ensembl_gene_id", 
                 values = names(stats_para_endo_to_endo), 
                 mart = mmart)

evidence_codes <- c("EXP", "IDA", "IPI", "IMP", "IGI", "IEP", 
                    "HTP", "HDA", "HMP", "HGI", "HEP", 
                    "IBA", "IBD", "IKR", "IRD")
gene_df <- gene_df %>% dplyr::filter(go_linkage_type %in% evidence_codes)

gs <- split(gene_df$ensembl_gene_id, gene_df$name_1006)

para_endo_gsea <- fgsea(pathways = gs, 
                        stats = stats_para_endo_to_endo, 
                        minSize = 10, 
                        maxSize = 1000)

para_endo_gsea <- para_endo_gsea[order(para_endo_gsea$pval, decreasing = F), ]
para_endo_gsea <- para_endo_gsea %>% as.data.frame() %>% dplyr::arrange(pval, NES)
saveRDS(para_endo_gsea, 
        "../data/kidney/kidney-map/results/endothelium/para_endo_gsea.rds")


glomer_endo_gsea <- fgsea(pathways = gs, 
                          stats = stats_glomer_endo_to_endo, 
                          minSize = 10, 
                          maxSize = 1000)
glomer_endo_gsea <- glomer_endo_gsea[order(glomer_endo_gsea$pval, decreasing = F), ]
glomer_endo_gsea <- glomer_endo_gsea %>% as.data.frame() %>% dplyr::arrange(pval, NES)
saveRDS(glomer_endo_gsea, 
        "../data/kidney/kidney-map/results/endothelium/glomer_endo_gsea.rds")
```

```{r}
library(ggplot2)
library(magrittr)

para_endo_gsea <- readRDS("../data/kidney/kidney-map/results/endothelium/para_endo_gsea.rds")
glomer_endo_gsea <- readRDS("../data/kidney/kidney-map/results/endothelium/glomer_endo_gsea.rds")
para_to_endo_gsea_top20 <- para_endo_gsea %>% dplyr::filter(NES > 0) %>% dplyr::arrange(pval) %>% head(20) %>% 
    rbind(para_endo_gsea %>% dplyr::filter(NES < 0) %>% dplyr::arrange(pval) %>% head(20))

para_to_endo_gsea_top20 <- para_to_endo_gsea_top20 %>% 
    dplyr::mutate(log10pval = ifelse(NES > 0, -log10(pval), log10(pval)), 
                  colour = ifelse(NES > 0, "tomato", "steelblue")) %>% 
    dplyr::group_by(NES) %>% 
    dplyr::arrange(-log10pval) %>% 
    dplyr::ungroup() %>% 
    dplyr::mutate(y = 40:1)


glomer_endo_gsea_top20 <- glomer_endo_gsea %>% dplyr::filter(NES > 0) %>% dplyr::arrange(pval) %>% head(20) %>% 
    rbind(glomer_endo_gsea %>% dplyr::filter(NES <0) %>% dplyr::arrange(pval) %>% head(20))

glomer_endo_gsea_top20 <- glomer_endo_gsea_top20 %>% 
    dplyr::mutate(log10pval = ifelse(NES >0, -log10(pval), log10(pval)), 
                  colour = ifelse(NES > 0, "tomato", "steelblue")) %>% 
    dplyr::group_by(NES) %>% 
    dplyr::arrange(-log10pval) %>% 
    dplyr::ungroup() %>% 
    dplyr::mutate(y = 40:1)

size <- 4

p_para <- para_to_endo_gsea_top20 %>% 
    ggplot(aes(log10pval, reorder(pathway, log10pval))) +
    geom_bar(aes(fill = colour), stat = "identity") +
    geom_text(data = para_to_endo_gsea_top20[para_to_endo_gsea_top20$NES > 0, ], aes(x = -0.2, y = y, label = pathway), hjust = 1, size = size) +
    geom_text(data = para_to_endo_gsea_top20[para_to_endo_gsea_top20$NES < 0, ], aes(x = 0.2, y = y, label = pathway), hjust = 0, size = size) +
    scale_y_discrete(name = NULL, label = NULL) +
    scale_x_continuous(name = "-log10 P Value", 
                       breaks = c(-35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25), 
                       labels = c(35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25), 
                       limits = c(-35,25)) +
    scale_fill_identity() +
    theme_classic() +
    ggtitle("Top 40 enriched gene sets", 
            subtitle = "Paravertebral endothelial v.s. Endothelial") +
    theme(axis.text.y = element_text(size = 18, face = "bold"), 
          axis.text.x = element_text(size = 18, face = "bold"),
          axis.title.x = element_text(size = 20),
          plot.title = element_text(size = 35), 
          plot.subtitle = element_text(size = 25),
          panel.grid.major.y = element_line(linetype = 2, linewidth = 0.4), 
          axis.ticks.y = element_blank())

p_glomer <- glomer_endo_gsea_top20 %>% 
    ggplot(aes(log10pval, reorder(pathway, log10pval))) +
    geom_bar(aes(fill = colour), stat = "identity") +
    geom_text(data = glomer_endo_gsea_top20[glomer_endo_gsea_top20$NES > 0, ], aes(x = -0.2, y = y, label = pathway), hjust = 1, size = size) +
    geom_text(data = glomer_endo_gsea_top20[glomer_endo_gsea_top20$NES < 0, ], aes(x = 0.2, y = y, label = pathway), hjust = 0, size = size) +
    scale_fill_identity() +
    scale_x_continuous(name = "-log10 P Value", 
                       breaks = c(-40, -35, -25, -15, -10, -5, 0, 5, 10, 15, 20, 25), 
                       labels = c(40, 35, 25, 15, 10, 5, 0, 5, 10, 15, 20, 25), 
                       limits = c(-40, 25)) +
    scale_y_discrete(name = NULL, label = NULL) +
    theme_classic() +
    ggtitle("Top 40 enriched gene sets", 
            subtitle = "Glomerulur endothelial v.s. Endothelial") +
    theme(axis.text.y = element_text(size = 18, face = "bold"), 
          axis.text.x = element_text(size = 18, face = "bold"),
          axis.title.x = element_text(size = 20),
          plot.title = element_text(size = 35), 
          plot.subtitle = element_text(size = 25), 
          panel.grid.major.y = element_line(linetype = 2, linewidth = 0.4), 
          axis.ticks.y = element_blank())

library(patchwork)
p_para + p_glomer

ggsave("../data/kidney/kidney-map/results/endothelium/endothelium_top_gsea.tiff", 
       width = 30, height = 12, limitsize = F)
```

```{r}
library(VennDiagram)
library(dplyr)
library(tidyr)

diff_para_endo_to_endo <- read.csv("../data/kidney/kidney-map/results/endothelium/para_endo_to_endo_DEGs.csv") %>% 
    dplyr::filter(P.Value < 0.05) %>% 
    dplyr::pull(ensembl) %>% unique

diff_glomer_endo_to_endo <- read.csv("../data/kidney/kidney-map/results/endothelium/glomer_endo_to_endo_DEGs.csv") %>% 
    dplyr::filter(P.Value < 0.05) %>% 
    dplyr::pull(ensembl) %>% 
    unique

diff_glomer_endo_to_para_endo <- read.csv("../data/kidney/kidney-map/results/endothelium/glomer_endo_to_para_endo_DEGs.csv") %>% 
    dplyr::filter(P.Value < 0.05) %>% 
    dplyr::pull(ensembl) %>% 
    unique


venn.diagram(x = list(glomer_to_endo = diff_glomer_endo_to_endo, 
                      glomer_to_para_endo = diff_glomer_endo_to_para_endo, 
                      diff_para_endo_2_endo = diff_para_endo_to_endo), 
             filename = "../data/kidney/kidney-map/results/endothelium/venn_endo.tiff", 
             category.names = c("Glomerular endothelial v.s. Endothelial", 
                                "Paravertebral endothelial v.s. Glomerular endothelial", 
                                "Edothelial v.s. Paravertebral endothelial"), 
             resolution = 300, 
             imagetype = "tiff", 
             print.mode = "raw", 
             fill = RColorBrewer::brewer.pal(3, "Set1"), 
             cat.default.pos = "text", 
             cat.cex = 0.8)
```

## endothelia across cortex, outer medulla, inner medulla

```{r}
library(cluster)
library(dplyr)
library(SingleCellExperiment)
library(scuttle)
library(edgeR)
library(limma)
library(AnnotationHub)

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
endothelial <- sces[, sces$level3_cluster == "Endothelial" & sces$location %in% c("Cortex", "outer medulla", "inner medulla")]

cortex_endo <- endothelial[, (endothelial$location == "Cortex" & (endothelial$geo_accession != "GSE146912"))]
outer_medulla_endo <- endothelial[, endothelial$location == "outer medulla"]
inner_medulla_endo <- endothelial[, endothelial$location == "inner medulla"]

set.seed(104)
cortex_endo_cluster <- clara(reducedDim(cortex_endo, "corrected"), 
                             k = 3, 
                             metric = "euclidean", 
                             stand = F, 
                             cluster.only = T, 
                             samples = 50, 
                             sampsize = 500)
cortex_endo_cluster %>% table
cortex_endo_cluster %>% str
cortex_endo$agg_cluster <- cortex_endo_cluster[colnames(cortex_endo)]

set.seed(105)
outer_medulla_endo_cluster <- clara(reducedDim(outer_medulla_endo, "corrected"), 
                                    k = 3, 
                                    metric = "euclidean", 
                                    stand = F, 
                                    cluster.only = T, 
                                    samples = 50, 
                                    sampsize = 500)
outer_medulla_endo_cluster %>% table
outer_medulla_endo$agg_cluster <- outer_medulla_endo_cluster[colnames(outer_medulla_endo)]


set.seed(106)
inner_medulla_endo_cluster <- clara(reducedDim(inner_medulla_endo, "corrected"), 
                                    k = 3, 
                                    metric = "euclidean", 
                                    stand = F, 
                                    cluster.only = T, 
                                    samples = 50, 
                                    sampsize = 500)
inner_medulla_endo_cluster %>% table
inner_medulla_endo$agg_cluster <- inner_medulla_endo_cluster[colnames(inner_medulla_endo)]
```

```{r}
cortex_endo_agg <- aggregateAcrossCells(cortex_endo, 
                                        ids = cortex_endo$agg_cluster, 
                                        statistics = "sum", 
                                        use.assay.type = "counts")
outer_medulla_agg <- aggregateAcrossCells(outer_medulla_endo, 
                                          ids = outer_medulla_endo$agg_cluster, 
                                          statistics = "sum", 
                                          use.assay.type = "counts")
inner_medulla_endo_agg <- aggregateAcrossCells(inner_medulla_endo, 
                                               ids = inner_medulla_endo$agg_cluster, 
                                               statistics = "sum", 
                                               use.assay.type = "counts")

identical(rownames(cortex_endo_agg), rownames(outer_medulla_agg))
identical(rownames(cortex_endo_agg), rownames(inner_medulla_endo_agg))

counts <- Reduce(cbind, list(counts(cortex_endo_agg), counts(outer_medulla_agg), counts(inner_medulla_endo_agg)))
counts %>% head
colnames(counts) <- paste(rep(c("cortex_endo", "out_endo", "inner_endo"), each = 3), 1:3, sep = "_")
ah <- AnnotationHub()
query(ah, c("EnsDb", "Mus musculus"))
ensdb <- ah[["AH109655"]]
gene_df <- data.frame(ensembl = rownames(counts), 
                      symbol = mapIds(ensdb, keys = rownames(counts), keytype = "GENEID", column = "SYMBOL"))

y <- DGEList(counts = counts, 
             samples = data.frame(sample = rep(c("Cortex", "outer medulla", "inner medulla"), each = 3)), 
             group = factor(rep(c("Cortex", "outer medulla", "inner medulla"), each = 3), 
                            levels = c("Cortex", "outer medulla", "inner medulla")), 
             genes = gene_df)

keep <- filterByExpr(y, group = y$samples$group)
keep %>% table
y <- y[keep, , keep.lib.sizes = F]
y <- calcNormFactors(y)

design <- model.matrix(~ 0 + y$samples$group)
colnames(design) <- c("Cortex", "outer_medulla", "inner_medulla")

contrast_matrix <- makeContrasts(
    cortex_inner = Cortex - inner_medulla, 
    outer_inner = outer_medulla - inner_medulla, 
    levels = colnames(design)
)

v <- voom(y, design = design, plot = TRUE)

vfit <- lmFit(v, design = design)
vfit <- contrasts.fit(vfit, contrasts = contrast_matrix)
efit <- eBayes(vfit)

efit %>% decideTests() %>% summary

cortex_to_inner <- topTable(efit, number = Inf, coef = "cortex_inner")
outer_to_inner <- topTable(efit, number = Inf, coef = "outer_inner")

write.csv(cortex_to_inner, 
          "../data/kidney/kidney-map/results/endothelium/cortex_to_inner_DEGs.csv", 
          row.names = F, quote = F)

write.csv(outer_to_inner, 
          "../data/kidney/kidney-map/results/endothelium/outer_to_inner_DEGs.csv", 
          row.names = F, quote = F)
```

```{r}
library(fgsea)
library(biomaRt)
cortex_to_inner <- read.csv("../data/kidney/kidney-map/results/endothelium/cortex_to_inner_DEGs.csv")
outer_to_inner <- read.csv("../data/kidney/kidney-map/results/endothelium/outer_to_inner_DEGs.csv")

stats_cortex_to_inner <- setNames(sign(cortex_to_inner$logFC) * -log10(cortex_to_inner$P.Value), cortex_to_inner$ensembl)
stats_outer_to_inner <- setNames(sign(outer_to_inner$logFC) * -log10(outer_to_inner$P.Value), outer_to_inner$ensembl)

mmart <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
gene_df <- getBM(attributes = c("go_id", "ensembl_gene_id", "name_1006", "namespace_1003", "go_linkage_type"), 
                 filters = "ensembl_gene_id", 
                 values = names(stats_cortex_to_inner), 
                 mart = mmart)
evidence_codes <- c("EXP", "IDA", "IPI", "IMP", "IGI", "IEP", 
                    "HTP", "HDA", "HMP", "HGI", "HEP", 
                    "IBA", "IBD", "IKR", "IRD")
gene_df <- gene_df %>% dplyr::filter(!is.na(go_id), go_linkage_type %in% evidence_codes)
gs <- split(gene_df$ensembl_gene_id, gene_df$name_1006)

cortex_to_inner_gsea <- fgsea(pathways = gs, 
                              stats = stats_cortex_to_inner, 
                              minSize = 10, 
                              maxSize = 1000, 
                              eps = 0)
cortex_to_inner_gsea <- cortex_to_inner_gsea %>% as.data.frame() %>%  dplyr::arrange(-NES, pval)
saveRDS(cortex_to_inner_gsea, 
        "../data/kidney/kidney-map/results/endothelium/cortex_to_inner_gsea.rds")

outer_to_inner_gsea <- fgsea(pathways = gs, 
                             stats = stats_outer_to_inner, 
                             minSize = 10, 
                             maxSize = 1000, 
                             eps = 0)
outer_to_inner_gsea <- outer_to_inner_gsea %>% as.data.frame() %>% dplyr::arrange(-NES, pval)
saveRDS(outer_to_inner_gsea, 
        "../data/kidney/kidney-map/results/endothelium/outer_to_inner_gsea.rds")
```

```{r}
library(ggplot2)
library(patchwork)
library(magrittr)

outer_to_inner_gsea <- readRDS("../data/kidney/kidney-map/results/endothelium/outer_to_inner_gsea.rds")
cortex_to_inner_gsea <- readRDS("../data/kidney/kidney-map/results/endothelium/cortex_to_inner_gsea.rds")


p1 <- cortex_to_inner_gsea %>% 
    head(20) %>% 
    dplyr::mutate(log10pval = -log10(pval)) %>% 
    ggplot(aes(log10pval, reorder(pathway, log10pval))) +
    geom_bar(stat = "identity") +
    scale_x_continuous(name = "-log10 P Value") +
    scale_y_discrete(name = NULL) +
    ggtitle("Top 20 enriched gene sets in \nCortex endothelial") +
    theme_classic() +
        theme(axis.text.y = element_text(size = 15, face = "bold"), 
              axis.text.x = element_text(size = 15, face = "bold"),
              axis.title.x = element_text(size = 25, face = "bold"),
          plot.title = element_text(size = 35), 
          panel.grid.major.y = element_line(linetype = 2, linewidth = 0.2))


p2 <- outer_to_inner_gsea %>% 
    head(20) %>% 
    dplyr::mutate(log10pval = -log10(pval)) %>% 
    ggplot(aes(log10pval, reorder(pathway, log10pval))) +
    geom_bar(stat = "identity") +
    scale_x_continuous(name = "-log10 P Value") +
    scale_y_discrete(name = NULL) +
    ggtitle("Top 20 enriched gene sets in \nouter medulla endothelial") +
    theme_classic() +
        theme(axis.text.y = element_text(size = 15, face = "bold"), 
              axis.text.x = element_text(size = 15, face = "bold"),
              axis.title.x = element_text(size = 25, face = "bold"),
          plot.title = element_text(size = 35), 
          panel.grid.major.y = element_line(linetype = 2, linewidth = 0.2))
p1 + p2

ggsave("../data/kidney/kidney-map/results/endothelium/cortex_outer_inner_gsea.tiff", 
       width = 45, height = 15)
```

## stats change from cortex endothelial to glomeruler endothelial

```{r}
library(SingleCellExperiment)
library(slingshot)
library(magrittr)
library(scater)
library(scran)
library(mclust)
library(RColorBrewer)
source("functions/idconv.R")

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
sces$level3_cluster %>% levels

cell_ids <- (sces$level3_cluster %in% c("Endothelial", "Glomerular Endothelial")) & (sces$location == "Cortex")
cell_ids %>% table

cortex_endo <- sces[, cell_ids]
rm(sces);gc()

gene_stats <- perFeatureQCMetrics(cortex_endo, threshold = 0)
table(gene_stats$detected > 0.1)

cortex_endo <- cortex_endo[gene_stats$detected > 0.1, ]

set.seed(123)
cortex_endo <- runPCA(cortex_endo, exprs_values = "reconstructed", ntop = 1000)
cortex_endo <- runTSNE(cortex_endo, dimred = "PCA", n_dimred = 4)


set.seed(124)
colData(cortex_endo)$clusters <- Mclust(reducedDim(cortex_endo, "TSNE"), G = 9)$classification
colData(cortex_endo)$clusters %>% table

cortex_endo <- slingshot(cortex_endo, clusterLabels = "clusters", 
                         start.clus = 4, end.clus = 6, 
                         reducedDim = "TSNE")


plotReducedDim(cortex_endo, 
               dimred = "TSNE", 
               # color_by = idconv("Pi16"),
               color_by = "clusters",
               text_by = "clusters")
```

```{r}
cortex_endo <- readRDS("../data/kidney/kidney-map/results/trajectory/cortex_endo.rds")
colors <- colorRampPalette(brewer.pal(9, "YlOrRd"))(100) 

point_colors <- colors[cut(cortex_endo$slingPseudotime_3, breaks = 100)]

tiff("../data/kidney/kidney-map/results/trajectory/trajectory.tiff", 
     width = 1000, height = 700)
plot(reducedDim(cortex_endo, "TSNE"), col = point_colors, pch = 16, 
     xaxt = "n", yaxt = "n", bty = "n", 
     xlab = NA, ylab = NA)
lines(SlingshotDataSet(cortex_endo), lwd = 3, col = "black", type = "curve", linInd = 3)
legend(x = 24, y = 30, pch = 19, col = rev(colorRampPalette(brewer.pal(9, "YlOrRd"))(5)), 
       legend = rep("", 5), title = "Pseudotime", xpd = TRUE, cex = 1.5)
dev.off()
```

```{r}
# Itm2b, Ubc
coldata <- colData(cortex_endo)[, "cell_type", drop = F] %>% 
    as.data.frame() %>% tibble::rownames_to_column("cell_ids")
lc <- assay(cortex_endo,  1) %>% as.matrix() %>% as.data.frame() %>% 
    tibble::rownames_to_column("ensembl") %>% 
    dplyr::filter(ensembl %in% idconv(c("Itm2b", "Ubc"))) %>% 
    tidyr::pivot_longer(cols = -ensembl, names_to = "cell_ids", values_to = "logcounts")
df <- dplyr::left_join(coldata, lc, by = "cell_ids")
df

point_colors_itm2b <- colors[cut(df[df$ensembl == "ENSMUSG00000022108", ]$logcounts, breaks = 100)]
point_colors_ubc <- colors[cut(df[df$ensembl == "ENSMUSG00000008348", ]$logcounts, breaks = 100)]
```


```{r}
library(tradeSeq)
library(BiocParallel)

cortex_endo <- fitGAM(cortex_endo, sce = TRUE)
cortex_endo$slingshot
res <- associationTest(cortex_endo)
write.csv(res, "../data/kidney/kidney-map/results/trajectory/association_test_res.csv", 
          row.names = T, quote = F)
saveRDS(cortex_endo, "../data/kidney/kidney-map/results/trajectory/cortex_endo.rds")
```

```{r}
cortex_endo <- readRDS("../data/kidney/kidney-map/results/trajectory/cortex_endo.rds")
res <- read.csv("../data/kidney/kidney-map/results/trajectory/association_test_res.csv", 
                      row.names = 1)
top_genes <- res[order(res$pvalue), ] %>% rownames() %>% head(200)
top_genes <- idconv(top_genes, "GENEID", "SYMBOL") %>% na.omit
p_cortex_endo <- cortex_endo[names(top_genes), ]
rownames(p_cortex_endo) <- top_genes
cortex_endo$clusters <- factor(cortex_endo$clusters, levels = c(4, 1, 3, 9, 2, 7, 5, 8, 6))

# mtx <- logcounts(p_cortex_endo) %>% as.matrix
mtx <- assay(p_cortex_endo, 1) %>% as.matrix()
ann_df <- colData(p_cortex_endo)[, c("cell_type", "slingPseudotime_3")] %>% 
    as.data.frame() %>% 
    dplyr::rename(Pseudotime = 'slingPseudotime_3', 
                  `cell type` = "cell_type") %>% 
    dplyr::arrange(`cell type`, Pseudotime) %>% 
    dplyr::filter(!is.na(Pseudotime))
mtx <- mtx[, rownames(ann_df)]

png("../data/kidney/kidney-map/results/trajectory/heatmap.png", 
     width = 3000, height = 1500)
pheatmap(t(mtx), 
         cluster_rows = F, 
         show_rownames = F, 
         annotation_row = ann_df, 
         annotation_colors = list(`cell type` = c("Cortex Endothelial" = "red", "Glomerular Endothelial" = "green"), 
                                  Pseudotime = setNames(colorRampPalette(brewer.pal(9, "Blues"))(length(unique(ann_df$Pseudotime))), unique(ann_df$Pseudotime))),
         color = rev(heat.colors(2000)),
         fontsize_col= 12, 
         fontsize = 23, 
         breaks = seq(range(mtx)[[1]], range(mtx)[[2]], length.out = 2000), 
         legend_breaks = c(min(mtx), max(mtx)), 
         legend_labels = c("low",  "high"))

dev.off()
```


```{r}
tiff("../data/kidney/kidney-map/results/trajectory/Itm2b.tiff", width = 1000, height = 700)
plot(reducedDim(cortex_endo[,colnames(cortex_endo) %in% rownames(ann_df)], "TSNE"), col = point_colors_itm2b, pch = 16, main = "Itm2b", 
     xaxt = "n", yaxt = "n", bty = "n", xlab = NA, ylab = NA, cex.main = 4)
lines(SlingshotDataSet(cortex_endo), lwd = 3, col = "black", type = "curve", linInd = 3)
dev.off()


tiff("../data/kidney/kidney-map/results/trajectory/ubc.tiff", width = 1000, height = 700)
plot(reducedDim(cortex_endo[,colnames(cortex_endo) %in% rownames(ann_df)], "TSNE"), col = point_colors_ubc, pch = 16, main = "Ubc", 
     xaxt = "n", yaxt = "n", bty = "n", xlab = NA, ylab = NA, cex.main = 4)
lines(SlingshotDataSet(cortex_endo), lwd = 3, col = "black", type = "curve", linInd = 3)
dev.off()
```

```{r}
colData(cortex_endo)$cell_type = ifelse(cortex_endo$cell_type == "Endothelial", "Cortex Endothelial",
                                        cortex_endo$cell_type)
plotReducedDim(cortex_endo[, colnames(cortex_endo) %in% rownames(ann_df)], 
               dimred = "TSNE", 
               color_by = "cell_type", 
               text_by = "cell_type") + 
    theme(legend.position = "none")
ggsave("../data/kidney/kidney-map/results/trajectory/cell_type.tiff", 
       width = 10, height = 7)
```



## transcription factors between paravertabral, glomerular and kidney endothelial

```{r}
library(SingleCellExperiment)
library(SCENIC)
library(scater)
library(magrittr)
library(patchwork)
source("functions/idconv.R")

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
sces$level3_cluster %>% levels
ids <- (sces$level3_cluster %in% c("Endothelial", "Glomerular Endothelial", "paravertebral Endothelial")) & (sces$geo_accession %in% c("GSE129798", "GSE146912", "GSE175421"))
ids %>% table

endothelium <- sces[, ids]
endothelium$level3_cluster %>% table

set.seed(1001)
sub_cells <- c(sample(colnames(endothelium[, endothelium$cell_type == "Endothelial"]), 500, replace = F), 
               sample(colnames(endothelium[, endothelium$cell_type == "Glomerular Endothelial"]), 500, replace = F), 
               sample(colnames(endothelium[, endothelium$cell_type == "paravertebral Endothelial"]), 500, replace = F))
sub_cells %>% str

sub_endothelium <- endothelium[, colnames(endothelium) %in% sub_cells]

expr_mat <- logcounts(sub_endothelium) %>% as.matrix() %>% as.data.frame() %>% 
    tibble::rownames_to_column("ensembl")
expr_mat <- expr_mat %>% 
    dplyr::mutate(symbol = idconv(ensembl, "GENEID", "SYMBOL")) %>% 
    dplyr::relocate(symbol, .after = ensembl)

expr_mat <- expr_mat %>% 
    dplyr::filter(!is.na(symbol) & nchar(symbol) > 0) %>% 
    dplyr::select(-ensembl) 

expr_mat <- aggregate(expr_mat[, -1], by = list(symbol = expr_mat[, 1]), FUN = "sum")
expr_mat <- expr_mat %>% tibble::column_to_rownames("symbol") %>% as.matrix()

write.csv(as.matrix(expr_mat), "../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/exp_mat.rds")

cellInfo <- colData(sub_endothelium) %>% 
    as.data.frame() %>%
    dplyr::select(level3_cluster) %>% 
    dplyr::arrange(level3_cluster)

colVars <- list(CellType = c(
    "Endothelial" = "forestgreen", 
    "Glomerular Endothelial" = "red3", 
    "paravertebral Endothelial" = "magenta4"
))

saveRDS(cellInfo, "../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/cellInfo.rds")
saveRDS(colVars, "../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/colVars.rds")
```

```{r}
org <- "mgi"
dbDir <- "/home/yincy/git/data/cisTarget_database/mouse/mm9"
data("defaultDbNames")
dbs <- defaultDbNames[[org]]
dbs
data("motifAnnotations_mgi_v9", package = "RcisTarget")
motifAnnotations_mgi <- motifAnnotations_mgi_v9
ScenicOptions <- initializeScenic(org = org,
                                  dbDir = dbDir, 
                                  dbs = dbs, 
                                  nCores = 6)
ScenicOptions@inputDatasetInfo$cellInfo <- "../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/cellInfo.rds"
ScenicOptions@inputDatasetInfo$colVars <- "../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/colVars.rds"
saveRDS(ScenicOptions, "../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/ScenicOptions.rds")
```

```{r}
genesKetp <- geneFiltering(exprMat = expr_mat, 
                           scenicOptions = ScenicOptions, 
                           minCountsPerGene = 3 * 0.01 * ncol(expr_mat), 
                           minSamples = 0.01 * ncol(expr_mat))

genesKetp %>% str
expr_mat <- expr_mat[genesKetp, ]

runCorrelation(exprMat_filtered = expr_mat, 
               scenicOptions = ScenicOptions)
saveRDS(ScenicOptions, "../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/ScenicOptions.rds")
```

```{r}
runGenie3(exprMat = expr_mat, scenicOptions = ScenicOptions)
saveRDS(ScenicOptions, "../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/ScenicOptions.rds")
```

```{r}
ScenicOptions <- runSCENIC_1_coexNetwork2modules(scenicOptions = ScenicOptions)
ScenicOptions <- runSCENIC_2_createRegulons(scenicOptions = ScenicOptions, coexMethods = c("top5perTarget"))
ScenicOptions <- runSCENIC_3_scoreCells(scenicOptions = ScenicOptions, exprMat = expr_mat)
saveRDS(ScenicOptions, 
        "../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/ScenicOptions.rds")
```

```{r}
aucellApp <- plotTsne_AUCellApp(ScenicOptions, expr_mat)
savedSelections <- shiny::runApp(aucellApp)

# Save the modified thresholds:
newThresholds <- savedSelections$thresholds
ScenicOptions@fileNames$int["aucell_thresholds",1] <- "int/newThresholds.Rds"
saveRDS(newThresholds, file=getIntName(ScenicOptions, "aucell_thresholds"))
saveRDS(ScenicOptions, 
        file="../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/ScenicOptions.rds") 

ScenicOptions <- runSCENIC_4_aucell_binarize(ScenicOptions)
```

### visualization

```{r}
library(ggplot2)
library(ggheatmap)
library(pheatmap)
library(dplyr)

cellInfo <- readRDS("../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/cellInfo.rds") %>% 
    dplyr::mutate(`cell type` = as.character(level3_cluster)) %>% 
    dplyr::select(-level3_cluster) %>% 
    dplyr::arrange(`cell type`)
regulon_activity_continuous <- readRDS("../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/3.4_regulonAUC.Rds")

regulon_activity_continuous <- regulon_activity_continuous@assays@data$AUC 
regulon_activity_continuous <- regulon_activity_continuous %>% as.matrix() %>% .[, rownames(cellInfo)]
regulon_activity_continuous[1:10, 1:10]

ggheatmap(regulon_activity_continuous, 
          cluster_cols = F, 
          annotation_cols = cellInfo, 
          annotation_color = list(`cell type` = c("Endothelial" = "red", "Glomerular Endothelial" = "blue", "paravertebral Endothelial" = "green")), 
          cluster_rows = F)

tiff("../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/regulon_activity_continuous.tiff", 
     width = 5000, height = 1500, type = "cairo")
pheatmap::pheatmap(t(regulon_activity_continuous), 
                   color = colorRampPalette(c("black", "goldenrod", "yellow"))(1000), 
                   show_colnames = T,
                   show_rownames = F,
                   cluster_cols = T, 
                   cluster_rows = F,
                   annotation_row = cellInfo, 
                   fontsize = 40)
dev.off()
```

```{r}
library(pheatmap)
library(magrittr)
regulon_activity_binary <- readRDS("../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/4.1_binaryRegulonActivity.Rds")
regulon_activity_binary[1:10, 1:10]
regulon_activity_binary %>% rownames()
cellInfo <- readRDS("../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/int/cellInfo.rds") %>% 
    dplyr::mutate(level3_cluster = factor(level3_cluster, levels = c("Endothelial", "Glomerular Endothelial", "paravertebral Endothelial")), 
                  `cell type` = level3_cluster) %>% 
    dplyr::select(-level3_cluster) %>% 
    dplyr::arrange(`cell type`) %>% 
    tibble::rownames_to_column("cell_ids") %>% 
    dplyr::filter(cell_ids %in% colnames(regulon_activity_binary)) %>% 
    tibble::column_to_rownames("cell_ids")


tiff("../data/kidney/kidney-map/results/SCENIC/paravertebral_glomerulur_kidney/regulon_activity_binary.tiff", 
     width = 1000, height = 1000)
pheatmap(mat = regulon_activity_binary[, rownames(cellInfo)], 
         cluster_cols = F, 
         show_colnames = F, 
         show_rownames = T,
         annotation_col = cellInfo, 
         annotation_colors = list(`cell type` = c("Endothelial" = "red", 
                                                  "Glomerular Endothelial" = "green", 
                                                  "paravertebral Endothelial" = "blue")), 
         color = colorRampPalette(c("white", "black"))(100), 
         legend = T, 
         legend_breaks = c(0, 1), 
         legend_labels = c("Off", "On"), 
         fontsize = 15, 
         fontsize_row = 10,
         treeheight_row = 70, 
         clustering_method = "ward.D2")
dev.off()
```

## transcription factors across cortex, outer and inner kidney endothelial

```{r}
library(SingleCellExperiment)
library(SCENIC)
library(scater)
library(magrittr)
library(patchwork)
source("functions/idconv.R")

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
sces$level3_cluster %>% levels
endothelium <- sces[, (sces$level3_cluster == "Endothelial") & sces$geo_accession == "GSE129798"]
endothelium$location %>% table
plotTSNE(endothelium, 
         colour_by = "location") +
    scale_color_discrete(name = "region") +

plotTSNE(endothelium, 
         colour_by = idconv("Irf1")) +
    scale_color_continuous(name = "Irf1", type = "viridis") +

plotTSNE(endothelium, 
         colour_by = idconv("Lef1")) +
    scale_color_continuous(name = "Lef1", type = "viridis") +

plotTSNE(endothelium, 
         colour_by = idconv("Nfat5")) +
    scale_color_continuous(name = "Nfat5", type = "viridis") +
    plot_layout(ncol = 2)


ggsave("../data/kidney/kidney-map/results/SCENIC/TFs_expression.tiff", 
       width = 10, height = 10)

set.seed(1011)
sample_ids <- sample(ncol(endothelium), 2000, replace = F)
saveRDS(sample_ids, "../data/kidney/kidney-map/results/SCENIC/sample_ids.rds")
sub_endothelium <- endothelium[, sample_ids] 

sub_endothelium$location %>% table
cellInfo <- colData(sub_endothelium) %>% 
    as.data.frame() %>% 
    dplyr::select(cell_ids, cell_type, location, mito_percent) %>% 
    dplyr::mutate(cell_types = paste(cell_type, location, sep = "_"))
cellInfo$cell_types %>% unique
expr_mat <- counts(sub_endothelium) %>% as.matrix() %>% as.data.frame()
expr_mat <- expr_mat %>% tibble::rownames_to_column("ensembl")
expr_mat <- expr_mat %>% 
    dplyr::mutate(symbol = idconv(ensembl, from_type = "GENEID", to_type = "SYMBOL", db = "mouse")) %>% 
    dplyr::relocate(symbol, .after = ensembl)
expr_mat <- expr_mat %>% dplyr::filter(!is.na(symbol)) %>% dplyr::select(-ensembl)
expr_mat <- aggregate(expr_mat[, -1], by = list(symbol = expr_mat[, 1]), FUN = "sum")
expr_mat <- expr_mat %>% tibble::column_to_rownames("symbol") %>% as.matrix()
ids <- (nchar(rownames(expr_mat)) >= 1) 
expr_mat <- expr_mat[ids, ]
expr_mat[1:10, 1:10]
write.csv(expr_mat, "../data/kidney/kidney-map/results/SCENIC/expr_mat.csv", 
          row.names = TRUE, quote = F)
# expr_mat <- read.csv("../data/kidney/kidney-map/results/SCENIC/expr_mat.csv")

colVars <- list(CellType = c(
    "Endothelial_Cortex" = "forestgreen", 
    "Endothelial_outer medulla" = "red3", 
    "Endothelial_inner medulla" = "magenta4"
))

# plot.new();legend(0, 1, fill = colVars$CellType,
#                   legend = names(colVars$CellType), 
#                   bty = "n")

saveRDS(cellInfo, "../data/kidney/kidney-map/results/SCENIC/int/cellInfo.rds")
saveRDS(colVars, "../data/kidney/kidney-map/results/SCENIC/int/colVars.rds")
```

```{r}
org <- "mgi"
dbDir <- "/home/yincy/git/data/cisTarget_database/mouse/mm9"
data("defaultDbNames")
dbs <- defaultDbNames[[org]]
dbs
data("motifAnnotations_mgi_v9", package = "RcisTarget")
motifAnnotations_mgi <- motifAnnotations_mgi_v9
ScenicOptions <- initializeScenic(org = org,
                                  dbDir = dbDir, 
                                  dbs = dbs, 
                                  nCores = 6)
ScenicOptions@inputDatasetInfo$cellInfo <- "../data/kidney/kidney-map/results/SCENIC/int/cellInfo.rds"
ScenicOptions@inputDatasetInfo$colVars <- "../data/kidney/kidney-map/results/SCENIC/int/colVars.rds"
saveRDS(ScenicOptions, 
        "../data/kidney/kidney-map/results/SCENIC/int/ScenicOptions.rds")
```

```{r}
genesKetp <- geneFiltering(exprMat = expr_mat, 
                           scenicOptions = ScenicOptions, 
                           minCountsPerGene = 3 * 0.01 * ncol(expr_mat), 
                           minSamples = 0.01 * ncol(expr_mat))

expr_mat <- expr_mat[genesKetp, ]

runCorrelation(exprMat_filtered = expr_mat, 
               scenicOptions = ScenicOptions)
saveRDS(ScenicOptions, "../data/kidney/kidney-map/results/SCENIC/int/ScenicOptions.rds")
```

```{r}
expr_mat <- log1p(expr_mat)
runGenie3(exprMat = expr_mat, scenicOptions = ScenicOptions)
saveRDS(ScenicOptions, "../data/kidney/kidney-map/results/SCENIC/int/ScenicOptions.rds")
```

```{r}
ScenicOptions <- runSCENIC_1_coexNetwork2modules(scenicOptions = ScenicOptions)
ScenicOptions <- runSCENIC_2_createRegulons(scenicOptions = ScenicOptions, coexMethods = c("top5perTarget"))
ScenicOptions <- runSCENIC_3_scoreCells(scenicOptions = ScenicOptions, exprMat = expr_mat)
saveRDS(ScenicOptions, "../data/kidney/kidney-map/results/SCENIC/int/ScenicOptions.rds")
```

```{r}
aucellApp <- plotTsne_AUCellApp(ScenicOptions, expr_mat)
savedSelections <- shiny::runApp(aucellApp)

# Save the modified thresholds:
newThresholds <- savedSelections$thresholds
ScenicOptions@fileNames$int["aucell_thresholds",1] <- "int/newThresholds.Rds"
saveRDS(newThresholds, file=getIntName(ScenicOptions, "aucell_thresholds"))
saveRDS(ScenicOptions, file="../data/kidney/kidney-map/results/SCENIC/int/ScenicOptions.rds") 

ScenicOptions <- runSCENIC_4_aucell_binarize(ScenicOptions)
```

### visualization

```{r}
npcs <- c(5, 15, 30, 100)
pr <- c(5, 15, 30)
ScenicOptions@settings$seed <- 123
fileNames <- tsneAUC(ScenicOptions, aucType="AUC", npcs=npcs, perpl=pr, onlyHighConf=TRUE, filePrefix="int/tSNE_oHC")

tsne_oHC_AUC <- readRDS("int/tSNE_oHC_AUC_50pcs_05perpl.Rds")
cellInfo <- readRDS("../data/kidney/kidney-map/results/SCENIC/int/cellInfo.rds")
tsne_coords <- tsne_oHC_AUC$Y %>% as.data.frame() %>% tibble::rownames_to_column("cell_ids")
tsne_50pc_30pr <- dplyr::left_join(tsne_coords, cellInfo)
tsne_50pc_30pr %>% 
    ggplot(aes(tsne1, tsne2)) +
    geom_point(aes(color = location))


regulon_activity <- readRDS("int/3.4_regulonAUC.Rds")
regulon_activity_cntinuous <- regulon_activity@assays@data$AUC

cellInfo <- readRDS("../data/kidney/kidney-map/results/SCENIC/cortext_outer_inner/int/cellInfo.rds") %>%
    dplyr::arrange(location) %>% 
    dplyr::rename("region" = "location")
regulon_activity_cntinuous <- regulon_activity_cntinuous[, cellInfo$cell_ids]

ggheatmap::ggheatmap(log1p(regulon_activity_cntinuous), 
                     annotation_cols = cellInfo[, 3, drop = F], 
                     cluster_cols = F, 
                     text_show_cols = F, 
                     annotation_color = list(region = c("Cortex" = "green", "outer medulla" = "blue", "inner medulla" = "red")), 
                     color = colorRampPalette(colors = c("black", "goldenrod", "yellow"))(1000), 
                     legendName = "regulon activity")

ggsave("../data/kidney/kidney-map/results/SCENIC/cortex_outer_inner_regulon_activity.tiff")
```


```{r}
binary_regulon_activity <- readRDS("../data/kidney/kidney-map/results/SCENIC/cortext_outer_inner/int/4.2_binaryRegulonActivity_nonDupl.Rds")
cellInfo <- readRDS("../data/kidney/kidney-map/results/SCENIC/cortext_outer_inner/int/cellInfo.rds") %>%
    dplyr::arrange(location) %>% 
    dplyr::rename("region" = "location")

cellInfo <- cellInfo %>% dplyr::filter(cell_ids %in% colnames(binary_regulon_activity))

tiff("../data/kidney/kidney-map/results/SCENIC/cortext_outer_inner/cortex_outer_inner_regulon_activity.tiff", 
     width = 1000, height = 1000)
pheatmap(binary_regulon_activity, 
         cluster_rows = T, 
         cluster_cols = F, 
         annotation_col = cellInfo[, 3, drop = F], 
         annotation_colors = list(region = c("Cortex" = "red", "outer medulla" = "green", "inner medulla" = "blue")), 
         show_colnames = F, 
         color = colorRampPalette(c("white", "black"))(100), 
         legend_breaks = c(0, 1), 
         legend_labels = c("Off", "On"), 
         clustering_method = "ward.D2", 
         fontsize = 15, 
         fontsize_row = 12, 
         treeheight_row = 70)
dev.off()
```


## endothelial Aqp1
```{r}
library(SingleCellExperiment)
library(ggplot2)
library(patchwork)

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")

plotTSNE(sces,
         # colour_by = "cell_type",
         colour_by = idconv("Pecam1", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
         text_by = "cell_type", 
         text_size = 2,
         point_size = 0.2) +
    theme(legend.position = "right") +
    scale_color_continuous(name = "Pecam1(CD31)", type = "viridis") +

plotTSNE(sces,
         # colour_by = "cell_type",
         colour_by = idconv("Cdh5", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
         text_by = "cell_type", 
         text_size = 2,
         point_size = 0.2) +
    theme(legend.position = "right") +
    scale_color_continuous(name = "Cdh5", type = "viridis") +

plotTSNE(sces,
         colour_by = "location",
         # colour_by = idconv("Aqp1", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
         text_by = "cell_type", 
         text_size = 2,
         point_size = 0.2) +
    theme(legend.position = "right") +
    scale_color_discrete(name = "region") +
    guides(color = guide_legend(override.aes = list(size = 3))) +

plotTSNE(sces,
         # colour_by = "cell_type",
         colour_by = idconv("Aqp1", from_type = "SYMBOL", to_type = "GENEID", db = "mouse"),
         text_by = "cell_type", 
         text_size = 2,
         point_size = 0.2) +
    theme(legend.position = "right") +
    scale_color_continuous(name = "Aqp1", type = "viridis") +
    plot_layout(nrow = 2, byrow = T)

ggsave("../data/kidney/kidney-map/results/endothelium/endothelial_Aqp1.tiff", 
       width = 14, height = 14)
```



# macrophages across cortex, outer medulla, inner medulla

```{r}
library(cluster)
library(dplyr)
library(SingleCellExperiment)
library(scuttle)
library(edgeR)
library(limma)
library(AnnotationHub)

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
macrophages <- sces[, sces$level3_cluster == "Macrophages"]
cortex_mac <- macrophages[, macrophages$location == "Cortex"]
out_mac <- macrophages[, macrophages$location == "outer medulla"]
inner_mac <- macrophages[, macrophages$location == "inner medulla"]

set.seed(107)
cortex_mac_cluster <- clara(reducedDim(cortex_mac, "corrected"), 
                            k = 3, 
                            metric = "euclidean", 
                            stand = F, 
                            samples = 50, 
                            sampsize = 200, 
                            cluster.only = TRUE)
cortex_mac_cluster %>% table
cortex_mac$agg_cluster <- cortex_mac_cluster[colnames(cortex_mac)]


set.seed(108)
out_mac_cluster <- clara(reducedDim(out_mac, "corrected"), 
                         k = 3, 
                         metric = "euclidean", 
                         stand = F, 
                         samples = 50, 
                         sampsize = 200, 
                         cluster.only = T)
out_mac_cluster %>% table
out_mac$agg_cluster <- out_mac_cluster[colnames(out_mac)]


set.seed(109)
inner_mac_cluster <- clara(reducedDim(inner_mac, "corrected"), 
                           k = 3, 
                           metric = "euclidean", 
                           stand = F, 
                           samples = 50, 
                           sampsize = 200,
                           cluster.only = T)
inner_mac_cluster %>% table
inner_mac$agg_cluster <- inner_mac_cluster[colnames(inner_mac)]
```

```{r}
cortex_mac_agg <- aggregateAcrossCells(cortex_mac, 
                                       ids = cortex_mac$agg_cluster, 
                                       statistics = "sum", 
                                       use.assay.type = "counts")
out_mac_agg <- aggregateAcrossCells(out_mac, 
                                    ids = out_mac$agg_cluster, 
                                    statistics = "sum", 
                                    use.assay.type = "counts")

inner_mac_agg <- aggregateAcrossCells(inner_mac, 
                                      ids = inner_mac$agg_cluster, 
                                      statistics = "sum", 
                                      use.assay.type = "counts")

counts <- Reduce(cbind, list(counts(cortex_mac_agg), counts(out_mac_agg), counts(inner_mac_agg)))
colnames(counts) <- paste(rep(c("cortex","outer_medulla", "inner_medulla"), each = 3), 1:3, sep = "_")

group <- factor(rep(c("cortex", "outer medulla", "inner medulla"), each = 3), 
                levels = c("cortex", "outer medulla", "inner medulla"))

ah <- AnnotationHub()
query(ah, c("EnsDb", "Mus musculus"))
ensdb <- ah[["AH109655"]]
gene_df <- data.frame(ensembl = rownames(counts), 
                      symbol = mapIds(ensdb, keys = rownames(counts), keytype = "GENEID", column = "SYMBOL"))

y <- DGEList(counts = counts, 
             group = group, 
             samples = data.frame(sample = rep(c("cortex", "outer medulla", "inner medulla"), each = 3)), 
             genes = gene_df)

keep <- filterByExpr(y, min.count = 5)
keep %>% table
y <- y[keep, , keep.lib.size = F]
y <- calcNormFactors(y)
y$samples

design <- model.matrix(~ 0 + y$samples$group)
colnames(design) <- c("cortex", "outer_medulla", "inner_medulla")
comtrast_matrix <- makeContrasts(cortex_vs_inner = cortex - inner_medulla, 
                                 outer_vs_inner = outer_medulla - inner_medulla, 
                                 levels = colnames(design))

v <- voom(y, design = design, plot = TRUE)
vfit <- lmFit(v, design = design)
vfit <- contrasts.fit(vfit, contrasts = comtrast_matrix)
efit <- eBayes(vfit)
efit %>% decideTests() %>% summary()
cortex_to_inner_mac <- topTable(efit, number = Inf, coef = "cortex_vs_inner")
write.csv(cortex_to_inner_mac, 
          "../data/kidney/kidney-map/results/cortex_to_inner_mac_DEGs.csv", 
          row.names = F, quote = F)

outer_to_inner_mac <- topTable(efit, number = Inf, coef = "outer_vs_inner")
write.csv(outer_to_inner_mac, 
          "../data/kidney/kidney-map/results/outer_to_inner_mac_GEDs.csv", 
          row.names = F, quote = F)
```

```{r}
library(biomaRt)
library(fgsea)
stats_cortex_inner <- setNames(cortex_to_inner_mac$logFC, cortex_to_inner_mac$ensembl)
stats_outer_to_inner <- setNames(outer_to_inner_mac$logFC, outer_to_inner_mac$ensembl)

mmart <- useEnsembl("ensembl", dataset = "mmusculus_gene_ensembl")
searchAttributes(mmart, "GO")
gene_df <- getBM(attributes = c("go_id", "ensembl_gene_id", "name_1006", "namespace_1003", "go_linkage_type"), 
                 filters = "ensembl_gene_id", 
                 values = cortex_to_inner_mac$ensembl, 
                 mart = mmart)
gs <- split(gene_df$ensembl_gene_id, gene_df$name_1006)

msigdbr::msigdbr_collections()
gs <- msigdbr::msigdbr(species = "Mus musculus", category = "H")
gs <- split(gs$ensembl_gene, gs$gs_name)
cortex_to_inner_gsea <- fgsea(pathways = gs, 
                              stats = stats_cortex_inner,
                              minSize = 10, 
                              maxSize = 1000, 
                              eps = 0)
cortex_to_inner_gsea <- cortex_to_inner_gsea %>% as.data.frame() %>% dplyr::arrange(-NES, pval)
saveRDS(cortex_to_inner_gsea, 
          "../data/kidney/kidney-map/results/cortex_to_inner_mac_fgsea.rds")

outer_to_inner_gsea <- fgsea(pathways = gs, 
                             stats = stats_outer_to_inner, 
                             minSize = 10, 
                             maxSize = 1000, 
                             eps = 0)
outer_to_inner_gsea <- outer_to_inner_gsea %>% as.data.frame() %>% dplyr::arrange(-NES, pval)
saveRDS(outer_to_inner_gsea, 
        "../data/kidney/kidney-map/results/outer_to_inner_mac_fgsea.rds")
```

# pubmed

```{r}
library(ggplot2)
library(magrittr)

pubmed <- read.csv("data/PubMed_Timeline_Results_by_Year.csv")

pubmed %>% 
    dplyr::filter(Year > 2008) %>% 
    ggplot(aes(Year, Count)) +
    geom_bar(stat = "identity") +
    geom_text(aes(y = Count + 100, label = Count)) +
    theme_classic() +
    scale_y_continuous(name = "# papers per year") +
    scale_x_continuous(breaks = seq(2003, 2023, 2), labels = seq(2003, 2023, 2)) +
    theme(axis.title = element_text(size = 15), 
          panel.grid.major.y = element_line(linetype = 2, linewidth = 0.2, color = "grey70")) 

ggsave("../data/kidney/kidney-map/results/pubmed.tiff",
       width = 10, height = 6)
```

# ion channel and solute carriers

```{r}
library(biomaRt)
library(dplyr)
library(org.Mm.eg.db)
library(stringr)
library(stringr.plus)
entrez <- keys(org.Mm.eg.db)
mmart <- useMart(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
# searchAttributes(mmart, c("description"))
gene_df <- getBM(attributes = c("entrezgene_id", "mgi_symbol", "mgi_description", "description"),
                 filters = "entrezgene_id", 
                 values = entrez,
                 mart = mmart)

# gene_df %>% dplyr::filter(grepl("aquaporin", mgi_description))
# gene_df %>% dplyr::filter(mgi_symbol == "Slc34a3")

# Sodium
sodium <- gene_df %>% 
    dplyr::filter(grepl("sodium", mgi_description), grepl("(solute carrier|sodium channel)", description), !(mgi_symbol %in% c("Sclt1", "Scnm1"))) %>% 
    dplyr::pull(mgi_symbol) %>% sort %>% unique

# Potassium
potassium <- gene_df %>% dplyr::filter(grepl("potassium", mgi_description), grepl("potassium", description)) %>% dplyr::pull(mgi_symbol) %>% sort %>% unique

# magnesium
magnesium <- gene_df %>% dplyr::filter(grepl("magnesium", mgi_description), grepl("transport", mgi_description)) %>% dplyr::pull(mgi_symbol) %>% sort %>% unique()

# calcium
gene_df_filtered <- gene_df %>% dplyr::filter(grepl("calcium", mgi_description))
ids <- grepl("(calcium channel|calcium-sensing receptor|neuronal calcium sensor|solute carrier family|mitochondrial calcium uniporter|mitochondrial calcium uptake|calcium homeostasis modulator|calcium release activated channel regulator|calcium-activated channel|mitochondrial calcium regulator)", gene_df_filtered$mgi_description)
ids %>% table
calcium <- gene_df_filtered[ids, ] %>% dplyr::pull(mgi_symbol) %>% sort %>% unique

# phosphate
ids <- grepl("(\\b|-|_)phosphate(\\b|-|_)", gene_df$mgi_description, ignore.case = T)
gene_df[ids, ]

gene_df %>% dplyr::filter(grepl("(\\b|-|_)phosphate(\\b|-|_)", gene_df$mgi_description, ignore.case = T))
phosphate <- gene_df[ids, ] %>%
    dplyr::filter(grepl("(\\breceptor|\\btransporter|\\bcarrier|\\bcotransporter|\\btransfer\\b|solute carrier family\\b)",  mgi_description, ignore.case = F)) %>% 
    dplyr::pull(mgi_symbol) %>% sort %>% unique()

# Chloride
chloride <- gene_df %>% dplyr::filter(grepl("chloride", mgi_description)) %>% dplyr::pull(mgi_symbol) %>% sort %>% unique()

# water channal, aquaporin
aquaporin <- gene_df %>% dplyr::filter(grepl("aquaporin", mgi_description), grepl("aquaporin", description)) %>% dplyr::pull(mgi_symbol) %>% sort

# Glucose
ids <- grepl("glucose", gene_df$mgi_description) 
glucose <- gene_df[ids, ] %>% dplyr::filter(grepl("solute carrier family", mgi_description)) %>% dplyr::pull(mgi_symbol) %>% sort %>% unique()

# Amino acids
ids <- grepl("\\bamino\\b", gene_df$mgi_description) 
amino_acids <- gene_df[ids, ] %>% dplyr::filter(grepl("solute carrier family", mgi_description)) %>% dplyr::pull(mgi_symbol) %>% sort %>% unique()


transport_list <- list(
    sodium = data.frame(symbol = sodium), 
    potassium = data.frame(symbol = potassium), 
    magnesium = data.frame(symbol = magnesium), 
    calcium = data.frame(symbol = calcium), 
    phosphate = data.frame(symbol = phosphate), 
    chloride = data.frame(symbol = chloride), 
    aquaporin = data.frame(symbol = aquaporin), 
    glucose = data.frame(symbol = glucose), 
    amino_acids = data.frame(symbol = amino_acids)
)
library(AnnotationHub)
ah <- AnnotationHub()
query(ah, c("EnsDb", "Mus musculus"))
ensdb <- ah[["AH109655"]]


transport_list <- lapply(transport_list, function(x){
    x = data.frame(symbol = x$symbol, 
                   ensembl = mapIds(ensdb, keys = x$symbol, keytype = "SYMBOL", column = "GENEID"))
})
saveRDS(transport_list, "../data/kidney/kidney-map/results/transport_channel/transport_list.rds")
transport_list <- readRDS("../data/kidney/kidney-map/results/transport_channel/transport_list.rds")
```

```{r}
library(scuttle)
library(pheatmap)

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
tubule_sces <- sces[, grepl("(^PTS|^LOH|^DCT|^CNT|_IC|_PC)", sces$cell_type)]

tubule_agg <- aggregateAcrossCells(tubule_sces, 
                                   ids = tubule_sces$cell_type, 
                                   statistics = "mean", 
                                   use.assay.type = "logcounts")
logcounts_list <- lapply(transport_list, function(x){
    tubule_agg[x[[2]], ] %>% logcounts
})

logcounts_list <- lapply(logcounts_list, function(x){
    ids = (rowSums(x) > 0)
    x = x[ids, ]
    rownames(x) = mapIds(ensdb, keys = rownames(x), keytype = "GENEID", column = "SYMBOL")
    return(x)
})

# reorder columns
ro <- c("PTS1", "PTS2", "PTS3", "LOH_DTL1", "LOH_DTL2", "LOH_DTL3",
        "LOH_ATL", "LOH_MTAL", "LOH_CTAL", "DCT", "CNT", "CCD_IC", 
        "OMCD_IC", "IMCD_IC", "CCD_PC", "OMCD_PC", "IMCD_PC")
logcounts_list <- lapply(logcounts_list, function(x){
    x = x[, ro]
    x = as.data.frame(x) %>% tibble::rownames_to_column("symbol")
    return(x)
})
```

```{r}
library(purrr)

lens <- logcounts_list %>% sapply(nrow) %>% cumsum()

mtx <- map_df(logcounts_list, bind_rows)
rns <- mtx$symbol
mtx <- mtx[, -1] %>% as.matrix()
rownames(mtx) <- seq_len(nrow(mtx))
breaks <- seq(range(mtx)[[1]], range(mtx)[[2]], by = 0.01)

q90 <- quantile(mtx, probs = 0.9)

for(i in seq_len(ncol(mtx))){
    for(j in seq_len(nrow(mtx))){
        if(mtx[j, i] <= q90){mtx[j, i] = 0}
    }
}

ann_row <- data.frame(Class = rep(c("Sodium", "Potassium", "Magnesium", 
                                   "Calcium", "Phosphate", "Chloride", 
                                   "Water Channel ", "Glucose", "Amino acids"), times = sapply(logcounts_list, nrow)), 
                      row.names = seq_len(nrow(mtx)))
ann_color <- list(Class = setNames(RColorBrewer::brewer.pal(9, "Set1"), unique(ann_row$Class)))

tiff("../data/kidney/kidney-map/results/transport_channel/transport.tiff", height = 1500 * 1.2, width = 5000)
pheatmap(t(mtx), 
         breaks = breaks, 
         cluster_rows = F, 
         cluster_cols = F, 
         gaps_col = lens[-length(lens)], 
         color = colorRampPalette(c("white", "black"))(length(breaks)),
         show_rownames = T,
         fontsize_row = 50, 
         fontsize_col = 15,
         labels_col = rns, 
         annotation_col = ann_row, 
         annotation_colors = ann_color[1], 
         fontsize = 50, 
         legend_breaks = c(0, 5.5), 
         legend_labels = c("low", "high"))
dev.off()
```

