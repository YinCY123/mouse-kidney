---
title: "06_analysis"
author: "yincy"
date: 2023/05/06
format: html
editor: visual
---

# different resolution levels of cell types

```{r}
library(magrittr)
library(scran)
library(purrr)
library(scater)
library(SingleCellExperiment)

sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")

# level 1 clusters
colData(sces)$level1_cluster <- map_vec(colData(sces)$cell_type, .f = function(x){
    switch(x, 
           "Endothelial" = "Endothelium", 
           "Afferent/Efferent Endothelial" = "Endothelium", 
           "Glomerular Endothelial" = "Endothelium", 
           "Spinal Endothelial" = "Endothelium", 
           "Parietal Epithelial" = "Parietal Epithelial",
           "B Cells" = "Immune", 
           "Cd4 T Cells" = "Immune", 
           "Cd8 T Cells" = "Immune", 
           "NK Cells" = "Immune", 
           "Monocytes" = "Immune", 
           "Dendritic Cells" = "Immune", 
           "Macrophages" = "Immune", 
           "Sympathetic Neurons" = "Neurons", 
           "Sensory Neurons" = "Neurons", 
           "Satellite Glia A" = "Glia", 
           "Satellite Glia B" = "Glia", 
           "Schwann Cells" = "Glia", 
           "Fibroblast" = "Interstitial", 
           "VSMC" = "Interstitial", 
           "Pericytes" = "Interstitial", 
           "Podocytes" = "Interstitial", 
           "Mesangial Cells A" = "Interstitial", 
           "Mesangial Cells B" = "Interstitial", 
           "PTS1" = "Proximal Tubule", 
           "PTS2" = "Proximal Tubule", 
           "PTS3" = "Proximal Tubule", 
           "LOH_DTL1" = "LOH", 
           "LOH_DTL2" = "LOH", 
           "LOH_DTL3" = "LOH", 
           "LOH_ATL" = "LOH", 
           "LOH_MTAL" = "LOH", 
           "LOH_CTAL" = "LOH", 
           "DCT" = "Distal Tubule", 
           "CNT" = "Distal Tubule", 
           "CCD_IC" = "Collecting Duct", 
           "OMCD_IC" = "Collecting Duct", 
           "IMCD_IC" = "Collecting Duct", 
           "CCD_PC" = "Collecting Duct", 
           "OMCD_PC" = "Collecting Duct", 
           "IMCD_PC" = "Collecting Duct")
})
sces$level1_cluster <- factor(sces$level1_cluster, 
                              levels = c("Endothelium", "Parietal Epithelial", "Proximal Tubule", 
                                         "LOH", "Distal Tubule", "Collecting Duct", "Interstitial", 
                                         "Immune", "Neurons", "Glia"))

# level 2 clusters
colData(sces)$level2_cluster <- sapply(colData(sces)$cell_type, FUN = function(x){
    switch(x, 
           "Endothelial" = "Endothelium", 
           "Afferent/Efferent Endothelial" = "Endothelium", 
           "Glomerular Endothelial" = "Endothelium", 
           "Spinal Endothelial" = "Endothelium", 
           "Parietal Epithelial" = "Parietal Epithelial",
           "B Cells" = "B Cells", 
           "Cd4 T Cells" = "T Cells", 
           "Cd8 T Cells" = "T Cells", 
           "NK Cells" = "NK Cells", 
           "Monocytes" = "Monocytes", 
           "Dendritic Cells" = "Dendritic Cells", 
           "Macrophages" = "Macrophages", 
           "Sympathetic Neurons" = "Sympathetic Neurons", 
           "Sensory Neurons" = "Sensory Neurons", 
           "Satellite Glia A" = "Satellite Glia", 
           "Satellite Glia B" = "Satellite Glia", 
           "Schwann Cells" = "Schwann Cells", 
           "Fibroblast" = "Fibroblast", 
           "VSMC" = "VSMC", 
           "Pericytes" = "Pericytes", 
           "Podocytes" = "Podocytes", 
           "Mesangial Cells A" = "Mesangial Cells", 
           "Mesangial Cells B" = "Mesangial Cells", 
           "PTS1" = "Proximal Tubule", 
           "PTS2" = "Proximal Tubule", 
           "PTS3" = "Proximal Tubule", 
           "LOH_DTL1" = "dLOH", 
           "LOH_DTL2" = "dLOH", 
           "LOH_DTL3" = "dLOH", 
           "LOH_ATL" = "aLOH", 
           "LOH_MTAL" = "aLOH", 
           "LOH_CTAL" = "aLOH", 
           "DCT" = "Distal Tubule", 
           "CNT" = "Distal Tubule", 
           "CCD_IC" = "CD_IC", 
           "OMCD_IC" = "CD_IC", 
           "IMCD_IC" = "CD_IC", 
           "CCD_PC" = "CD_PC", 
           "OMCD_PC" = "CD_PC", 
           "IMCD_PC" = "CD_PC")
})
sces$level2_cluster <- factor(sces$level2_cluster, 
                              levels = c("Endothelium", "Parietal Epithelial", "Proximal Tubule", 
                                         "dLOH", "aLOH", "Distal Tubule", "CD_IC", "CD_PC",
                                         "Fibroblast", "VSMC", "Pericytes", "Mesangial Cells", "Podocytes", 
                                         "Monocytes", "Dendritic Cells", "Macrophages", "NK Cells", 
                                         "T Cells", "B Cells", 
                                         "Sensory Neurons", "Sympathetic Neurons", 
                                         "Satellite Glia", "Schwann Cells"))


# level 3 cluster
sces$level3_cluster <- factor(sces$cell_type, 
                              levels = c("Endothelial", "Afferent/Efferent Endothelial", "Glomerular Endothelial", 
                                         "Spinal Endothelial", "Parietal Epithelial", "PTS1", 
                                         "PTS2", "PTS3", "LOH_DTL1", "LOH_DTL2", "LOH_DTL3", "LOH_ATL", 
                                         "LOH_MTAL", "LOH_CTAL", "DCT", "CNT", "CCD_IC", "OMCD_IC", 
                                         "IMCD_IC", "CCD_PC", "OMCD_PC", "IMCD_PC", 
                                         "Fibroblast", "VSMC", "Pericytes", "Mesangial Cells A", 
                                         "Mesangial Cells B", "Podocytes", "Monocytes", "Dendritic Cells", 
                                         "Macrophages", "NK Cells", "Cd4 T Cells", "Cd8 T Cells", "B Cells", 
                                         "Sensory Neurons", "Sympathetic Neurons", 
                                         "Satellite Glia A", "Satellite Glia B", "Schwann Cells"))

saveRDS(sces, "../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
```

## cell type relationships

```{r}
levels_relationship <- data.frame(
    level0_cell_types = "kidney",
    level1_cell_types = c(rep("Endothelium", 4), "Parietal Epithelial ", rep("Proximal Tubule", 3),
                          rep("LOH", 6), rep("Distal Tubule", 2), rep("Collecting Duct", 6), 
                          rep("Interstitial", 6), rep("Immune", 7), rep("Neurons", 2), rep("Glia", 3)),
    
    level2_cell_types = c(rep("Endothelium ", 4), "Parietal  Epithelial ", rep("Proximal Tubule ", 3), 
                          rep("dLOH", 3), rep("aLOH", 3), rep("Distal Tubule ", 2), rep("CD_IC", 3), 
                          rep("CD_PC", 3), "Fibroblast", "VSMC", "Pericytes", rep("Mesangial Cells", 2),
                          "Podocytes", "Monocytes", "Dendritic Cells", "Macrophages", 
                          "NK Cells", rep("T Cells", 2), "B Cells", "Sensory Neurons", 
                          "Sympathetic Neurons", rep("Satellite Glia", 2), "Schwann Cells"),
    
    level3_cell_types = c("Endothelial", "Afferent/Efferent Endothelial", "Glomerular Endothelial", 
                          "Spinal Endothelial", " Parietal Epithelial  ", "PTS1", 
                          "PTS2", "PTS3", "LOH_DTL1", "LOH_DTL2", "LOH_DTL3", "LOH_ATL", 
                          "LOH_MTAL", "LOH_CTAL", "DCT", "CNT", "CCD_IC", "OMCD_IC", 
                          "IMCD_IC", "CCD_PC", "OMCD_PC", "IMCD_PC", 
                          "Fibroblast ", "VSMC ", "Pericytes ", "Mesangial Cells A", 
                          "Mesangial Cells B", "Podocytes ", "Monocytes ", "Dendritic Cells ", 
                          "Macrophages ", "NK Cells ", "Cd4 T Cells", "Cd8 T Cells", "B Cells ", 
                          "Sensory Neurons ", "Sympathetic Neurons ", 
                          "Satellite Glia A", "Satellite Glia B", "Schwann Cells ")
)
levels_relationship
levels_relationship <- levels_relationship %>% dplyr::relocate(level0_cell_types)
```

```{r}
# visualize cell type relationships
library(tidygraph)
library(ggraph)
library(igraph)

l1 <- levels_relationship[, 1:2] %>% magrittr::set_colnames(value = c("from", "to"))
l2 <- levels_relationship[, 2:3] %>% magrittr::set_colnames(value = c("from", "to"))
l3 <- levels_relationship[, 3:4] %>% magrittr::set_colnames(value = c("from", "to"))
df <- rbind(l1, l2, l3)
df <- df %>% dplyr::distinct(from, to, .keep_all = TRUE)

g <- graph_from_data_frame(d = df, directed = TRUE)
tg <- as_tbl_graph(g)
tg <- tg %>% 
    mutate(level = ifelse(.N()$name %in% levels_relationship$level1_cell_types, "1", 
                          ifelse(.N()$name %in% levels_relationship$level2_cell_types, "2", 
                                 ifelse(.N()$name == "kidney", "0", "3"))), 
           root = node_is_root()) 
ly <- create_layout(tg, layout = "dendrogram")

p_cluster_relationships <- ly %>% 
    ggraph(layout = "dendrogram") + 
    geom_node_point(aes(filter = level == 0), size = 5) +
    geom_node_point(aes(filter = level != 0, color = level), size = 3) +
    geom_edge_diagonal() +
    geom_node_text(aes(filter = level == 0, label = name), size = 5, nudge_x = 0, nudge_y = -0.4) +
    geom_node_text(aes(filter = level %in% c(1, 2), label = name), size = 3, nudge_x = 0.5) +
    geom_node_text(aes(x = x, y = y - 0.1, label = name, filter = level == 3), size = 2.5, hjust = 0) +
    coord_flip() +
    scale_y_reverse(expand = c(0.3, 0.3)) +
    scale_x_reverse() +
    scale_color_discrete(name = "cluster levels") +
    theme(legend.position = "top", 
          panel.background = element_blank())

saveRDS(p_cluster_relationships, "../data/kidney/kidney-map/results/p_cluster_relationships.rds")
```

# marker gene detection

```{r}
hvgs <- readRDS("../data/kidney/kidney-map/integrated_data/hvgs.rds")
set.seed(104)
fmarker1 <- findMarkers(sces, 
                        groups = sces$level1_cluster, 
                        test.type = "wilcox", 
                        pval.type = "all", 
                        min.prop = 0.25, 
                        direction = "up", 
                        subset.row = hvgs, 
                        lfc = log(2, 2))
saveRDS(fmarker1, "../data/kidney/kidney-map/results/markers/level1_markers.rds")

set.seed(105)
fmarker2 <- findMarkers(sces, 
                        groups = sces$level2_cluster, 
                        test.type = "wilcox", 
                        pval.type = "all", 
                        min.prop = 0.25, 
                        direction = "up",
                        subset.row = hvgs, 
                        lfc = log(1.5, 2))
saveRDS(fmarker2, "../data/kidney/kidney-map/results/markers/level2_markers.rds")

set.seed(106)
fmarker3 <- findMarkers(sces, 
                        groups = sces$level3_cluster, 
                        test.type = "wilcox", 
                        pval.type = "all", 
                        min.prop = 0.1, 
                        direction = "up", 
                        subset.row = hvgs)
saveRDS(fmarker3, "../data/kidney/kidney-map/results/markers/level3_markers.rds")
```

```{r}
fmarker3 <- readRDS("../data/kidney/kidney-map/results/markers/level3_markers.rds")
fmarker3 %>% names
source("functions/idconv.R")
fmarker4[[16]] %>% rownames() %>% head(50) %>% idconv(from_type = "GENEID", to_type = "SYMBOL")
```

```{r}
plotExpression(sces, 
               # features = fmarker4[[7]] %>% rownames() %>% .[1:50],
               features = idconv("Dkk1"),
               x = "level2_cluster", 
               ncol = 2) +
    theme(axis.text.x = element_text(angle = -60, hjust = 0, vjust = 0.5))

ggsave("find_markers.pdf", height = 100, width = 15, limitsize = F)
idconv("ENSMUSG00000005716", from_type = "GENEID", to_type = "SYMBOL")
```

```{r}
for(name in names(fmarker2)){
    plotExpression(sces, 
                   features = fmarker2[[name]] %>% rownames() %>% .[1:50], 
                   x = "level2_cluster", 
                   ncol = 2) +
        theme(axis.text.x = element_text(angle = -60, hjust = 0, vjust = 0.5))
    
    ggsave(paste("level2_clusters/", name, "_cluster.pdf", sep = ""), height = 100, width = 10, limitsize = F)
}
```

## plot marker genes

### level 1 markers

```{r}
library(scater)
library(tidyr)
library(dplyr)
source("functions/idconv.R")

marker_themes <- theme(panel.grid.minor = element_blank(), 
                       panel.background = element_blank(),
                       panel.grid.major.x = element_line(linetype = 2, linewidth = 0.2, colour = "grey70"),
                       axis.ticks = element_line(linewidth = 0.2),
                       axis.text.x = element_text(angle = -40, hjust = 0, vjust = 0.5)) 

level1_markers <- list(
    "Endothelium" = c("Pecam1", "Ly6c1", "Kdr", "Cdh5", "Flt1", "Emcn", "Sox18",
                      "Egfl7", "Gimap6", "Fabp4", "Esam", "Rsad2", "Adgrl4", 
                      'Cd300lg', "Ctla2a", "Icam2", "Fam167b", "Mmrn2", "Tek", "Ramp3", "Tie1"),
    "Parietal Epithelial" = c("Cp", "C3", "Efemp1", "Stc2", "Ackr3"),
    "Proximal Tubule" = c("Slc34a1", "Acsm2", "Miox", "Ass1", "Akr1c21", "Keg", "Spink1", "Fbp1", "Ttc36"),
    "LOH" = c("Slc12a1", "Sptssb", "Slc5a3", "Kng2", "Bok", "Bst"), 
    "Distal Tubule" = c("Slc12a3", "Pgam2", "Tmem52b", "Emx1", "Klk1", "Calb1", "S100g"),
    "Collecting Duct" = c("Aqp2", "Aqp3", "Aqp4", "Avpr2", "Hsd11b2", "Spink8", "Ptger1", "Muc1"),
    "Interstitial" = c("Selenop", "Cdkn1c", "Gpx4-ps2", "Synpo", "Clic3", "Mafb", "H2-Q6", "Dpp4", "Tcf21"),
    "Neurons" = c("Nefl", "Snap25", "Stmn2", "Uchl1", "Tppp3", "Prph", 
                  "Nefm", "Nefh", "Tubb3", "Stmn3", "Pcsk1n", "Gng3", 
                  "Map1b", "Ndrg4", "Nefm", "Snap25", "Rtn1", "Acot7", "Snrpn", "Gng3"),
    "Glia" = c("Plp1", "Mbp", "Gpm6b", "Mpz", "Cnp", "Art3"),
    "Immune" = c("Ptprc", "Lcp1", "Laptm5", "Coro1a", "Ctss", "Cd52", "Cd53", "Cd48")
)

level1_df <- makePerCellDF(sces, features = idconv(sapply(level1_markers, "[[", 1)), use.dimred = F) %>% 
    pivot_longer(cols = starts_with("ENS"), names_to = "ensembl", values_to = "logcounts")
level1_df$ensembl <- factor(level1_df$ensembl, levels = idconv(sapply(level1_markers, "[[", 1)))
lb <- as_labeller(setNames(sapply(level1_markers, "[[", 1), idconv(sapply(level1_markers, "[[", 1))))

p_level1 <- level1_df %>% 
    ggplot(aes(level1_cluster, logcounts)) +
    geom_violin(aes(fill = level1_cluster), color = NA, scale = "width", show.legend = F) +
    facet_wrap(vars(ensembl), 
               ncol = 1, 
               strip.position = "right", 
               labeller = lb, 
               scales = "free_y") +
    scale_x_discrete(name = NULL) +
    scale_y_continuous(name = NULL) +
    marker_themes

saveRDS(p_level1, "../data/kidney/kidney-map/results/markers/p_level1_markers.rds")
```

### level2 markers

```{r}
level2_markers <- list(
    "Endothelium" = c("Pecam1", "Ly6c1", "Kdr", "Cdh5", "Flt1", "Emcn", "Sox18",
                      "Egfl7", "Gimap6", "Fabp4", "Esam", "Rsad2", "Adgrl4", 
                      'Cd300lg', "Ctla2a", "Icam2", "Fam167b", "Mmrn2", "Tek", "Ramp3", "Tie1"),
    "Parietal Epithelial" = c("Cp", "C3", "Efemp1", "Stc2", "Ackr3"),
    "Proximal Tubule" = c("Slc34a1", "Acsm2", "Miox", "Ass1", "Akr1c21", "Keg", "Spink1", "Fbp1", "Ttc36"),
    "dLOH" = c("Bst1", "Pitx2"),
    "aLOH" = c("Slc12a1", "Sptssb", "Ptger3"),
    "Distal Tubule" = c("Slc12a3", "Calb1", "S100g", "Tmem52b", "Pgam2", "Emx1", "Cwh43"),
    "CD_IC" = c("Atp6v1g3", "Atp6v0a4", "Atp6v1c2", "Atp6v1b1", "Atp6v0d2", "Rhbg", "Hepacam2", 
                "Foxi1", "Tmem61", "Dmxl1", "Fam13a", "Rnf152", "Itpr2", "Oxgr1", "Aqp6",
                "Slc4a1", "Slc26a4", "Hmx2", "Guca2a", "Serpinb9"),
    "CD_PC" = c("Aqp2", "Avpr2", "Aqp4", "Ptger1", "Muc20", "Muc1",
                "Hsd11b2", "Aqp3"),
    "Monocytes" = c("Sirpb1c",  "Plac8", "Lst1", "Msrb1", "Ccl6", "Cd300a", 
                    "Ifitm6", "Clec4a1", "Clec4a3", "Hp"),
    "Dendritic Cells" = c("Cd209a", "Clec10a", "Slamf7"), 
    "Macrophages" = c("C1qa", "C1qb", "C1qc", "Cd14", "Lilra5", "Hpgd", "Adgre1", "P2ry6",
                      "Slamf9", "Cxcl16", "Cd72", "Ms4a7", "C5ar1", "C3ar1"), 
    "NK Cells" = c("Gzma", "Gzmb", "Ncr1", "Klrk1", "Nkg7", "Klrb1c", "Klre1", "Klrc2", "Cd7", 
                   "Il2rb", 'Ctsw', "Klra9", "Txk", "Klrc1", "Klra8", "Cma1", "Klra4"), 
    "T Cells" = c("Cd3d", "Cd3g", "Cd3e", "Ms4a6b", "Lat", "Cd28", "Cd8b1", "Cxcr6", "Cd8a", "Cd5"),
    "B Cells" = c("Cd79a", "Cd79b", "Ly6d", "Ms4a1", 'Fcmr', "Bank1", "Siglecg", 
                  'Mzb1', "Fcrla", "Fcer2a", "Cd19", "Tnfrsf13c", "Vpreb3", "Cd22", "Hvcn1"), 
    "Sensory Neurons" = c("Calca", "Fstl1", "Tac1", "Ano3", "Fgf13", "Ppp1r1c", "Calcb", "Rbfox3", "Grik1"),
    "Sympathetic Neurons" = c("Dbh", "Npy", "Th", "Scn3a", "Maoa", "Slc18a2", "Slc7a14", "mt-Tp", "Ntrk1", "Phf24", 
                              "Ache", "Plxna4", "Tcaf1", "Syn2", "Arfgef3", "Slc6a2", "Syt1", "Dgkh"),
    "Satellite Glia" = c("Fabp7", "Ednrb", "Ttyh1", "Gpr37l1", "Mmd2", "Fbln2", "Entpd2", "Bcan"), 
    "Schwann Cells" = c("Ncmap", "Prx", "Secisbp2l", "Pllp", "Fam178b", "Ugt8a", "Ogn", 
                        "Fa2h", "Mlip", "Mag", "Slc36a2", "Mfap5", "Drp2"), 
    "Pericytes" = c("Higd1b", "Ephx3", "Tbx3os1", "Cspg4", "Pdgfrb", "Ephx3", "Ngf", "1500009L16Rik"),
    "VSMC" = c("Cnn1", "Nkx3-1", "Ptgis", "Pln", "Tcap", "Sh3bgr"),
    "Fibroblast" = c("Krt19", "Krt15", "Cbr2", "Upk1b", "Dcn", "Trim29",  "Krt5", "Egfl6",  "Gsdmc2"),
    "Mesangial Cells" = c("Sfrp2", "Dkk2", "Septin4",  "Ccn2", "Adamts5", "Septin4", "Itga8", "Nt5e", "Cpm", "Ccdc80"),
    "Podocyte" = c("Nphs2", "Clic3", "Nphs1", "Podxl", "Cldn5",  "Dpp4", "Mafb",
                   "Hs3st6", "Tcf21", "H2-Q6", "Sema3g", 
                   "Rhpn1", "Gm7658", "Ptpro", "Ripor1"))

level2_df <- makePerCellDF(sces, features = idconv(sapply(level2_markers, "[[", 1)), use.dimred = F) %>% 
    pivot_longer(cols = starts_with("ENS"), names_to = "ensembl", values_to = "logcounts")
level2_df$ensembl <- factor(level2_df$ensembl, levels = idconv(sapply(level2_markers, "[[", 1)))

lb <- as_labeller(setNames(sapply(level2_markers, "[[", 1), idconv(sapply(level2_markers, "[[", 1))))
p_level2 <- level2_df %>% 
    ggplot(aes(level2_cluster, logcounts)) +
    geom_violin(aes(fill = level2_cluster), color = NA, scale = "width", show.legend = F) +
    facet_wrap(vars(ensembl), 
               ncol = 1, 
               strip.position = "right", 
               labeller = lb,
               scales = "free_y") +
    scale_x_discrete(name = NULL) +
    scale_y_continuous(name = NULL) +
    marker_themes

saveRDS(p_level2, "../data/kidney/kidney-map/results/markers/p_level2_markers.rds")
```

### level 3 markers

```{r}
level3_markers <- list(
    "Endothelium" = c("Pecam1"), 
    "Parietal Epithelial" = c("ccdc198"), 
    "Proximal Tubule" = c("Slc34a1"), 
    "dLOH" = c("Bst1"), 
    "aLOH" = c("Slc12a1"), 
    "Distal Tubule" = c("Slc12a3"), 
    "CD_IC" = c("Atp6v1g3"), 
    "CD_PC" = c("Aqp2"), 
    "Fibroblast" = c("Krt19"), 
    "VSMC" = c("Cnn1"), 
    "Pericytes" = c("Cspg4"), 
    "Podocyte" = c("Clic3"), 
    "Mesangial Cells A" = c("Cebpb"), 
    "Mesangial Cells B" = c("Rn7sk"), 
    "Sensory Neurons" = c("Calca"), 
    "Sympathetic Neurons" = c("Dbh"), 
    "Satellite Glia A" = c("Fabp7"), 
    "Satellite Glia B" = c("Scn7a", "Entpd2", 'Col3a1', "C4b"), 
    "Schwann Cells" = c("Ncmap"), 
    "Monocytes" = c("Sirpb1c"), 
    "Dendritic Cells" = c("Cd209a"), 
    "Macrophages" = c("C1qa"), 
    "NK Cells" = c("Gzma"), 
    "Cd4 T Cells" = c("Cd4"), 
    "Cd8 T Cells" = c("Cd8a"), 
    "B Cells" = c("Cd79a")
)

level3_df <- makePerCellDF(sces, features = idconv(sapply(level3_markers, "[[", 1)), use.dimred = F) %>% 
    pivot_longer(cols = starts_with("ENS"), names_to = "ensembl", values_to = "logcounts")
level3_df$ensembl <- factor(level3_df$ensembl, levels = idconv(sapply(level3_markers, "[[", 1)))
lb <- as_labeller(setNames(sapply(level3_markers, "[[", 1), idconv(sapply(level3_markers, "[[", 1))))

p_level3 <- level3_df %>% 
    ggplot(aes(level3_cluster, logcounts)) +
    geom_violin(aes(fill = level3_cluster), scale = "width", color = NA, show.legend = F) +
    facet_wrap(vars(ensembl), 
               ncol = 1, 
               strip.position = "right", 
               labeller = lb) +
    scale_x_discrete(name = NULL) +
    scale_y_continuous(name = NULL) +
    marker_themes

saveRDS(p_level3, "../data/kidney/kidney-map/results/markers/p_level3_markers.rds")
```

# cell-cell communication

## prepare for cellphonedb

```{r}
library(Matrix)
library(dplyr)
library(data.table)
library(orthogene)
library(EnsDb.Hsapiens.v86)


sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
lc <- logcounts(sces)
lc <- convert_orthologs(gene_df = lc, 
                        gene_input = "rownames", 
                        gene_output = "rownames", 
                        input_species = "mouse", 
                        output_species = "human", 
                        method = "gprofiler")

cs <- counts(sces)
cs <- convert_orthologs(gene_df = cs, 
                        gene_input = "rownames", 
                        gene_output = "rownames", 
                        input_species = "mouse", 
                        output_species = "human", 
                        method = "gprofiler")

identical(rownames(lc), rownames(cs))
# convert to human sces
sces_human <- SingleCellExperiment(assays = list(counts = cs, logcounts = lc), 
                                   rowData = data.frame(symbol = rownames(cs), 
                                                        row.names = rownames(cs)), 
                                   colData = colData(sces))
sces_human %>% rowData()
saveRDS(sces_human, "../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")


lc <- lc %>% as.matrix %>% as.data.frame() %>% tibble::rownames_to_column("Gene")

fwrite(lc, 
       "../data/kidney/kidney-map/cellphonedb_input/counts.csv", 
       row.names = F, quote = F, sep = ",")

meta_file <- colData(sces) %>% as.data.frame() %>% 
    dplyr::rename("Cell" = "cell_ids") %>% 
    dplyr::select(Cell, level3_cluster) %>% 
    magrittr::set_colnames(value = c("cell", "cell_type"))

write.table(meta_file, 
            file = "../data/kidney/kidney-map/cellphonedb_input/meta_file.csv", 
            sep = ",", 
            row.names = F, 
            quote = F)

# microenvironment file
colData(sces) %>% 
    as.data.frame() %>% 
    dplyr::rename("Cell" = "cell_ids") %>% 
    dplyr::select(Cell, location) %>% 
    write.table("../data/kidney/kidney-map/cellphonedb_input/micronenvironment.csv", 
                row.names = F, 
                quote = F, 
                sep = ",")

# DEGs
fmarker3 <- readRDS("../data/kidney/kidney-map/results/markers/level3_markers.rds")
fmarker3 %>% names
DEG_list <- vector(mode = "list", length = length(fmarker3))
names(DEG_list) <- names(fmarker3)
for(name in names(DEG_list)){
    DEG_list[[name]] <- fmarker3[[name]] %>% 
        as.data.frame() %>% 
        tibble::rownames_to_column("ensembl") %>%
        dplyr::filter(p.value < 0.05) %>% 
        dplyr::select("ensembl") %>% 
        magrittr::inset2("cell_type", value = name) %>% 
        dplyr::relocate(cell_type)
}

library(purrr)
map_df(DEG_list, .f = dim) %>% rowSums()

deg <- map_dfr(DEG_list, .f = bind_rows)
write.table(deg, "../data/kidney/kidney-map/cellphonedb_input/DEG.csv", 
            row.names = F, 
            quote = F, 
            sep = ",")
```

## download cellphonedb database

```{python}
#| eval: false
from cellphonedb.utils import db_utils
from cellphonedb.utils import db_releases_utils
from IPython.display import HTML, display

display(HTML(db_releases_utils.get_remote_database_versions_html()['db_releases_html_table']))

db_utils.download_database("/home/yincy/git/data/cellphonedb/v4.1.0/", cpdb_version = "v4.1.0")
```

```{python}
# analysis
# only output mean expression of the interactions between two populations, which expressed at least a fraction of the cell.
from cellphonedb.src.core.methods import cpdb_analysis_method
?cpdb_analysis_method

mean, deconvoluted = cpdb_analysis_method.call(
    cpdb_file_path = "../data/cellphonedb/v4.1.0/cellphonedb.zip",
    meta_file_path = "../data/kidney/kidney-map/cellphonedb_input/meta_file.csv",
    counts_file_path = "../data/kidney/kidney-map/cellphonedb_input/counts.csv",
    threshold = 0.1,
    counts_data = "hgnc_symbol",
    output_path = "/home/yincy/git/data/kidney/kidney-map/results/cpdb_outs/analysis/"
)
```

```{python}
# statistical_analysis
from cellphonedb.src.core.methods import cpdb_statistical_analysis_method
?cpdb_statistical_analysis_method

deconvoluted, means, pvalue, significant_means = cpdb_statistical_analysis_method.call(
    cpdb_file_path = "/home/yincy/git/data/cellphonedb/v4.1.0/cellphonedb.zip",
    meta_file_path = "../data/kidney/kidney-map/cellphonedb_input/meta_file.csv",
    counts_file_path = "../data/kidney/kidney-map/cellphonedb_input/counts.csv",
    counts_data = "hgnc_symbol",
    output_path = "../data/kidney/kidney-map/results/cpdb_outs/statistical_analysis",
    threshold = 0.1,
    threads = 4
)
```

```{python}
# deg analysis
from cellphonedb.src.core.methods import cpdb_degs_analysis_method
?cpdb_degs_analysis_method

deconvoluted, means, relevant_interactions, significant_means = cpdb_degs_analysis_method.call(
    cpdb_file_path = "../data/cellphonedb/v4.1.0/cellphonedb.zip", 
    meta_file_path = "../data/kidney/kidney-map/cellphonedb_input/meta_file.csv",
    counts_file_path = "../data/kidney/kidney-map/cellphonedb_input/counts.csv",
    degs_file_path = "../data/kidney/kidney-map/cellphonedb_input/DEG.csv",
    counts_data = "hgnc_symbol",
    threshold = 0.1,
    output_path = "../data/kidney/kidney-map/results/cpdb_outs/degs_analysis/"
)
```

## visualize cell-cell communication results

```{r}
library(ggplot2)
library(tidyr)
library(dplyr)
library(stringr)

means <- read.table("../data/kidney/kidney-map/results/cpdb_outs/analysis/simple_analysis_means_result_06_09_2023_00:41:28.txt", 
                    sep = "\t", 
                    header = TRUE, 
                    check.names = F)
sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")

# remove unlikely interactions
# 1.Such as Spinal endothelial cells located at the paravertebral it's impossible to interact with renal tubule or colecting ducts.
# 2. self-interaction also removed  

cell_types <- sces$level3_cluster %>% levels

# self-interaction
rm1 <- paste(cell_types, cell_types, sep = "|")

# spinal endothelial with non-neurons interaction
rm2 <- c(paste("Spinal Endothelial", cell_types[-c(36:40)], sep = "|"), 
         paste(cell_types[-c(36:40)], "Spinal Endothelial", sep = "|"))

# satellite and schwann cells with non-neurons interaction, though minimal neurons might be  myelined, which may warped by some schwann cells, which makes it might has some interactions with renal cells, but this is too minimal, so this type of interaction also removed.  
rm3 <- c(paste(grep("Satellite Glia A", cell_types, value = TRUE), cell_types[-c(4, 36:37)], sep = "|"), 
         paste(cell_types[-c(4, 36:37)], grep("Satellite Glia A", cell_types, value = TRUE), sep = "|"), 
         paste(grep("Satellite Glia B", cell_types, value = TRUE), cell_types[-c(4, 36:37)], sep = "|"), 
         paste(cell_types[-c(4, 36:37)], grep("Satellite Glia B", cell_types, value = TRUE), sep = "|"), 
         paste(grep("Schwann Cells", cell_types, value = TRUE), cell_types[-c(4, 36:37)], sep = "|"), 
         paste(cell_types[-c(4, 36:37)], grep("Schwann Cells", cell_types, value = TRUE), sep = "|"))

# glomerular endothelial unlikely have interactions with renal tubule or collecting duct
rm4 <- c(paste("Glomerular Endothelial", grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), sep = "|"), 
         paste(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Glomerular Endothelial", sep = "|"))

# similarly podocytes and Mesangial Cells unlikely has interactions with renal tubule or collecting duct and endothelial
rm5 <- c(paste("Mesangial Cells A", c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), sep = "|"), 
         paste(c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), "Mesangial Cells A", sep = "|"),
         paste("Mesangial Cells B", c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), sep = "|"), 
         paste(c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), "Mesangial Cells B", sep = "|"), 
         paste("Podocytes", c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), sep = "|"), 
         paste(c(grep("^(LOH|PTS|DCT|CNT|CCD|OMCD|IMCD)", cell_types, value = T), "Endothelial"), "Podocytes", sep = "|"))

# Afferent/Efferent Endothelial unlikely interacts with LOH and collecting duct
rm6 <- c(paste("Afferent/Efferent Endothelial", grep("^(LOH|OMCD|IMCD)", cell_types, value = TRUE), sep = "|"), 
         paste(grep("^(LOH|OMCD|IMCD)", cell_types, value = TRUE), "Afferent/Efferent Endothelial", sep = "|"))

interaction_pairs_to_remove <- c(rm1, rm2, rm3, rm4, rm5, rm6) %>% unique()
interaction_pairs_to_remove %>% str
means <- means %>% dplyr::select(!all_of(interaction_pairs_to_remove))
means %>% dplyr::select(contains("Mesangial"))
means_long <- means %>% 
    pivot_longer(cols = grep("\\|", colnames(means), value = TRUE), 
                                     names_to = "cell_pairs", 
                                     values_to = "mean_expression") %>% 
    dplyr::filter(mean_expression > 0) %>% 
    separate(cell_pairs, into = c("cell_a", "cell_b"), sep = "\\|") %>% 
    arrange(cell_a)
means_long
saveRDS(means_long, "../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")
```

### The whole inteaction at level 3 cluster

```{r}
#| label: whole interaction at level3
library(stringr)
library(tidyr)
library(dplyr)


means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})

interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@", remove = F) %>% 
    mutate(normalized_strength = round(strength / n, 4)) %>% 
    as.data.frame()
rownames(interactions) <- interactions$cell_pair_ids


m_n <- matrix(0, nrow = 40, ncol = 40, 
            dimnames = list(cell_types, cell_types))

m_strength <- matrix(0, nrow = 40, ncol = 40, 
                     dimnames = list(cell_types, cell_types))

m_normalized_strength <- matrix(0, nrow = 40, ncol = 40, 
                                dimnames = list(cell_types, cell_types))

for(i in 1:40){
    for(j in 1:40){
        dn = m_n[i,j,drop = F] %>% dimnames() %>% unlist() %>% sort %>% str_c(collapse = "@")
        for(n in rownames(interactions)){
            if(dn == n){
                m_n[i, j] = interactions[n, "n"]
            }
        }
    }
}

for(i in 1:40){
    for(j in 1:40){
        dn = m_strength[i,j,drop = F] %>% dimnames() %>% unlist() %>% sort %>% str_c(collapse = "@")
        for(n in rownames(interactions)){
            if(dn == n){
                m_strength[i, j] = interactions[n, "n"]
            }
        }
    }
}

for(i in 1:40){
    for(j in 1:40){
        dn = m_normalized_strength[i,j,drop = F] %>% dimnames() %>% unlist() %>% sort %>% str_c(collapse = "@")
        for(n in rownames(interactions)){
            if(dn == n){
                m_normalized_strength[i, j] = interactions[n, "n"]
            }
        }
    }
}
```

```{r}
library(pheatmap)
pdf("../data/kidney/kidney-map/results/cell_cell_communication/level3_interaction_strength.pdf")
pheatmap(m_n, 
         color = viridis::inferno(100), 
         fontsize_col = 5, 
         fontsize_row = 5, 
         angle_col = 315, 
         clustering_method = "ward.D2", 
         main = "number of interactions")

pheatmap(m_strength, 
         color = viridis::inferno(100), 
         fontsize_col = 5, 
         fontsize_row = 5, 
         angle_col = 315, 
         clustering_method = "ward.D2", 
         main = "sum of mean expression")

pheatmap(m_normalized_strength, 
         color = viridis::inferno(100), 
         fontsize_col = 5, 
         fontsize_row = 5, 
         angle_col = 315, 
         clustering_method = "ward.D2", 
         main = "normalized mean expression")
dev.off()
```

### interaction strength

#### level 1 interactions of Neurons

the interaction strength is defined by:\
1. the sum of the mean expressions of the two clusters then normalized by the total number of interactions between the two clusters\
2. or the number of total interactions between the two populations\
3. the sum of the mean expression between those two populations\

```{r}
#| message: false
#| label: level 1 interactions
sces <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated.rds")
level1 <- setNames(sces$level1_cluster, sces$level3_cluster)
means_long <- means_long %>%
    mutate(cell_a = level1[cell_a],
           cell_b = level1[cell_b])

means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})


interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@") %>% 
    mutate(normalized_strength = round(strength / n, 4))

# remove self-interactions
interactions <- interactions %>% dplyr::filter(!(cell_a == cell_b)) %>% dplyr::arrange(-n)
neurons_interactions_level1 <- interactions %>% dplyr::filter(grepl("Neurons", cell_a) | grepl("Neurons", cell_b))
write.csv(neurons_interactions_level1,
          "../data/kidney/kidney-map/results/cell_cell_communication/level1_interactions.csv", 
          row.names = F, 
          quote = F)

# manually change Neurons to the second column
```

```{r}
#| message: false
#| warning: false
library(circlize)
library(RColorBrewer)
neurons_interactions_level1 <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/level1_interactions.csv")

pdf("../data/kidney/kidney-map/results/cell_cell_communication/level1_interactions.pdf", 
    height = 3, width = 8)
par(mfrow = c(1, 3))
circos.par(start.degree = -9,
           gap.after = c(rep(15, 7), 30, 30, 15), 
           canvas.ylim = c(-1, 1), canvas.xlim = c(-1, 1))
order <- c("Endothelium", "Parietal Epithelial", "Proximal Tubule", 
           "LOH", "Distal Tubule", "Collecting Duct", "Interstitial", 
           "Immune", "Neurons", "Glia")
grid.col <- brewer.pal(9, "Set1")
grid.col <- append(grid.col, "grey40", after = 8)
names(grid.col) <- order

for(i in 3:5){
    chordDiagramFromDataFrame(df = neurons_interactions_level1[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, 
                              link.zindex = rank(neurons_interactions_level1[[i]]), 
                              annotationTrack = c("grid"), 
                              annotationTrackHeight = 0.05, 
                              link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter, 
                    y = CELL_META$ylim[2] + mm_y(1), 
                    labels = get.cell.meta.data("sector.index"), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 0.42, 
                    adj = 0.5)
    })
}
circos.clear()
dev.off()
```

#### level 1 interactions: sensory and sympathetic neurons

```{r}
ns <- c(rep("Endothelium", 4), "Parietal Epithelial", rep("Proximal Tubule", 3), 
        rep("LOH", 6), rep("Distal Tubule", 2), rep("Collecting Duct", 6), 
        rep("Interstitial", 6), rep("Immune", 7), "Sensory Neurons", "Sympathetic Neurons", 
        rep("Glia", 3))
level1.1 <- setNames(ns, levels(sces$level3_cluster))
means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")

means_long <- means_long %>%
    mutate(cell_a = level1.1[cell_a], 
           cell_b = level1.1[cell_b])

means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})


interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@") %>% 
    mutate(normalized_strength = round(strength / n, 6))

# remove self-interactions
interactions <- interactions %>% dplyr::filter(!(cell_a == cell_b)) %>% dplyr::arrange(-n)
neurons_interactions_level1.1 <- interactions %>% dplyr::filter(grepl("Neurons", cell_a) | grepl("Neurons", cell_b))
write.csv(neurons_interactions_level1.1,
          "../data/kidney/kidney-map/results/cell_cell_communication/level1.1_interactions.csv", 
          row.names = F, 
          quote = F)
```

```{r}
#| message: false
#| warning: false
library(circlize)
library(RColorBrewer)
neurons_interactions_level1.1 <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/level1.1_interactions.csv")

pdf("../data/kidney/kidney-map/results/cell_cell_communication/level1.1_interactions.pdf",
    height = 3, width = 8)
par(mfrow = c(1, 3))
circos.par(start.degree = -9,
           gap.after = c(rep(15, 7), 30, 15, 30, 15), 
           canvas.ylim = c(-1, 1), canvas.xlim = c(-1, 1))
order <- c("Endothelium", "Parietal Epithelial", "Proximal Tubule", 
           "LOH", "Distal Tubule", "Collecting Duct", "Interstitial", 
           "Immune", "Sensory Neurons", "Sympathetic Neurons", "Glia")
grid.col <- colorRampPalette(colors = rainbow(9))(length(levels(sces$level1_cluster)) - 2)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 8)
names(grid.col) <- order

for(i in 3:5){
    chordDiagramFromDataFrame(df = neurons_interactions_level1.1[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0, 
                              link.sort = TRUE, link.decreasing = TRUE, 
                              link.zindex = rank(neurons_interactions_level1.1[[i]]), 
                              annotationTrack = c("grid"), 
                              annotationTrackHeight = 0.05, 
                              link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter, 
                    y = CELL_META$ylim[2] + mm_y(1), 
                    labels = get.cell.meta.data("sector.index"), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 0.42, 
                    adj = 0.5)
    })
}

circos.clear()
dev.off()
```

#### level 2 interactions

```{r}
#| label: level 2 interactions
# level2 interactions strength
level2 <- setNames(sces$level2_cluster, sces$level3_cluster)

means_long <- readRDS("../data/kidney/kidney-map/results/cpdb_outs/analysis/means_long.rds")
means_long <- means_long %>% 
    mutate(cell_a = level2[cell_a], 
           cell_b = level2[cell_b])

means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})


interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@") %>% 
    mutate(normalized_strength = round(strength / n, 6))


# remove self-interactions
interactions <- interactions %>% dplyr::filter(!(cell_a == cell_b)) %>% dplyr::arrange(-n)
neurons_interactions_level2 <- interactions %>% dplyr::filter(grepl("Neurons", cell_a) | grepl("Neurons", cell_b))
write.csv(neurons_interactions_level2,
          "../data/kidney/kidney-map/results/cell_cell_communication/level2_interactions.csv", 
          row.names = F, 
          quote = F)
# manually place neurons to the second column
neurons_interactions_level2 <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/level2_interactions.csv")
```

```{r}
#| message: false
#| warning: false
library(circlize)
library(RColorBrewer)

pdf("../data/kidney/kidney-map/results/cell_cell_communication/level2_interactions.pdf", 
    height = 3, width = 8)
par(mfrow = c(1, 3))
circos.par(start.degree = -11.5,
           gap.after = c(rep(3, 18), 10, 3, 10, 3, 3),
           canvas.ylim = c(-1.2, 1.2), canvas.xlim = c(-1.2, 1.2))
order <- sces$level2_cluster %>% levels()
names(order) <- order
grid.col <- colorRampPalette(colors = rainbow(9))(length(levels(sces$level2_cluster)) - 2)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 19)
names(grid.col) <- order

for(i in 3:5){
   chordDiagramFromDataFrame(df = neurons_interactions_level2[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, 
                              link.zindex = rank(neurons_interactions_level2[[i]]), 
                              annotationTrack = c("grid"), 
                              annotationTrackHeight = 0.05, 
                             link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter * 1.4, 
                    y = CELL_META$ylim[2] + mm_y(2), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                   get.cell.meta.data("sector.index"), ""), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 0.8, 
                    adj = 0.8)
        
        circos.text(x = CELL_META$xcenter, 
                    y = CELL_META$ylim[2] + mm_y(0.2), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                    "", get.cell.meta.data("sector.index")), 
                    facing = "clockwise", 
                    niceFacing = TRUE, 
                    cex = 0.4, 
                    adj = 0)
    })
}

circos.clear()
dev.off()
```

#### level 3 interactions

```{r}
#| label: level 3 interactions
means_long <- readRDS("../data/kidney/kidney-map/results/cpdb_outs/analysis/means_long.rds")

means_long$cell_pair_ids <- means_long %>% 
    unite(col = "cell_pair_ids", cell_a, cell_b, sep = "@") %>% 
    dplyr::pull(cell_pair_ids) %>% 
    str_split("@", n = 2) %>% 
    sapply(function(x){str_c(sort(x), collapse = "@")})

interactions <- means_long %>% 
    dplyr::filter(mean_expression > 0) %>% 
    group_by(cell_pair_ids) %>% 
    summarise(n = n(), 
              strength = sum(mean_expression)) %>% 
    separate(cell_pair_ids, into = c("cell_a", "cell_b"), sep = "@") %>% 
    mutate(normalized_strength = round(strength / n, 4))

# remove self-interactions
interactions <- interactions %>% dplyr::filter(!(cell_a == cell_b)) %>% dplyr::arrange(-n)
neurons_interactions_level3 <- interactions %>% dplyr::filter(grepl("Neurons", cell_a) | grepl("Neurons", cell_b))
write.csv(neurons_interactions_level3,
          "../data/kidney/kidney-map/results/cell_cell_communication/level3_interactions.csv", 
          row.names = F, 
          quote = F)
# manually place neurons to the second column
```

```{r}
#| message: false
#| warning: false
library(circlize)
library(RColorBrewer)
neurons_interactions_level3 <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/level3_interactions.csv")
pdf("../data/kidney/kidney-map/results/cell_cell_communication/level3_interactions.pdf", 
    height = 3, width = 8)
par(mfrow = c(1, 3))
lim <- 1.5
circos.par(start.degree = 1.5,
           gap.after = c(rep(3, 34), 10, 3, 10, 3, 3, 3),
           canvas.ylim = c(-lim, lim), canvas.xlim = c(-lim, lim), 
           cell.padding = rep(0, 4))
order <- sces$level3_cluster %>% levels()
names(order) <- order
grid.col <- colorRampPalette(colors = rainbow(9))(length(levels(sces$level3_cluster)) - 2)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 35)
names(grid.col) <- order

for(i in 3:5){
   chordDiagramFromDataFrame(df = neurons_interactions_level3[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, grid.border = NULL, 
                              link.zindex = rank(neurons_interactions_level3[[i]]), 
                              annotationTrack = c("grid"), annotationTrackHeight = 0.05, 
                              direction.type = "diffHeight", link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter * 1.3, 
                    y = CELL_META$ylim[2] + mm_y(1.3), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                   get.cell.meta.data("sector.index"), ""), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 0.42, 
                    adj = 0.9)
        
        circos.text(x = CELL_META$xcenter * 1.5, 
                    y = CELL_META$ylim[2] + mm_y(0.2), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                    "", get.cell.meta.data("sector.index")), 
                    facing = "clockwise", 
                    niceFacing = TRUE, 
                    cex = 0.35, 
                    adj = 0)
    })
}

circos.clear()
dev.off()
```

# directed interaction

```{r}
library(dplyr)
library(tidyr)
library(stringr)

means_long <- readRDS("../data/kidney/kidney-map/results/cpdb_outs/analysis/means_long.rds")

# remove all secreted interactions
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

# neurons expressed receptors
receptors_expressed_by_neurons_ids <- ((means_long$receptor_a == "True" & means_long$cell_a %in% c("Sympathetic Neurons", "Sensory Neurons")) | (means_long$receptor_b == "True" & means_long$cell_b %in% c("Sympathetic Neurons", "Sensory Neurons")))


# receptors expressed by non-neurons and ligands expressed by neurons
ligands_expressed_by_neurons_ids <- ((means_long$receptor_a == "False" & means_long$cell_a %in% c("Sympathetic Neurons", "Sensory Neurons")) | (means_long$receptor_b == "False" & means_long$cell_b %in% c("Sympathetic Neurons", "Sensory Neurons")) & (means_long$receptor_a == "True" | means_long$partner_b == "True"))

receptors_expressed_by_neurons_ids %>% table; ligands_expressed_by_neurons_ids %>% table


receptors_expressed_by_neurons <- means_long[receptors_expressed_by_neurons_ids, ]

# for chordDiagram neurons expressed receptors
source("functions/idconv.R")
receptors_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(gene_a_receptor = ifelse(!grepl("^ENS", gene_a_receptor), 
                                    str_split(gene_a_receptor, ",") %>% 
                                        sapply(function(x){idconv(x, from_type = "UNIPROTID", to_type = "GENEID", db = "human")}) %>% str_c(collapse = ","), 
                                    gene_a_receptor))


receptors_expressed_by_neurons <- receptors_expressed_by_neurons %>% 
    group_by(cell_a_receptor, cell_b_ligand) %>% 
    mutate(n = n(), 
              strength = sum(mean_expression), 
              normalized_strength = round(strength / n, 6)) %>% 
    dplyr::relocate(n, strength, normalized_strength, .before = 3) %>% 
    distinct(cell_a_receptor, cell_b_ligand, .keep_all = T)

write.csv(receptors_expressed_by_neurons, 
          "../data/kidney/kidney-map/results/cell_cell_communication/receptors_expressed_by_neurons.csv", 
          row.names = F, quote = F)


#----------------#


ligands_expressed_by_neurons <- means_long[ligands_expressed_by_neurons_ids, ]


# remove self-interactions
ligands_expressed_by_neurons <- ligands_expressed_by_neurons %>% dplyr::filter(cell_a_receptor != cell_b_ligand)

ligands_expressed_by_neurons <- ligands_expressed_by_neurons %>% 
    group_by(cell_a_receptor, cell_b_ligand) %>% 
    mutate(n = n(), 
              strength = sum(mean_expression), 
              normalized_strength = round(strength / n, 6)) %>% 
    dplyr::relocate(n, strength, normalized_strength, .before = 3) %>% 
    distinct(cell_a_receptor, cell_b_ligand, .keep_all = T)

write.csv(ligands_expressed_by_neurons, 
          "../data/kidney/kidney-map/results/cell_cell_communication/ligands_expressed_by_neurons.csv", 
          row.names = F, 
          quote = F)
```

```{r}
library(circlize)
library(RColorBrewer)

receptors_expressed_by_neurons <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/receptors_expressed_by_neurons.csv")
pdf("../data/kidney/kidney-map/results/cell_cell_communication/receptors_expressed_by_neurons.pdf", 
    height = 3, width = 8)
par(mfrow = c(1, 3))
lim <- 1.5
circos.par(start.degree = 1.5,
           gap.after = c(rep(3, 34), 10, 3, 10, 3, 3, 3),
           canvas.ylim = c(-lim, lim), canvas.xlim = c(-lim, lim),  
           cell.padding = rep(0, 4))
order <- sces$level3_cluster %>% levels()
names(order) <- order
grid.col <- colorRampPalette(colors = rainbow(9))(length(levels(sces$level3_cluster)) - 2)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 35)
names(grid.col) <- order

for(i in 3:5){
   chordDiagramFromDataFrame(df = receptors_expressed_by_neurons[, c(2, 1, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, grid.border = NULL, 
                              link.zindex = rank(receptors_expressed_by_neurons[[i]]), 
                              annotationTrack = c("grid"), annotationTrackHeight = 0.05, 
                             directional = 1, link.arr.type = "big.arrow", direction.type = "arrows", 
                             link.largest.ontop = TRUE)
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter * 1.3, 
                    y = CELL_META$ylim[2] + mm_y(1.3), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                   get.cell.meta.data("sector.index"), ""), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 0.42, 
                    adj = 0.9)
        
        circos.text(x = CELL_META$xcenter * 1.5, 
                    y = CELL_META$ylim[2] + mm_y(0.2), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                    "", get.cell.meta.data("sector.index")), 
                    facing = "clockwise", 
                    niceFacing = TRUE, 
                    cex = 0.35, 
                    adj = 0)
    })
}

circos.clear()
dev.off()
```

```{r}
library(circlize)
library(RColorBrewer)

receptors_expressed_by_non_neurons <- read.csv("../data/kidney/kidney-map/results/cell_cell_communication/ligands_expressed_by_neurons.csv")
pdf("../data/kidney/kidney-map/results/cell_cell_communication/ligands_expressed_by_neurons.pdf", 
    height = 3, width = 8)
par(mfrow = c(1, 3))
lim <- 1.5
circos.par(start.degree = 1.5,
           gap.after = c(rep(3, 34), 10, 3, 10, 3, 3, 3),
           canvas.ylim = c(-lim, lim), canvas.xlim = c(-lim, lim),  
           cell.padding = rep(0, 4))
order <- sces$level3_cluster %>% levels()
names(order) <- order
grid.col <- colorRampPalette(colors = brewer.pal(9, "Set1"))(length(levels(sces$level3_cluster)) - 2)
grid.col <- append(grid.col, c("grey40", "grey40"), after = 35)
names(grid.col) <- order

for(i in 3:5){
   chordDiagramFromDataFrame(df = receptors_expressed_by_non_neurons[, c(1, 2, i)], 
                              order = order, grid.col = grid.col, transparency = 0,
                              link.sort = TRUE, link.decreasing = TRUE, grid.border = NULL, 
                              link.zindex = rank(receptors_expressed_by_non_neurons[[i]]), 
                              annotationTrack = c("grid"), annotationTrackHeight = 0.05, 
                             link.arr.type = "big.arrow", directional = -1, 
                             direction.type = c("arrows"))
    circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y){
        circos.text(x = CELL_META$xcenter * 1.3, 
                    y = CELL_META$ylim[2] + mm_y(1.3), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                   get.cell.meta.data("sector.index"), ""), 
                    facing = "bending.inside", 
                    niceFacing = TRUE, 
                    cex = 0.42, 
                    adj = 0.9)
        
        circos.text(x = CELL_META$xcenter * 1.5, 
                    y = CELL_META$ylim[2] + mm_y(0.2), 
                    labels = ifelse(get.cell.meta.data("sector.index") %in% c("Sympathetic Neurons", "Sensory Neurons"), 
                                    "", get.cell.meta.data("sector.index")), 
                    facing = "clockwise", 
                    niceFacing = TRUE, 
                    cex = 0.35, 
                    adj = 0)
    })
}

circos.clear()
dev.off()
```

# neurons expressed top 10 liagnds, receptors and there's interaction with other cells

## neurons top ligand's receptors expression across cell types

```{r}
library(scuttle)
library(tidyr)
library(dplyr)
library(stringr)

means_long <- readRDS("../data/kidney/kidney-map/results/cpdb_outs/analysis/means_long.rds")

# remove all secreted interactions
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

# receptors expressed by non-neurons and ligands expressed by neurons
ligands_expressed_by_neurons_ids <- ((means_long$receptor_a == "False" & means_long$cell_a %in% c("Sympathetic Neurons", "Sensory Neurons")) | (means_long$receptor_b == "False" & means_long$cell_b %in% c("Sympathetic Neurons", "Sensory Neurons")) & (means_long$receptor_a == "True" | means_long$partner_b == "True"))


ligands_expressed_by_neurons <- means_long[ligands_expressed_by_neurons_ids, ]

# place receptors into the first column ligands to the second column
ligands_expressed_by_neurons <- ligands_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(cell_a_receptor = ifelse(receptor_a == "True", cell_a, cell_b), 
           partner_a_receptor = ifelse(receptor_a == "True", partner_a, partner_b), 
           gene_a_receptor = ifelse(receptor_a == "True", gene_a, gene_b),
           cell_b_ligand = ifelse(receptor_b == "False", cell_b, cell_a), 
           partner_b_ligand = ifelse(receptor_b == "False", partner_b, partner_a), 
           gene_b_ligand = ifelse(receptor_b == "False", gene_b, gene_a)) %>% 
    ungroup() %>% 
    dplyr::select(matches("_receptor|_ligand"), mean_expression) %>% 
    dplyr::relocate(cell_b_ligand, .before = 2) 

complex_input <- read.csv("../data/cellphonedb/v4.1.0/complex_input.csv") %>% tibble::column_to_rownames("complex_name")

# convert ligand gene id to symbol id
neurons_ligands <- ligands_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(gene_b_ligand = ifelse(grepl("^complex:", partner_b_ligand), 
                                  complex_input[gsub("^complex:", "", partner_b_ligand), 1:5, drop = F] %>% 
                                      apply(1, str_c, collapse = ",") %>% 
                                      str_replace(",{1,}$", ""), 
                                  gene_b_ligand))

source("functions/idconv.R")
neurons_ligands <- neurons_ligands %>% rowwise() %>% 
    mutate(gene_b_ligand = ifelse(grepl("^ENSG", gene_b_ligand), 
                                  idconv(gene_b_ligand, from_type = "GENEID", to_type = "SYMBOL", db = "human"), 
                                  str_split(gene_b_ligand, ",") %>% 
                                      sapply(function(x){idconv(x, from_type = "UNIPROTID", to_type = "SYMBOL", db = "human")}) %>% 
                                      str_c(collapse = ",")))

neurons_ligands %>% dplyr::filter(is.na(gene_b_ligand))
neurons_ligands %>% dplyr::filter(grepl("^ENSG", gene_b_ligand))
# manually convert CEL uniprot id to symbol id, this conversion was failed
neurons_ligands$gene_b_ligand <- ifelse(is.na(neurons_ligands$gene_b_ligand), "CEL", neurons_ligands$gene_b_ligand)


# convert receptors gene id to symbol id
neurons_ligands <- neurons_ligands %>% 
    rowwise() %>% 
    mutate(gene_a_receptor = ifelse(grepl("^complex:", partner_a_receptor), 
                                    complex_input[gsub("^complex:", "", partner_a_receptor), 1:5, drop = F] %>% 
                                        apply(1, str_c, collapse = ",") %>% 
                                        str_replace(",{1,}$", ""),  
                                    gene_a_receptor))

neurons_ligands <- neurons_ligands %>% 
    rowwise() %>% 
    mutate(gene_a_receptor = ifelse(grepl("^ENSG", gene_a_receptor), 
                                    idconv(gene_a_receptor, from_type = "GENEID", to_type = "SYMBOL", db = "human"), 
                                    str_split(gene_a_receptor, ",") %>% 
                                        sapply(function(x){idconv(x, from_type = "UNIPROTID", to_type = "SYMBOL", db = "human")} %>% 
                                                   str_c(collapse = ","))))

neurons_ligands %>% dplyr::filter(is.na(gene_a_receptor))
neurons_ligands %>% dplyr::filter(grepl("^ENSG", gene_a_receptor))
# manually convert  to symbol id, this failed convert from uniprot id to symbol id
neurons_ligands$gene_a_receptor <- ifelse(is.na(neurons_ligands$gene_a_receptor), "RYK,FZD8", neurons_ligands$gene_a_receptor)
```

```{r}
library(scuttle)
library(tidyr)
library(dplyr)
library(stringr)

# get ligands and receptors expression
# the expression value is calculated by avarge the gene's expression across the cell
# for complex, this is the combined mean of multiple gene's mean expression
neurons_ligands <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/neurons_ligands.rds")
sces_human <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")


# remove not expressed pairs
ligands <- neurons_ligands$gene_b_ligand %>% str_split(",") %>% unique
ligands %>% str
receptors <- neurons_ligands$gene_a_receptor %>% str_split(",") %>% unique()
receptors %>% str

ligands_ids <- sapply(ligands, function(x){
    all(x %in% rownames(sces_human))
})
ligands_ids %>% table
ligands <- ligands[ligands_ids]
ligands <- ligands %>% sapply(str_c, collapse = ",")

receptors_ids <- sapply(receptors, function(x){
    all(x %in% rownames(sces_human))
})
receptors_ids %>% table
receptors <- receptors[receptors_ids]
receptors <- receptors %>% sapply(str_c, collapse = ",")
neurons_ligands <- neurons_ligands %>% dplyr::filter(gene_a_receptor %in% receptors, gene_b_ligand %in% ligands)

# extract ligands expression
neurons_ligands <- neurons_ligands %>% 
    rowwise() %>% 
    mutate(gene_b_ligand_expression = makePerCellDF(sces_human[, sces_human$level3_cluster == cell_b_ligand], 
                                                    features = str_split(gene_b_ligand, ",") %>% unlist, 
                                                    use.dimred = F) %>% 
               pivot_longer(cols = -c(1:11), names_to = "symbol", values_to = "logcounts") %>% 
               dplyr::pull(logcounts) %>% 
               mean %>% 
               round(4)) %>% 
    relocate(gene_b_ligand_expression, .after = gene_b_ligand)


# extract receptors expression
neurons_ligands <- neurons_ligands %>% 
    rowwise() %>% 
    mutate(gene_a_receptor_expression = makePerCellDF(sces_human[, sces_human$level3_cluster == cell_a_receptor], 
                                                      features = str_split(gene_a_receptor, ",") %>% unlist, 
                                                      use.dimred = F) %>% 
               pivot_longer(cols = -c(1:11), names_to = "symbol", values_to = "logcounts") %>% 
               dplyr::pull(logcounts) %>% 
               mean %>% 
               round(4)) %>% 
    dplyr::relocate(gene_a_receptor_expression, .after = gene_a_receptor)

saveRDS(neurons_ligands, "../data/kidney/kidney-map/results/cell_cell_communication/neurons_ligands.rds")
```

### visualize neurons top ligand's receptors expression

## neurons expressed receptors

```{r}
means_long <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/means_long.rds")

# remove all secreted interactions
means_long <- means_long %>% dplyr::filter(!(receptor_a == "False" & receptor_b == "False"))

receptors_expressed_by_neurons_ids <- ((means_long$receptor_a == "True" & means_long$cell_a %in% c("Sympathetic Neurons", "Sensory Neurons")) | (means_long$receptor_b == "True" & means_long$cell_b %in% c("Sympathetic Neurons", "Sensory Neurons")))

receptors_expressed_by_neurons <- means_long[receptors_expressed_by_neurons_ids, ]
# place receptors into the first column and ligands to the second column
receptors_expressed_by_neurons <- receptors_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(cell_a_receptor = ifelse(receptor_a == "True", cell_a, cell_b), 
           cell_b_ligand = ifelse(receptor_b == "False", cell_b, cell_a),
           
           partner_a_receptor = ifelse(receptor_a == "True", partner_a, partner_b), 
           partner_b_ligand = ifelse(receptor_b == "False", partner_b, partner_a), 
           
           gene_a_receptor = ifelse(receptor_a == "True", gene_a, gene_b),
           gene_b_ligand = ifelse(receptor_b == "False", gene_b, gene_a)) %>% 
    ungroup() %>% 
    dplyr::select(matches("_receptor|_ligand"), mean_expression) %>% 
    dplyr::relocate(cell_b_ligand, .before = 2) 

# remove self-interactions
receptors_expressed_by_neurons <- receptors_expressed_by_neurons %>% dplyr::filter(cell_a_receptor != cell_b_ligand)

complex_input <- read.csv("../data/cellphonedb/v4.1.0/complex_input.csv") %>% tibble::column_to_rownames("complex_name")

# convert receptors id to symbol id
neurons_receptors <- receptors_expressed_by_neurons %>% 
    rowwise() %>% 
    mutate(gene_a_receptor = ifelse(grepl("^complex:", partner_a_receptor), 
                                    complex_input[gsub("^complex:", "", partner_a_receptor), 1:5, drop = F] %>% 
                                        apply(1, str_c, collapse = ",") %>% 
                                        str_replace(",{1,}$", "") , 
                                    gene_a_receptor))

neurons_receptors <- neurons_receptors %>% 
    rowwise() %>% 
    mutate(gene_a_receptor = ifelse(grepl("^complex:", partner_a_receptor), 
                                    str_split(gene_a_receptor, ",") %>% 
                                        sapply(function(x){idconv(x, from_type = "UNIPROTID", to_type = "SYMBOL", db = "human")} %>% 
                                                   str_c(collapse = ",")), 
                                    gene_a_receptor))
neurons_receptors %>% dplyr::filter(is.na(gene_a_receptor))
# manually change NA to "RYK,FZD8", this conversion failed from uniprotid to symbol id
neurons_receptors$gene_a_receptor <- ifelse(is.na(neurons_receptors$gene_a_receptor), "RYK,FZD8", neurons_receptors$gene_a_receptor)



# convert ligands idto symbol id
neurons_receptors <- neurons_receptors %>% 
    rowwise() %>% 
    mutate(gene_b_ligand = ifelse(grepl("^complex:", partner_b_ligand), 
                                  complex_input[gsub("^complex:", "", partner_b_ligand), 1:5, drop = F] %>% 
                                      apply(1, str_c, collapse = ",") %>% 
                                      str_replace(",{1,}$", ""), 
                                  gene_b_ligand))

neurons_receptors <- neurons_receptors %>% 
    rowwise() %>% 
    mutate(gene_b_ligand = ifelse(grepl("^complex:", partner_b_ligand), 
                                    str_split(gene_b_ligand, ",") %>% 
                                        sapply(function(x){idconv(x, from_type = "UNIPROTID", to_type = "SYMBOL", db = "human")} %>% 
                                                   str_c(collapse = ",")), 
                                    gene_b_ligand))

neurons_receptors %>% dplyr::filter(is.na(gene_b_ligand))
neurons_receptors %>% dplyr::filter(grepl("^ENSG", gene_b_ligand))
# manually change NA to CEL, this conversion failed for CEL uniprot id to symbol id
neurons_receptors$gene_b_ligand <- ifelse(is.na(neurons_receptors$gene_b_ligand), "CEL", neurons_receptors$gene_b_ligand)
```


```{r}
library(scuttle)
library(dplyr)
library(tidyr)

neurons_receptors <- readRDS("../data/kidney/kidney-map/results/cell_cell_communication/neurons_receptors.rds")
sces_human <- readRDS("../data/kidney/kidney-map/integrated_data/fastMNN_integrated_human.rds")

# remove unexpressed pairs
receptors <- neurons_receptors$gene_a_receptor %>% str_split(",") %>% unique
ligands <- neurons_receptors$gene_b_ligand %>% str_split(",") %>% unique

receptors_ids <- sapply(receptors, function(x){
    all(x %in% rownames(sces_human))
})
receptors_ids %>% table
receptors <- receptors[receptors_ids] %>% sapply(str_c, collapse = ",")

ligands_ids <- sapply(ligands, function(x){
    all(x %in% rownames(sces_human))
})
ligands_ids %>% table
ligands <- ligands[ligands_ids] %>% sapply(str_c, collapse = ",")


neurons_receptors <- neurons_receptors %>% dplyr::filter(gene_a_receptor %in% receptors & gene_b_ligand %in% ligands)

# extract receptors expression
neurons_receptors <- neurons_receptors %>% 
    rowwise() %>% 
    mutate(gene_a_receptor_expression = makePerCellDF(sces_human[, sces_human$level3_cluster == cell_a_receptor], 
                                                      features = str_split(gene_a_receptor, ",") %>% unlist) %>% 
               pivot_longer(cols = -c(1:11), names_to = "symbol", values_to = "logcounts") %>% 
               dplyr::pull(logcounts) %>% 
               mean %>% 
               round(4)) %>% 
    dplyr::relocate(gene_a_receptor_expression, .after = gene_a_receptor)


# extract ligands expression
neurons_receptors <- neurons_receptors[1:100, ] %>% 
    rowwise() %>% 
    mutate(gene_b_ligand_expression = makePerCellDF(sces_human[, sces_human$level3_cluster == cell_b_ligand], 
                                                      features = str_split(gene_b_ligand, ",") %>% unlist) %>% 
               pivot_longer(cols = -c(1:11), names_to = "symbol", values_to = "logcounts") %>% 
               dplyr::pull(logcounts) %>% 
               mean %>% 
               round(4)) %>% 
    dplyr::relocate(gene_b_ligand_expression, .after = gene_b_ligand)
saveRDS(neurons_receptors, "../data/kidney/kidney-map/results/cell_cell_communication/neurons_receptors.rds")
```

### visualize neurons top receptors ligand's expression

## neurons secreted proteins
